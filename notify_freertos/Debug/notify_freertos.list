
notify_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004690  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08004870  08004870  00014870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a04  08004a04  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08004a04  08004a04  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a04  08004a04  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a04  08004a04  00014a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a08  08004a08  00014a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08004a0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000154d0  2000008c  08004a98  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001555c  08004a98  0002555c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_line   00009a31  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0000e698  00000000  00000000  00029aed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00001d8f  00000000  00000000  00038185  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000bd8  00000000  00000000  00039f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00079dfa  00000000  00000000  0003aaf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000af0  00000000  00000000  000b48f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00003870  00000000  00000000  000b53e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b8c50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035d8  00000000  00000000  000b8ccc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000008c 	.word	0x2000008c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004858 	.word	0x08004858

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000090 	.word	0x20000090
 800021c:	08004858 	.word	0x08004858

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d0:	480d      	ldr	r0, [pc, #52]	; (8000308 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002d2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002d4:	f003 fcfa 	bl	8003ccc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d8:	480c      	ldr	r0, [pc, #48]	; (800030c <LoopForever+0x6>)
  ldr r1, =_edata
 80002da:	490d      	ldr	r1, [pc, #52]	; (8000310 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002dc:	4a0d      	ldr	r2, [pc, #52]	; (8000314 <LoopForever+0xe>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e0:	e002      	b.n	80002e8 <LoopCopyDataInit>

080002e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002e6:	3304      	adds	r3, #4

080002e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002ec:	d3f9      	bcc.n	80002e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ee:	4a0a      	ldr	r2, [pc, #40]	; (8000318 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f0:	4c0a      	ldr	r4, [pc, #40]	; (800031c <LoopForever+0x16>)
  movs r3, #0
 80002f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f4:	e001      	b.n	80002fa <LoopFillZerobss>

080002f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f8:	3204      	adds	r2, #4

080002fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002fc:	d3fb      	bcc.n	80002f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002fe:	f003 fe69 	bl	8003fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000302:	f003 fb49 	bl	8003998 <main>

08000306 <LoopForever>:

LoopForever:
    b LoopForever
 8000306:	e7fe      	b.n	8000306 <LoopForever>
  ldr   r0, =_estack
 8000308:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800030c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000310:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000314:	08004a0c 	.word	0x08004a0c
  ldr r2, =_sbss
 8000318:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 800031c:	2001555c 	.word	0x2001555c

08000320 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000320:	e7fe      	b.n	8000320 <ADC_IRQHandler>

08000322 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000322:	b480      	push	{r7}
 8000324:	b087      	sub	sp, #28
 8000326:	af00      	add	r7, sp, #0
 8000328:	6078      	str	r0, [r7, #4]
 800032a:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800032c:	2300      	movs	r3, #0
 800032e:	617b      	str	r3, [r7, #20]
 8000330:	2300      	movs	r3, #0
 8000332:	613b      	str	r3, [r7, #16]
 8000334:	2300      	movs	r3, #0
 8000336:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000338:	2300      	movs	r3, #0
 800033a:	617b      	str	r3, [r7, #20]
 800033c:	e076      	b.n	800042c <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800033e:	2201      	movs	r2, #1
 8000340:	697b      	ldr	r3, [r7, #20]
 8000342:	fa02 f303 	lsl.w	r3, r2, r3
 8000346:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	693a      	ldr	r2, [r7, #16]
 800034e:	4013      	ands	r3, r2
 8000350:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000352:	68fa      	ldr	r2, [r7, #12]
 8000354:	693b      	ldr	r3, [r7, #16]
 8000356:	429a      	cmp	r2, r3
 8000358:	d165      	bne.n	8000426 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681a      	ldr	r2, [r3, #0]
 800035e:	697b      	ldr	r3, [r7, #20]
 8000360:	005b      	lsls	r3, r3, #1
 8000362:	2103      	movs	r1, #3
 8000364:	fa01 f303 	lsl.w	r3, r1, r3
 8000368:	43db      	mvns	r3, r3
 800036a:	401a      	ands	r2, r3
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681a      	ldr	r2, [r3, #0]
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	791b      	ldrb	r3, [r3, #4]
 8000378:	4619      	mov	r1, r3
 800037a:	697b      	ldr	r3, [r7, #20]
 800037c:	005b      	lsls	r3, r3, #1
 800037e:	fa01 f303 	lsl.w	r3, r1, r3
 8000382:	431a      	orrs	r2, r3
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000388:	683b      	ldr	r3, [r7, #0]
 800038a:	791b      	ldrb	r3, [r3, #4]
 800038c:	2b01      	cmp	r3, #1
 800038e:	d003      	beq.n	8000398 <GPIO_Init+0x76>
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	791b      	ldrb	r3, [r3, #4]
 8000394:	2b02      	cmp	r3, #2
 8000396:	d12e      	bne.n	80003f6 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	689a      	ldr	r2, [r3, #8]
 800039c:	697b      	ldr	r3, [r7, #20]
 800039e:	005b      	lsls	r3, r3, #1
 80003a0:	2103      	movs	r1, #3
 80003a2:	fa01 f303 	lsl.w	r3, r1, r3
 80003a6:	43db      	mvns	r3, r3
 80003a8:	401a      	ands	r2, r3
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	689a      	ldr	r2, [r3, #8]
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	795b      	ldrb	r3, [r3, #5]
 80003b6:	4619      	mov	r1, r3
 80003b8:	697b      	ldr	r3, [r7, #20]
 80003ba:	005b      	lsls	r3, r3, #1
 80003bc:	fa01 f303 	lsl.w	r3, r1, r3
 80003c0:	431a      	orrs	r2, r3
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	685a      	ldr	r2, [r3, #4]
 80003ca:	697b      	ldr	r3, [r7, #20]
 80003cc:	b29b      	uxth	r3, r3
 80003ce:	4619      	mov	r1, r3
 80003d0:	2301      	movs	r3, #1
 80003d2:	408b      	lsls	r3, r1
 80003d4:	43db      	mvns	r3, r3
 80003d6:	401a      	ands	r2, r3
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	683a      	ldr	r2, [r7, #0]
 80003e2:	7992      	ldrb	r2, [r2, #6]
 80003e4:	4611      	mov	r1, r2
 80003e6:	697a      	ldr	r2, [r7, #20]
 80003e8:	b292      	uxth	r2, r2
 80003ea:	fa01 f202 	lsl.w	r2, r1, r2
 80003ee:	b292      	uxth	r2, r2
 80003f0:	431a      	orrs	r2, r3
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	68da      	ldr	r2, [r3, #12]
 80003fa:	697b      	ldr	r3, [r7, #20]
 80003fc:	b29b      	uxth	r3, r3
 80003fe:	005b      	lsls	r3, r3, #1
 8000400:	2103      	movs	r1, #3
 8000402:	fa01 f303 	lsl.w	r3, r1, r3
 8000406:	43db      	mvns	r3, r3
 8000408:	401a      	ands	r2, r3
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	68da      	ldr	r2, [r3, #12]
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	79db      	ldrb	r3, [r3, #7]
 8000416:	4619      	mov	r1, r3
 8000418:	697b      	ldr	r3, [r7, #20]
 800041a:	005b      	lsls	r3, r3, #1
 800041c:	fa01 f303 	lsl.w	r3, r1, r3
 8000420:	431a      	orrs	r2, r3
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000426:	697b      	ldr	r3, [r7, #20]
 8000428:	3301      	adds	r3, #1
 800042a:	617b      	str	r3, [r7, #20]
 800042c:	697b      	ldr	r3, [r7, #20]
 800042e:	2b0f      	cmp	r3, #15
 8000430:	d985      	bls.n	800033e <GPIO_Init+0x1c>
    }
  }
}
 8000432:	bf00      	nop
 8000434:	371c      	adds	r7, #28
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr

0800043e <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800043e:	b480      	push	{r7}
 8000440:	b085      	sub	sp, #20
 8000442:	af00      	add	r7, sp, #0
 8000444:	6078      	str	r0, [r7, #4]
 8000446:	460b      	mov	r3, r1
 8000448:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800044a:	2300      	movs	r3, #0
 800044c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	691a      	ldr	r2, [r3, #16]
 8000452:	887b      	ldrh	r3, [r7, #2]
 8000454:	4013      	ands	r3, r2
 8000456:	2b00      	cmp	r3, #0
 8000458:	d002      	beq.n	8000460 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 800045a:	2301      	movs	r3, #1
 800045c:	73fb      	strb	r3, [r7, #15]
 800045e:	e001      	b.n	8000464 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000460:	2300      	movs	r3, #0
 8000462:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000464:	7bfb      	ldrb	r3, [r7, #15]
}
 8000466:	4618      	mov	r0, r3
 8000468:	3714      	adds	r7, #20
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr

08000472 <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000472:	b480      	push	{r7}
 8000474:	b083      	sub	sp, #12
 8000476:	af00      	add	r7, sp, #0
 8000478:	6078      	str	r0, [r7, #4]
 800047a:	460b      	mov	r3, r1
 800047c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	695a      	ldr	r2, [r3, #20]
 8000482:	887b      	ldrh	r3, [r7, #2]
 8000484:	405a      	eors	r2, r3
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	615a      	str	r2, [r3, #20]
}
 800048a:	bf00      	nop
 800048c:	370c      	adds	r7, #12
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr

08000496 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000496:	b480      	push	{r7}
 8000498:	b085      	sub	sp, #20
 800049a:	af00      	add	r7, sp, #0
 800049c:	6078      	str	r0, [r7, #4]
 800049e:	460b      	mov	r3, r1
 80004a0:	807b      	strh	r3, [r7, #2]
 80004a2:	4613      	mov	r3, r2
 80004a4:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80004a6:	2300      	movs	r3, #0
 80004a8:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80004aa:	2300      	movs	r3, #0
 80004ac:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80004ae:	787a      	ldrb	r2, [r7, #1]
 80004b0:	887b      	ldrh	r3, [r7, #2]
 80004b2:	f003 0307 	and.w	r3, r3, #7
 80004b6:	009b      	lsls	r3, r3, #2
 80004b8:	fa02 f303 	lsl.w	r3, r2, r3
 80004bc:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80004be:	887b      	ldrh	r3, [r7, #2]
 80004c0:	08db      	lsrs	r3, r3, #3
 80004c2:	b29b      	uxth	r3, r3
 80004c4:	461a      	mov	r2, r3
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	3208      	adds	r2, #8
 80004ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004ce:	887b      	ldrh	r3, [r7, #2]
 80004d0:	f003 0307 	and.w	r3, r3, #7
 80004d4:	009b      	lsls	r3, r3, #2
 80004d6:	210f      	movs	r1, #15
 80004d8:	fa01 f303 	lsl.w	r3, r1, r3
 80004dc:	43db      	mvns	r3, r3
 80004de:	8879      	ldrh	r1, [r7, #2]
 80004e0:	08c9      	lsrs	r1, r1, #3
 80004e2:	b289      	uxth	r1, r1
 80004e4:	4608      	mov	r0, r1
 80004e6:	ea02 0103 	and.w	r1, r2, r3
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	f100 0208 	add.w	r2, r0, #8
 80004f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80004f4:	887b      	ldrh	r3, [r7, #2]
 80004f6:	08db      	lsrs	r3, r3, #3
 80004f8:	b29b      	uxth	r3, r3
 80004fa:	461a      	mov	r2, r3
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	3208      	adds	r2, #8
 8000500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000504:	68fa      	ldr	r2, [r7, #12]
 8000506:	4313      	orrs	r3, r2
 8000508:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800050a:	887b      	ldrh	r3, [r7, #2]
 800050c:	08db      	lsrs	r3, r3, #3
 800050e:	b29b      	uxth	r3, r3
 8000510:	461a      	mov	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	3208      	adds	r2, #8
 8000516:	68b9      	ldr	r1, [r7, #8]
 8000518:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800051c:	bf00      	nop
 800051e:	3714      	adds	r7, #20
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr

08000528 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800052c:	4b16      	ldr	r3, [pc, #88]	; (8000588 <RCC_DeInit+0x60>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a15      	ldr	r2, [pc, #84]	; (8000588 <RCC_DeInit+0x60>)
 8000532:	f043 0301 	orr.w	r3, r3, #1
 8000536:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000538:	4b13      	ldr	r3, [pc, #76]	; (8000588 <RCC_DeInit+0x60>)
 800053a:	2200      	movs	r2, #0
 800053c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800053e:	4b12      	ldr	r3, [pc, #72]	; (8000588 <RCC_DeInit+0x60>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a11      	ldr	r2, [pc, #68]	; (8000588 <RCC_DeInit+0x60>)
 8000544:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000548:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800054c:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800054e:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <RCC_DeInit+0x60>)
 8000550:	4a0e      	ldr	r2, [pc, #56]	; (800058c <RCC_DeInit+0x64>)
 8000552:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8000554:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <RCC_DeInit+0x60>)
 8000556:	4a0e      	ldr	r2, [pc, #56]	; (8000590 <RCC_DeInit+0x68>)
 8000558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800055c:	4b0a      	ldr	r3, [pc, #40]	; (8000588 <RCC_DeInit+0x60>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a09      	ldr	r2, [pc, #36]	; (8000588 <RCC_DeInit+0x60>)
 8000562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000566:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000568:	4b07      	ldr	r3, [pc, #28]	; (8000588 <RCC_DeInit+0x60>)
 800056a:	2200      	movs	r2, #0
 800056c:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
 800056e:	4b06      	ldr	r3, [pc, #24]	; (8000588 <RCC_DeInit+0x60>)
 8000570:	2200      	movs	r2, #0
 8000572:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
 8000576:	4b04      	ldr	r3, [pc, #16]	; (8000588 <RCC_DeInit+0x60>)
 8000578:	2200      	movs	r2, #0
 800057a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif /* STM32F410xx || STM32F413_423xx */  
}
 800057e:	bf00      	nop
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	40023800 	.word	0x40023800
 800058c:	24003010 	.word	0x24003010
 8000590:	20003000 	.word	0x20003000

08000594 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000594:	b480      	push	{r7}
 8000596:	b08b      	sub	sp, #44	; 0x2c
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800059c:	2300      	movs	r3, #0
 800059e:	623b      	str	r3, [r7, #32]
 80005a0:	2300      	movs	r3, #0
 80005a2:	61fb      	str	r3, [r7, #28]
 80005a4:	2300      	movs	r3, #0
 80005a6:	627b      	str	r3, [r7, #36]	; 0x24
 80005a8:	2302      	movs	r3, #2
 80005aa:	61bb      	str	r3, [r7, #24]
 80005ac:	2300      	movs	r3, #0
 80005ae:	617b      	str	r3, [r7, #20]
 80005b0:	2302      	movs	r3, #2
 80005b2:	613b      	str	r3, [r7, #16]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	60fb      	str	r3, [r7, #12]
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80005b8:	4b6f      	ldr	r3, [pc, #444]	; (8000778 <RCC_GetClocksFreq+0x1e4>)
 80005ba:	689b      	ldr	r3, [r3, #8]
 80005bc:	f003 030c 	and.w	r3, r3, #12
 80005c0:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 80005c2:	6a3b      	ldr	r3, [r7, #32]
 80005c4:	2b0c      	cmp	r3, #12
 80005c6:	f200 8091 	bhi.w	80006ec <RCC_GetClocksFreq+0x158>
 80005ca:	a201      	add	r2, pc, #4	; (adr r2, 80005d0 <RCC_GetClocksFreq+0x3c>)
 80005cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005d0:	08000605 	.word	0x08000605
 80005d4:	080006ed 	.word	0x080006ed
 80005d8:	080006ed 	.word	0x080006ed
 80005dc:	080006ed 	.word	0x080006ed
 80005e0:	0800060d 	.word	0x0800060d
 80005e4:	080006ed 	.word	0x080006ed
 80005e8:	080006ed 	.word	0x080006ed
 80005ec:	080006ed 	.word	0x080006ed
 80005f0:	08000615 	.word	0x08000615
 80005f4:	080006ed 	.word	0x080006ed
 80005f8:	080006ed 	.word	0x080006ed
 80005fc:	080006ed 	.word	0x080006ed
 8000600:	08000681 	.word	0x08000681
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	4a5d      	ldr	r2, [pc, #372]	; (800077c <RCC_GetClocksFreq+0x1e8>)
 8000608:	601a      	str	r2, [r3, #0]
    break;
 800060a:	e073      	b.n	80006f4 <RCC_GetClocksFreq+0x160>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	4a5c      	ldr	r2, [pc, #368]	; (8000780 <RCC_GetClocksFreq+0x1ec>)
 8000610:	601a      	str	r2, [r3, #0]
    break;
 8000612:	e06f      	b.n	80006f4 <RCC_GetClocksFreq+0x160>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000614:	4b58      	ldr	r3, [pc, #352]	; (8000778 <RCC_GetClocksFreq+0x1e4>)
 8000616:	685b      	ldr	r3, [r3, #4]
 8000618:	0d9b      	lsrs	r3, r3, #22
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	617b      	str	r3, [r7, #20]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000620:	4b55      	ldr	r3, [pc, #340]	; (8000778 <RCC_GetClocksFreq+0x1e4>)
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000628:	613b      	str	r3, [r7, #16]
    
    if (pllsource != 0)
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d00c      	beq.n	800064a <RCC_GetClocksFreq+0xb6>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000630:	4a53      	ldr	r2, [pc, #332]	; (8000780 <RCC_GetClocksFreq+0x1ec>)
 8000632:	693b      	ldr	r3, [r7, #16]
 8000634:	fbb2 f3f3 	udiv	r3, r2, r3
 8000638:	4a4f      	ldr	r2, [pc, #316]	; (8000778 <RCC_GetClocksFreq+0x1e4>)
 800063a:	6852      	ldr	r2, [r2, #4]
 800063c:	0992      	lsrs	r2, r2, #6
 800063e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000642:	fb02 f303 	mul.w	r3, r2, r3
 8000646:	627b      	str	r3, [r7, #36]	; 0x24
 8000648:	e00b      	b.n	8000662 <RCC_GetClocksFreq+0xce>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800064a:	4a4c      	ldr	r2, [pc, #304]	; (800077c <RCC_GetClocksFreq+0x1e8>)
 800064c:	693b      	ldr	r3, [r7, #16]
 800064e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000652:	4a49      	ldr	r2, [pc, #292]	; (8000778 <RCC_GetClocksFreq+0x1e4>)
 8000654:	6852      	ldr	r2, [r2, #4]
 8000656:	0992      	lsrs	r2, r2, #6
 8000658:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800065c:	fb02 f303 	mul.w	r3, r2, r3
 8000660:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000662:	4b45      	ldr	r3, [pc, #276]	; (8000778 <RCC_GetClocksFreq+0x1e4>)
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	0c1b      	lsrs	r3, r3, #16
 8000668:	f003 0303 	and.w	r3, r3, #3
 800066c:	3301      	adds	r3, #1
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	61bb      	str	r3, [r7, #24]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000674:	69bb      	ldr	r3, [r7, #24]
 8000676:	fbb2 f2f3 	udiv	r2, r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	601a      	str	r2, [r3, #0]
    break;
 800067e:	e039      	b.n	80006f4 <RCC_GetClocksFreq+0x160>
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
  case 0x0C:  /* PLL R used as system clock  source */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000680:	4b3d      	ldr	r3, [pc, #244]	; (8000778 <RCC_GetClocksFreq+0x1e4>)
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	0d9b      	lsrs	r3, r3, #22
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	617b      	str	r3, [r7, #20]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800068c:	4b3a      	ldr	r3, [pc, #232]	; (8000778 <RCC_GetClocksFreq+0x1e4>)
 800068e:	685b      	ldr	r3, [r3, #4]
 8000690:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000694:	613b      	str	r3, [r7, #16]
    
    if (pllsource != 0)
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d00c      	beq.n	80006b6 <RCC_GetClocksFreq+0x122>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800069c:	4a38      	ldr	r2, [pc, #224]	; (8000780 <RCC_GetClocksFreq+0x1ec>)
 800069e:	693b      	ldr	r3, [r7, #16]
 80006a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80006a4:	4a34      	ldr	r2, [pc, #208]	; (8000778 <RCC_GetClocksFreq+0x1e4>)
 80006a6:	6852      	ldr	r2, [r2, #4]
 80006a8:	0992      	lsrs	r2, r2, #6
 80006aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80006ae:	fb02 f303 	mul.w	r3, r2, r3
 80006b2:	627b      	str	r3, [r7, #36]	; 0x24
 80006b4:	e00b      	b.n	80006ce <RCC_GetClocksFreq+0x13a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80006b6:	4a31      	ldr	r2, [pc, #196]	; (800077c <RCC_GetClocksFreq+0x1e8>)
 80006b8:	693b      	ldr	r3, [r7, #16]
 80006ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80006be:	4a2e      	ldr	r2, [pc, #184]	; (8000778 <RCC_GetClocksFreq+0x1e4>)
 80006c0:	6852      	ldr	r2, [r2, #4]
 80006c2:	0992      	lsrs	r2, r2, #6
 80006c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80006c8:	fb02 f303 	mul.w	r3, r2, r3
 80006cc:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
 80006ce:	4b2a      	ldr	r3, [pc, #168]	; (8000778 <RCC_GetClocksFreq+0x1e4>)
 80006d0:	685b      	ldr	r3, [r3, #4]
 80006d2:	0f1b      	lsrs	r3, r3, #28
 80006d4:	f003 0307 	and.w	r3, r3, #7
 80006d8:	3301      	adds	r3, #1
 80006da:	005b      	lsls	r3, r3, #1
 80006dc:	60fb      	str	r3, [r7, #12]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
 80006de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	601a      	str	r2, [r3, #0]
    break;
 80006ea:	e003      	b.n	80006f4 <RCC_GetClocksFreq+0x160>
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4a23      	ldr	r2, [pc, #140]	; (800077c <RCC_GetClocksFreq+0x1e8>)
 80006f0:	601a      	str	r2, [r3, #0]
    break;
 80006f2:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80006f4:	4b20      	ldr	r3, [pc, #128]	; (8000778 <RCC_GetClocksFreq+0x1e4>)
 80006f6:	689b      	ldr	r3, [r3, #8]
 80006f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80006fc:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80006fe:	6a3b      	ldr	r3, [r7, #32]
 8000700:	091b      	lsrs	r3, r3, #4
 8000702:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000704:	4a1f      	ldr	r2, [pc, #124]	; (8000784 <RCC_GetClocksFreq+0x1f0>)
 8000706:	6a3b      	ldr	r3, [r7, #32]
 8000708:	4413      	add	r3, r2
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	b2db      	uxtb	r3, r3
 800070e:	61fb      	str	r3, [r7, #28]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	69fb      	ldr	r3, [r7, #28]
 8000716:	40da      	lsrs	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800071c:	4b16      	ldr	r3, [pc, #88]	; (8000778 <RCC_GetClocksFreq+0x1e4>)
 800071e:	689b      	ldr	r3, [r3, #8]
 8000720:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000724:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 10;
 8000726:	6a3b      	ldr	r3, [r7, #32]
 8000728:	0a9b      	lsrs	r3, r3, #10
 800072a:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 800072c:	4a15      	ldr	r2, [pc, #84]	; (8000784 <RCC_GetClocksFreq+0x1f0>)
 800072e:	6a3b      	ldr	r3, [r7, #32]
 8000730:	4413      	add	r3, r2
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	b2db      	uxtb	r3, r3
 8000736:	61fb      	str	r3, [r7, #28]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	685a      	ldr	r2, [r3, #4]
 800073c:	69fb      	ldr	r3, [r7, #28]
 800073e:	40da      	lsrs	r2, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <RCC_GetClocksFreq+0x1e4>)
 8000746:	689b      	ldr	r3, [r3, #8]
 8000748:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800074c:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 13;
 800074e:	6a3b      	ldr	r3, [r7, #32]
 8000750:	0b5b      	lsrs	r3, r3, #13
 8000752:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000754:	4a0b      	ldr	r2, [pc, #44]	; (8000784 <RCC_GetClocksFreq+0x1f0>)
 8000756:	6a3b      	ldr	r3, [r7, #32]
 8000758:	4413      	add	r3, r2
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	b2db      	uxtb	r3, r3
 800075e:	61fb      	str	r3, [r7, #28]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	685a      	ldr	r2, [r3, #4]
 8000764:	69fb      	ldr	r3, [r7, #28]
 8000766:	40da      	lsrs	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	60da      	str	r2, [r3, #12]
}
 800076c:	bf00      	nop
 800076e:	372c      	adds	r7, #44	; 0x2c
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	40023800 	.word	0x40023800
 800077c:	00f42400 	.word	0x00f42400
 8000780:	007a1200 	.word	0x007a1200
 8000784:	20000000 	.word	0x20000000

08000788 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	460b      	mov	r3, r1
 8000792:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000794:	78fb      	ldrb	r3, [r7, #3]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d006      	beq.n	80007a8 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800079a:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <RCC_AHB1PeriphClockCmd+0x3c>)
 800079c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800079e:	4909      	ldr	r1, [pc, #36]	; (80007c4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4313      	orrs	r3, r2
 80007a4:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80007a6:	e006      	b.n	80007b6 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80007aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	43db      	mvns	r3, r3
 80007b0:	4904      	ldr	r1, [pc, #16]	; (80007c4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80007b2:	4013      	ands	r3, r2
 80007b4:	630b      	str	r3, [r1, #48]	; 0x30
}
 80007b6:	bf00      	nop
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800

080007c8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	460b      	mov	r3, r1
 80007d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007d4:	78fb      	ldrb	r3, [r7, #3]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d006      	beq.n	80007e8 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80007da:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <RCC_APB1PeriphClockCmd+0x3c>)
 80007dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007de:	4909      	ldr	r1, [pc, #36]	; (8000804 <RCC_APB1PeriphClockCmd+0x3c>)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4313      	orrs	r3, r2
 80007e4:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80007e6:	e006      	b.n	80007f6 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <RCC_APB1PeriphClockCmd+0x3c>)
 80007ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	43db      	mvns	r3, r3
 80007f0:	4904      	ldr	r1, [pc, #16]	; (8000804 <RCC_APB1PeriphClockCmd+0x3c>)
 80007f2:	4013      	ands	r3, r2
 80007f4:	640b      	str	r3, [r1, #64]	; 0x40
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800

08000808 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000814:	78fb      	ldrb	r3, [r7, #3]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d006      	beq.n	8000828 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800081a:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <RCC_APB2PeriphClockCmd+0x3c>)
 800081c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800081e:	4909      	ldr	r1, [pc, #36]	; (8000844 <RCC_APB2PeriphClockCmd+0x3c>)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4313      	orrs	r3, r2
 8000824:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000826:	e006      	b.n	8000836 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <RCC_APB2PeriphClockCmd+0x3c>)
 800082a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	43db      	mvns	r3, r3
 8000830:	4904      	ldr	r1, [pc, #16]	; (8000844 <RCC_APB2PeriphClockCmd+0x3c>)
 8000832:	4013      	ands	r3, r2
 8000834:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800

08000848 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
 8000856:	2300      	movs	r3, #0
 8000858:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800085e:	2300      	movs	r3, #0
 8000860:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	8a1b      	ldrh	r3, [r3, #16]
 8000866:	b29b      	uxth	r3, r3
 8000868:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800086a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800086c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000870:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	88db      	ldrh	r3, [r3, #6]
 8000876:	461a      	mov	r2, r3
 8000878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087a:	4313      	orrs	r3, r2
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800087e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000880:	b29a      	uxth	r2, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	899b      	ldrh	r3, [r3, #12]
 800088a:	b29b      	uxth	r3, r3
 800088c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800088e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000890:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000894:	f023 030c 	bic.w	r3, r3, #12
 8000898:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	889a      	ldrh	r2, [r3, #4]
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	891b      	ldrh	r3, [r3, #8]
 80008a2:	4313      	orrs	r3, r2
 80008a4:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80008aa:	4313      	orrs	r3, r2
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	461a      	mov	r2, r3
 80008b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b2:	4313      	orrs	r3, r2
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80008b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	8a9b      	ldrh	r3, [r3, #20]
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80008c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	899b      	ldrh	r3, [r3, #12]
 80008d2:	461a      	mov	r2, r3
 80008d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d6:	4313      	orrs	r3, r2
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80008da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008dc:	b29a      	uxth	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80008e2:	f107 0308 	add.w	r3, r7, #8
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff fe54 	bl	8000594 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4a30      	ldr	r2, [pc, #192]	; (80009b0 <USART_Init+0x168>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d003      	beq.n	80008fc <USART_Init+0xb4>
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	4a2f      	ldr	r2, [pc, #188]	; (80009b4 <USART_Init+0x16c>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d102      	bne.n	8000902 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	623b      	str	r3, [r7, #32]
 8000900:	e001      	b.n	8000906 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000902:	693b      	ldr	r3, [r7, #16]
 8000904:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	899b      	ldrh	r3, [r3, #12]
 800090a:	b29b      	uxth	r3, r3
 800090c:	b21b      	sxth	r3, r3
 800090e:	2b00      	cmp	r3, #0
 8000910:	da0c      	bge.n	800092c <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000912:	6a3a      	ldr	r2, [r7, #32]
 8000914:	4613      	mov	r3, r2
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	4413      	add	r3, r2
 800091a:	009a      	lsls	r2, r3, #2
 800091c:	441a      	add	r2, r3
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	fbb2 f3f3 	udiv	r3, r2, r3
 8000928:	61fb      	str	r3, [r7, #28]
 800092a:	e00b      	b.n	8000944 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800092c:	6a3a      	ldr	r2, [r7, #32]
 800092e:	4613      	mov	r3, r2
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	4413      	add	r3, r2
 8000934:	009a      	lsls	r2, r3, #2
 8000936:	441a      	add	r2, r3
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000942:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	4a1c      	ldr	r2, [pc, #112]	; (80009b8 <USART_Init+0x170>)
 8000948:	fba2 2303 	umull	r2, r3, r2, r3
 800094c:	095b      	lsrs	r3, r3, #5
 800094e:	011b      	lsls	r3, r3, #4
 8000950:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000954:	091b      	lsrs	r3, r3, #4
 8000956:	2264      	movs	r2, #100	; 0x64
 8000958:	fb02 f303 	mul.w	r3, r2, r3
 800095c:	69fa      	ldr	r2, [r7, #28]
 800095e:	1ad3      	subs	r3, r2, r3
 8000960:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	899b      	ldrh	r3, [r3, #12]
 8000966:	b29b      	uxth	r3, r3
 8000968:	b21b      	sxth	r3, r3
 800096a:	2b00      	cmp	r3, #0
 800096c:	da0c      	bge.n	8000988 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800096e:	69bb      	ldr	r3, [r7, #24]
 8000970:	00db      	lsls	r3, r3, #3
 8000972:	3332      	adds	r3, #50	; 0x32
 8000974:	4a10      	ldr	r2, [pc, #64]	; (80009b8 <USART_Init+0x170>)
 8000976:	fba2 2303 	umull	r2, r3, r2, r3
 800097a:	095b      	lsrs	r3, r3, #5
 800097c:	f003 0307 	and.w	r3, r3, #7
 8000980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000982:	4313      	orrs	r3, r2
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
 8000986:	e00b      	b.n	80009a0 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000988:	69bb      	ldr	r3, [r7, #24]
 800098a:	011b      	lsls	r3, r3, #4
 800098c:	3332      	adds	r3, #50	; 0x32
 800098e:	4a0a      	ldr	r2, [pc, #40]	; (80009b8 <USART_Init+0x170>)
 8000990:	fba2 2303 	umull	r2, r3, r2, r3
 8000994:	095b      	lsrs	r3, r3, #5
 8000996:	f003 030f 	and.w	r3, r3, #15
 800099a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800099c:	4313      	orrs	r3, r2
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80009a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a2:	b29a      	uxth	r2, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	811a      	strh	r2, [r3, #8]
}
 80009a8:	bf00      	nop
 80009aa:	3728      	adds	r7, #40	; 0x28
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40011000 	.word	0x40011000
 80009b4:	40011400 	.word	0x40011400
 80009b8:	51eb851f 	.word	0x51eb851f

080009bc <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	460b      	mov	r3, r1
 80009c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80009c8:	78fb      	ldrb	r3, [r7, #3]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d008      	beq.n	80009e0 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	899b      	ldrh	r3, [r3, #12]
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009d8:	b29a      	uxth	r2, r3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 80009de:	e007      	b.n	80009f0 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	899b      	ldrh	r3, [r3, #12]
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	819a      	strh	r2, [r3, #12]
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	460b      	mov	r3, r1
 8000a06:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000a08:	887b      	ldrh	r3, [r7, #2]
 8000a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	809a      	strh	r2, [r3, #4]
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	460b      	mov	r3, r1
 8000a2a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	887b      	ldrh	r3, [r7, #2]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d002      	beq.n	8000a46 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000a40:	2301      	movs	r3, #1
 8000a42:	73fb      	strb	r3, [r7, #15]
 8000a44:	e001      	b.n	8000a4a <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000a46:	2300      	movs	r3, #0
 8000a48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3714      	adds	r7, #20
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f103 0208 	add.w	r2, r3, #8
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	f103 0208 	add.w	r2, r3, #8
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f103 0208 	add.w	r2, r3, #8
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	b085      	sub	sp, #20
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
 8000aba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	68fa      	ldr	r2, [r7, #12]
 8000ac6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	689a      	ldr	r2, [r3, #8]
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	683a      	ldr	r2, [r7, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	683a      	ldr	r2, [r7, #0]
 8000adc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	1c5a      	adds	r2, r3, #1
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	601a      	str	r2, [r3, #0]
}
 8000aee:	bf00      	nop
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000afa:	b480      	push	{r7}
 8000afc:	b085      	sub	sp, #20
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b10:	d103      	bne.n	8000b1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	691b      	ldr	r3, [r3, #16]
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	e00c      	b.n	8000b34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	3308      	adds	r3, #8
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	e002      	b.n	8000b28 <vListInsert+0x2e>
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d2f6      	bcs.n	8000b22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	685a      	ldr	r2, [r3, #4]
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	683a      	ldr	r2, [r7, #0]
 8000b42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	683a      	ldr	r2, [r7, #0]
 8000b4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	1c5a      	adds	r2, r3, #1
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	601a      	str	r2, [r3, #0]
}
 8000b60:	bf00      	nop
 8000b62:	3714      	adds	r7, #20
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	691b      	ldr	r3, [r3, #16]
 8000b78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	6892      	ldr	r2, [r2, #8]
 8000b82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	687a      	ldr	r2, [r7, #4]
 8000b8a:	6852      	ldr	r2, [r2, #4]
 8000b8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d103      	bne.n	8000ba0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	689a      	ldr	r2, [r3, #8]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	1e5a      	subs	r2, r3, #1
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	681b      	ldr	r3, [r3, #0]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08c      	sub	sp, #48	; 0x30
 8000bc4:	af04      	add	r7, sp, #16
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000bd0:	88fb      	ldrh	r3, [r7, #6]
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f001 f83b 	bl	8001c50 <pvPortMalloc>
 8000bda:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d00e      	beq.n	8000c00 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000be2:	2058      	movs	r0, #88	; 0x58
 8000be4:	f001 f834 	bl	8001c50 <pvPortMalloc>
 8000be8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d003      	beq.n	8000bf8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	697a      	ldr	r2, [r7, #20]
 8000bf4:	631a      	str	r2, [r3, #48]	; 0x30
 8000bf6:	e005      	b.n	8000c04 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8000bf8:	6978      	ldr	r0, [r7, #20]
 8000bfa:	f001 f8eb 	bl	8001dd4 <vPortFree>
 8000bfe:	e001      	b.n	8000c04 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d013      	beq.n	8000c32 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000c0a:	88fa      	ldrh	r2, [r7, #6]
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	9303      	str	r3, [sp, #12]
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	9302      	str	r3, [sp, #8]
 8000c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c16:	9301      	str	r3, [sp, #4]
 8000c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c1a:	9300      	str	r3, [sp, #0]
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	68b9      	ldr	r1, [r7, #8]
 8000c20:	68f8      	ldr	r0, [r7, #12]
 8000c22:	f000 f80e 	bl	8000c42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000c26:	69f8      	ldr	r0, [r7, #28]
 8000c28:	f000 f89e 	bl	8000d68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	61bb      	str	r3, [r7, #24]
 8000c30:	e002      	b.n	8000c38 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c36:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8000c38:	69bb      	ldr	r3, [r7, #24]
	}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3720      	adds	r7, #32
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b088      	sub	sp, #32
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	60f8      	str	r0, [r7, #12]
 8000c4a:	60b9      	str	r1, [r7, #8]
 8000c4c:	607a      	str	r2, [r7, #4]
 8000c4e:	603b      	str	r3, [r7, #0]
			xRunPrivileged = pdFALSE;
		}
		uxPriority &= ~portPRIVILEGE_BIT;
	#endif /* portUSING_MPU_WRAPPERS == 1 */

	configASSERT( pcName );
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d109      	bne.n	8000c6a <prvInitialiseNewTask+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c5a:	f383 8811 	msr	BASEPRI, r3
 8000c5e:	f3bf 8f6f 	isb	sy
 8000c62:	f3bf 8f4f 	dsb	sy
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	e7fe      	b.n	8000c68 <prvInitialiseNewTask+0x26>

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c6c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	461a      	mov	r2, r3
 8000c74:	21a5      	movs	r1, #165	; 0xa5
 8000c76:	f003 f9eb 	bl	8004050 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000c84:	3b01      	subs	r3, #1
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	4413      	add	r3, r2
 8000c8a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	f023 0307 	bic.w	r3, r3, #7
 8000c92:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d009      	beq.n	8000cb2 <prvInitialiseNewTask+0x70>
 8000c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ca2:	f383 8811 	msr	BASEPRI, r3
 8000ca6:	f3bf 8f6f 	isb	sy
 8000caa:	f3bf 8f4f 	dsb	sy
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	e7fe      	b.n	8000cb0 <prvInitialiseNewTask+0x6e>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
 8000cb6:	e012      	b.n	8000cde <prvInitialiseNewTask+0x9c>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000cb8:	68ba      	ldr	r2, [r7, #8]
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	7819      	ldrb	r1, [r3, #0]
 8000cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	3334      	adds	r3, #52	; 0x34
 8000cc8:	460a      	mov	r2, r1
 8000cca:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == ( char ) 0x00 )
 8000ccc:	68ba      	ldr	r2, [r7, #8]
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d006      	beq.n	8000ce6 <prvInitialiseNewTask+0xa4>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	61fb      	str	r3, [r7, #28]
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	2b09      	cmp	r3, #9
 8000ce2:	d9e9      	bls.n	8000cb8 <prvInitialiseNewTask+0x76>
 8000ce4:	e000      	b.n	8000ce8 <prvInitialiseNewTask+0xa6>
		{
			break;
 8000ce6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cea:	2200      	movs	r2, #0
 8000cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cf2:	2b04      	cmp	r3, #4
 8000cf4:	d901      	bls.n	8000cfa <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000cfe:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8000d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d04:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8000d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d08:	2200      	movs	r2, #0
 8000d0a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d0e:	3304      	adds	r3, #4
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff fec1 	bl	8000a98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d18:	3318      	adds	r3, #24
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff febc 	bl	8000a98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d24:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d28:	f1c3 0205 	rsb	r2, r3, #5
 8000d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d2e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d34:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8000d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d38:	2200      	movs	r2, #0
 8000d3a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000d44:	683a      	ldr	r2, [r7, #0]
 8000d46:	68f9      	ldr	r1, [r7, #12]
 8000d48:	69b8      	ldr	r0, [r7, #24]
 8000d4a:	f000 fd37 	bl	80017bc <pxPortInitialiseStack>
 8000d4e:	4602      	mov	r2, r0
 8000d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d52:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8000d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d002      	beq.n	8000d60 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d5e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000d60:	bf00      	nop
 8000d62:	3720      	adds	r7, #32
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8000d68:	b5b0      	push	{r4, r5, r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af02      	add	r7, sp, #8
 8000d6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8000d70:	f000 fe4c 	bl	8001a0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8000d74:	4b3b      	ldr	r3, [pc, #236]	; (8000e64 <prvAddNewTaskToReadyList+0xfc>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	4a3a      	ldr	r2, [pc, #232]	; (8000e64 <prvAddNewTaskToReadyList+0xfc>)
 8000d7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8000d7e:	4b3a      	ldr	r3, [pc, #232]	; (8000e68 <prvAddNewTaskToReadyList+0x100>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d109      	bne.n	8000d9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8000d86:	4a38      	ldr	r2, [pc, #224]	; (8000e68 <prvAddNewTaskToReadyList+0x100>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000d8c:	4b35      	ldr	r3, [pc, #212]	; (8000e64 <prvAddNewTaskToReadyList+0xfc>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d110      	bne.n	8000db6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8000d94:	f000 fad6 	bl	8001344 <prvInitialiseTaskLists>
 8000d98:	e00d      	b.n	8000db6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8000d9a:	4b34      	ldr	r3, [pc, #208]	; (8000e6c <prvAddNewTaskToReadyList+0x104>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d109      	bne.n	8000db6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000da2:	4b31      	ldr	r3, [pc, #196]	; (8000e68 <prvAddNewTaskToReadyList+0x100>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d802      	bhi.n	8000db6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8000db0:	4a2d      	ldr	r2, [pc, #180]	; (8000e68 <prvAddNewTaskToReadyList+0x100>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8000db6:	4b2e      	ldr	r3, [pc, #184]	; (8000e70 <prvAddNewTaskToReadyList+0x108>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	4a2c      	ldr	r2, [pc, #176]	; (8000e70 <prvAddNewTaskToReadyList+0x108>)
 8000dbe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000dc0:	4b2b      	ldr	r3, [pc, #172]	; (8000e70 <prvAddNewTaskToReadyList+0x108>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d016      	beq.n	8000dfc <prvAddNewTaskToReadyList+0x94>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f002 fb6b 	bl	80034ac <SEGGER_SYSVIEW_OnTaskCreate>
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	461d      	mov	r5, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	461c      	mov	r4, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	1ae3      	subs	r3, r4, r3
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	462b      	mov	r3, r5
 8000df8:	f001 f9a8 	bl	800214c <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f002 fbdc 	bl	80035bc <SEGGER_SYSVIEW_OnTaskStartReady>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e08:	2201      	movs	r2, #1
 8000e0a:	409a      	lsls	r2, r3
 8000e0c:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <prvAddNewTaskToReadyList+0x10c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	4a18      	ldr	r2, [pc, #96]	; (8000e74 <prvAddNewTaskToReadyList+0x10c>)
 8000e14:	6013      	str	r3, [r2, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	4413      	add	r3, r2
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	4a15      	ldr	r2, [pc, #84]	; (8000e78 <prvAddNewTaskToReadyList+0x110>)
 8000e24:	441a      	add	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	3304      	adds	r3, #4
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	f7ff fe40 	bl	8000ab2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8000e32:	f000 fe19 	bl	8001a68 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8000e36:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <prvAddNewTaskToReadyList+0x104>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d00e      	beq.n	8000e5c <prvAddNewTaskToReadyList+0xf4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <prvAddNewTaskToReadyList+0x100>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d207      	bcs.n	8000e5c <prvAddNewTaskToReadyList+0xf4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8000e4c:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <prvAddNewTaskToReadyList+0x114>)
 8000e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	f3bf 8f4f 	dsb	sy
 8000e58:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bdb0      	pop	{r4, r5, r7, pc}
 8000e64:	20000180 	.word	0x20000180
 8000e68:	200000a8 	.word	0x200000a8
 8000e6c:	2000018c 	.word	0x2000018c
 8000e70:	2000019c 	.word	0x2000019c
 8000e74:	20000188 	.word	0x20000188
 8000e78:	200000ac 	.word	0x200000ac
 8000e7c:	e000ed04 	.word	0xe000ed04

08000e80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8000e86:	4b22      	ldr	r3, [pc, #136]	; (8000f10 <vTaskStartScheduler+0x90>)
 8000e88:	9301      	str	r3, [sp, #4]
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	9300      	str	r3, [sp, #0]
 8000e8e:	2300      	movs	r3, #0
 8000e90:	2282      	movs	r2, #130	; 0x82
 8000e92:	4920      	ldr	r1, [pc, #128]	; (8000f14 <vTaskStartScheduler+0x94>)
 8000e94:	4820      	ldr	r0, [pc, #128]	; (8000f18 <vTaskStartScheduler+0x98>)
 8000e96:	f7ff fe93 	bl	8000bc0 <xTaskCreate>
 8000e9a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d123      	bne.n	8000eea <vTaskStartScheduler+0x6a>
 8000ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ea6:	f383 8811 	msr	BASEPRI, r3
 8000eaa:	f3bf 8f6f 	isb	sy
 8000eae:	f3bf 8f4f 	dsb	sy
 8000eb2:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8000eb4:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <vTaskStartScheduler+0x9c>)
 8000eb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000eba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8000ebc:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <vTaskStartScheduler+0xa0>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000ec2:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <vTaskStartScheduler+0xa4>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8000ec8:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <vTaskStartScheduler+0xa8>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <vTaskStartScheduler+0x90>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d102      	bne.n	8000eda <vTaskStartScheduler+0x5a>
 8000ed4:	f002 face 	bl	8003474 <SEGGER_SYSVIEW_OnIdle>
 8000ed8:	e004      	b.n	8000ee4 <vTaskStartScheduler+0x64>
 8000eda:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <vTaskStartScheduler+0xa8>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f002 fb28 	bl	8003534 <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8000ee4:	f000 fcf4 	bl	80018d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8000ee8:	e00d      	b.n	8000f06 <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ef0:	d109      	bne.n	8000f06 <vTaskStartScheduler+0x86>
 8000ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ef6:	f383 8811 	msr	BASEPRI, r3
 8000efa:	f3bf 8f6f 	isb	sy
 8000efe:	f3bf 8f4f 	dsb	sy
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	e7fe      	b.n	8000f04 <vTaskStartScheduler+0x84>
}
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200001a4 	.word	0x200001a4
 8000f14:	08004870 	.word	0x08004870
 8000f18:	08001315 	.word	0x08001315
 8000f1c:	200001a0 	.word	0x200001a0
 8000f20:	2000018c 	.word	0x2000018c
 8000f24:	20000184 	.word	0x20000184
 8000f28:	200000a8 	.word	0x200000a8

08000f2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8000f30:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <vTaskSuspendAll+0x18>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	3301      	adds	r3, #1
 8000f36:	4a03      	ldr	r2, [pc, #12]	; (8000f44 <vTaskSuspendAll+0x18>)
 8000f38:	6013      	str	r3, [r2, #0]
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	200001a8 	.word	0x200001a8

08000f48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8000f56:	4b43      	ldr	r3, [pc, #268]	; (8001064 <xTaskResumeAll+0x11c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d109      	bne.n	8000f72 <xTaskResumeAll+0x2a>
 8000f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f62:	f383 8811 	msr	BASEPRI, r3
 8000f66:	f3bf 8f6f 	isb	sy
 8000f6a:	f3bf 8f4f 	dsb	sy
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	e7fe      	b.n	8000f70 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8000f72:	f000 fd4b 	bl	8001a0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8000f76:	4b3b      	ldr	r3, [pc, #236]	; (8001064 <xTaskResumeAll+0x11c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	4a39      	ldr	r2, [pc, #228]	; (8001064 <xTaskResumeAll+0x11c>)
 8000f7e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000f80:	4b38      	ldr	r3, [pc, #224]	; (8001064 <xTaskResumeAll+0x11c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d165      	bne.n	8001054 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000f88:	4b37      	ldr	r3, [pc, #220]	; (8001068 <xTaskResumeAll+0x120>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d061      	beq.n	8001054 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000f90:	e032      	b.n	8000ff8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000f92:	4b36      	ldr	r3, [pc, #216]	; (800106c <xTaskResumeAll+0x124>)
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	3318      	adds	r3, #24
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff fde4 	bl	8000b6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	3304      	adds	r3, #4
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fddf 	bl	8000b6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f002 fb03 	bl	80035bc <SEGGER_SYSVIEW_OnTaskStartReady>
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fba:	2201      	movs	r2, #1
 8000fbc:	409a      	lsls	r2, r3
 8000fbe:	4b2c      	ldr	r3, [pc, #176]	; (8001070 <xTaskResumeAll+0x128>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	4a2a      	ldr	r2, [pc, #168]	; (8001070 <xTaskResumeAll+0x128>)
 8000fc6:	6013      	str	r3, [r2, #0]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fcc:	4613      	mov	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4413      	add	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	4a27      	ldr	r2, [pc, #156]	; (8001074 <xTaskResumeAll+0x12c>)
 8000fd6:	441a      	add	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	3304      	adds	r3, #4
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4610      	mov	r0, r2
 8000fe0:	f7ff fd67 	bl	8000ab2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fe8:	4b23      	ldr	r3, [pc, #140]	; (8001078 <xTaskResumeAll+0x130>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d302      	bcc.n	8000ff8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8000ff2:	4b22      	ldr	r3, [pc, #136]	; (800107c <xTaskResumeAll+0x134>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000ff8:	4b1c      	ldr	r3, [pc, #112]	; (800106c <xTaskResumeAll+0x124>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1c8      	bne.n	8000f92 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001006:	f000 fa19 	bl	800143c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800100a:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <xTaskResumeAll+0x138>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d010      	beq.n	8001038 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001016:	f000 f859 	bl	80010cc <xTaskIncrementTick>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d002      	beq.n	8001026 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8001020:	4b16      	ldr	r3, [pc, #88]	; (800107c <xTaskResumeAll+0x134>)
 8001022:	2201      	movs	r2, #1
 8001024:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3b01      	subs	r3, #1
 800102a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1f1      	bne.n	8001016 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8001032:	4b13      	ldr	r3, [pc, #76]	; (8001080 <xTaskResumeAll+0x138>)
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001038:	4b10      	ldr	r3, [pc, #64]	; (800107c <xTaskResumeAll+0x134>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d009      	beq.n	8001054 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001040:	2301      	movs	r3, #1
 8001042:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <xTaskResumeAll+0x13c>)
 8001046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	f3bf 8f4f 	dsb	sy
 8001050:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001054:	f000 fd08 	bl	8001a68 <vPortExitCritical>

	return xAlreadyYielded;
 8001058:	68bb      	ldr	r3, [r7, #8]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200001a8 	.word	0x200001a8
 8001068:	20000180 	.word	0x20000180
 800106c:	20000140 	.word	0x20000140
 8001070:	20000188 	.word	0x20000188
 8001074:	200000ac 	.word	0x200000ac
 8001078:	200000a8 	.word	0x200000a8
 800107c:	20000194 	.word	0x20000194
 8001080:	20000190 	.word	0x20000190
 8001084:	e000ed04 	.word	0xe000ed04

08001088 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800108e:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <xTaskGetTickCount+0x1c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001094:	687b      	ldr	r3, [r7, #4]
}
 8001096:	4618      	mov	r0, r3
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20000184 	.word	0x20000184

080010a8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80010ae:	f000 fd91 	bl	8001bd4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80010b6:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <xTaskGetTickCountFromISR+0x20>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80010bc:	683b      	ldr	r3, [r7, #0]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000184 	.word	0x20000184

080010cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80010d6:	4b50      	ldr	r3, [pc, #320]	; (8001218 <xTaskIncrementTick+0x14c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f040 808b 	bne.w	80011f6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80010e0:	4b4e      	ldr	r3, [pc, #312]	; (800121c <xTaskIncrementTick+0x150>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	3301      	adds	r3, #1
 80010e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80010e8:	4a4c      	ldr	r2, [pc, #304]	; (800121c <xTaskIncrementTick+0x150>)
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d11f      	bne.n	8001134 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80010f4:	4b4a      	ldr	r3, [pc, #296]	; (8001220 <xTaskIncrementTick+0x154>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d009      	beq.n	8001112 <xTaskIncrementTick+0x46>
 80010fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001102:	f383 8811 	msr	BASEPRI, r3
 8001106:	f3bf 8f6f 	isb	sy
 800110a:	f3bf 8f4f 	dsb	sy
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	e7fe      	b.n	8001110 <xTaskIncrementTick+0x44>
 8001112:	4b43      	ldr	r3, [pc, #268]	; (8001220 <xTaskIncrementTick+0x154>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	4b42      	ldr	r3, [pc, #264]	; (8001224 <xTaskIncrementTick+0x158>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a40      	ldr	r2, [pc, #256]	; (8001220 <xTaskIncrementTick+0x154>)
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	4a40      	ldr	r2, [pc, #256]	; (8001224 <xTaskIncrementTick+0x158>)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	4b40      	ldr	r3, [pc, #256]	; (8001228 <xTaskIncrementTick+0x15c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	3301      	adds	r3, #1
 800112c:	4a3e      	ldr	r2, [pc, #248]	; (8001228 <xTaskIncrementTick+0x15c>)
 800112e:	6013      	str	r3, [r2, #0]
 8001130:	f000 f984 	bl	800143c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001134:	4b3d      	ldr	r3, [pc, #244]	; (800122c <xTaskIncrementTick+0x160>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	429a      	cmp	r2, r3
 800113c:	d34c      	bcc.n	80011d8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800113e:	4b38      	ldr	r3, [pc, #224]	; (8001220 <xTaskIncrementTick+0x154>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d104      	bne.n	8001152 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001148:	4b38      	ldr	r3, [pc, #224]	; (800122c <xTaskIncrementTick+0x160>)
 800114a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800114e:	601a      	str	r2, [r3, #0]
					break;
 8001150:	e042      	b.n	80011d8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001152:	4b33      	ldr	r3, [pc, #204]	; (8001220 <xTaskIncrementTick+0x154>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	429a      	cmp	r2, r3
 8001168:	d203      	bcs.n	8001172 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800116a:	4a30      	ldr	r2, [pc, #192]	; (800122c <xTaskIncrementTick+0x160>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001170:	e032      	b.n	80011d8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	3304      	adds	r3, #4
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fcf8 	bl	8000b6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001180:	2b00      	cmp	r3, #0
 8001182:	d004      	beq.n	800118e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	3318      	adds	r3, #24
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff fcef 	bl	8000b6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	4618      	mov	r0, r3
 8001192:	f002 fa13 	bl	80035bc <SEGGER_SYSVIEW_OnTaskStartReady>
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800119a:	2201      	movs	r2, #1
 800119c:	409a      	lsls	r2, r3
 800119e:	4b24      	ldr	r3, [pc, #144]	; (8001230 <xTaskIncrementTick+0x164>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	4a22      	ldr	r2, [pc, #136]	; (8001230 <xTaskIncrementTick+0x164>)
 80011a6:	6013      	str	r3, [r2, #0]
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011ac:	4613      	mov	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4413      	add	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4a1f      	ldr	r2, [pc, #124]	; (8001234 <xTaskIncrementTick+0x168>)
 80011b6:	441a      	add	r2, r3
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	3304      	adds	r3, #4
 80011bc:	4619      	mov	r1, r3
 80011be:	4610      	mov	r0, r2
 80011c0:	f7ff fc77 	bl	8000ab2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011c8:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <xTaskIncrementTick+0x16c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d3b5      	bcc.n	800113e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80011d2:	2301      	movs	r3, #1
 80011d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80011d6:	e7b2      	b.n	800113e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80011d8:	4b17      	ldr	r3, [pc, #92]	; (8001238 <xTaskIncrementTick+0x16c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011de:	4915      	ldr	r1, [pc, #84]	; (8001234 <xTaskIncrementTick+0x168>)
 80011e0:	4613      	mov	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	440b      	add	r3, r1
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d907      	bls.n	8001200 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80011f0:	2301      	movs	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	e004      	b.n	8001200 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <xTaskIncrementTick+0x170>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	3301      	adds	r3, #1
 80011fc:	4a0f      	ldr	r2, [pc, #60]	; (800123c <xTaskIncrementTick+0x170>)
 80011fe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <xTaskIncrementTick+0x174>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8001208:	2301      	movs	r3, #1
 800120a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800120c:	697b      	ldr	r3, [r7, #20]
}
 800120e:	4618      	mov	r0, r3
 8001210:	3718      	adds	r7, #24
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200001a8 	.word	0x200001a8
 800121c:	20000184 	.word	0x20000184
 8001220:	20000138 	.word	0x20000138
 8001224:	2000013c 	.word	0x2000013c
 8001228:	20000198 	.word	0x20000198
 800122c:	200001a0 	.word	0x200001a0
 8001230:	20000188 	.word	0x20000188
 8001234:	200000ac 	.word	0x200000ac
 8001238:	200000a8 	.word	0x200000a8
 800123c:	20000190 	.word	0x20000190
 8001240:	20000194 	.word	0x20000194

08001244 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800124a:	4b2c      	ldr	r3, [pc, #176]	; (80012fc <vTaskSwitchContext+0xb8>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001252:	4b2b      	ldr	r3, [pc, #172]	; (8001300 <vTaskSwitchContext+0xbc>)
 8001254:	2201      	movs	r2, #1
 8001256:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001258:	e04c      	b.n	80012f4 <vTaskSwitchContext+0xb0>
		xYieldPending = pdFALSE;
 800125a:	4b29      	ldr	r3, [pc, #164]	; (8001300 <vTaskSwitchContext+0xbc>)
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001260:	4b28      	ldr	r3, [pc, #160]	; (8001304 <vTaskSwitchContext+0xc0>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	fab3 f383 	clz	r3, r3
 800126c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800126e:	7afb      	ldrb	r3, [r7, #11]
 8001270:	f1c3 031f 	rsb	r3, r3, #31
 8001274:	617b      	str	r3, [r7, #20]
 8001276:	4924      	ldr	r1, [pc, #144]	; (8001308 <vTaskSwitchContext+0xc4>)
 8001278:	697a      	ldr	r2, [r7, #20]
 800127a:	4613      	mov	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	4413      	add	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	440b      	add	r3, r1
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d109      	bne.n	800129e <vTaskSwitchContext+0x5a>
	__asm volatile
 800128a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800128e:	f383 8811 	msr	BASEPRI, r3
 8001292:	f3bf 8f6f 	isb	sy
 8001296:	f3bf 8f4f 	dsb	sy
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	e7fe      	b.n	800129c <vTaskSwitchContext+0x58>
 800129e:	697a      	ldr	r2, [r7, #20]
 80012a0:	4613      	mov	r3, r2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4a17      	ldr	r2, [pc, #92]	; (8001308 <vTaskSwitchContext+0xc4>)
 80012aa:	4413      	add	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	685a      	ldr	r2, [r3, #4]
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	3308      	adds	r3, #8
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d104      	bne.n	80012ce <vTaskSwitchContext+0x8a>
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	4a0d      	ldr	r2, [pc, #52]	; (800130c <vTaskSwitchContext+0xc8>)
 80012d6:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <vTaskSwitchContext+0xc8>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <vTaskSwitchContext+0xcc>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d102      	bne.n	80012ea <vTaskSwitchContext+0xa6>
 80012e4:	f002 f8c6 	bl	8003474 <SEGGER_SYSVIEW_OnIdle>
}
 80012e8:	e004      	b.n	80012f4 <vTaskSwitchContext+0xb0>
		traceTASK_SWITCHED_IN();
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <vTaskSwitchContext+0xc8>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f002 f920 	bl	8003534 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80012f4:	bf00      	nop
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	200001a8 	.word	0x200001a8
 8001300:	20000194 	.word	0x20000194
 8001304:	20000188 	.word	0x20000188
 8001308:	200000ac 	.word	0x200000ac
 800130c:	200000a8 	.word	0x200000a8
 8001310:	200001a4 	.word	0x200001a4

08001314 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800131c:	f000 f852 	bl	80013c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <prvIdleTask+0x28>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d9f9      	bls.n	800131c <prvIdleTask+0x8>
			{
				taskYIELD();
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <prvIdleTask+0x2c>)
 800132a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	f3bf 8f4f 	dsb	sy
 8001334:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001338:	e7f0      	b.n	800131c <prvIdleTask+0x8>
 800133a:	bf00      	nop
 800133c:	200000ac 	.word	0x200000ac
 8001340:	e000ed04 	.word	0xe000ed04

08001344 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	e00c      	b.n	800136a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	4613      	mov	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4413      	add	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4a12      	ldr	r2, [pc, #72]	; (80013a4 <prvInitialiseTaskLists+0x60>)
 800135c:	4413      	add	r3, r2
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fb7a 	bl	8000a58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3301      	adds	r3, #1
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b04      	cmp	r3, #4
 800136e:	d9ef      	bls.n	8001350 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001370:	480d      	ldr	r0, [pc, #52]	; (80013a8 <prvInitialiseTaskLists+0x64>)
 8001372:	f7ff fb71 	bl	8000a58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001376:	480d      	ldr	r0, [pc, #52]	; (80013ac <prvInitialiseTaskLists+0x68>)
 8001378:	f7ff fb6e 	bl	8000a58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800137c:	480c      	ldr	r0, [pc, #48]	; (80013b0 <prvInitialiseTaskLists+0x6c>)
 800137e:	f7ff fb6b 	bl	8000a58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001382:	480c      	ldr	r0, [pc, #48]	; (80013b4 <prvInitialiseTaskLists+0x70>)
 8001384:	f7ff fb68 	bl	8000a58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001388:	480b      	ldr	r0, [pc, #44]	; (80013b8 <prvInitialiseTaskLists+0x74>)
 800138a:	f7ff fb65 	bl	8000a58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800138e:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <prvInitialiseTaskLists+0x78>)
 8001390:	4a05      	ldr	r2, [pc, #20]	; (80013a8 <prvInitialiseTaskLists+0x64>)
 8001392:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001394:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <prvInitialiseTaskLists+0x7c>)
 8001396:	4a05      	ldr	r2, [pc, #20]	; (80013ac <prvInitialiseTaskLists+0x68>)
 8001398:	601a      	str	r2, [r3, #0]
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	200000ac 	.word	0x200000ac
 80013a8:	20000110 	.word	0x20000110
 80013ac:	20000124 	.word	0x20000124
 80013b0:	20000140 	.word	0x20000140
 80013b4:	20000154 	.word	0x20000154
 80013b8:	2000016c 	.word	0x2000016c
 80013bc:	20000138 	.word	0x20000138
 80013c0:	2000013c 	.word	0x2000013c

080013c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80013ca:	e019      	b.n	8001400 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80013cc:	f000 fb1e 	bl	8001a0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <prvCheckTasksWaitingTermination+0x4c>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3304      	adds	r3, #4
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff fbc5 	bl	8000b6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <prvCheckTasksWaitingTermination+0x50>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <prvCheckTasksWaitingTermination+0x50>)
 80013ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80013ec:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <prvCheckTasksWaitingTermination+0x54>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	3b01      	subs	r3, #1
 80013f2:	4a09      	ldr	r2, [pc, #36]	; (8001418 <prvCheckTasksWaitingTermination+0x54>)
 80013f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80013f6:	f000 fb37 	bl	8001a68 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 f80e 	bl	800141c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <prvCheckTasksWaitingTermination+0x54>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1e1      	bne.n	80013cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000154 	.word	0x20000154
 8001414:	20000180 	.word	0x20000180
 8001418:	20000168 	.word	0x20000168

0800141c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001428:	4618      	mov	r0, r3
 800142a:	f000 fcd3 	bl	8001dd4 <vPortFree>
			vPortFree( pxTCB );
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f000 fcd0 	bl	8001dd4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001442:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <prvResetNextTaskUnblockTime+0x38>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d104      	bne.n	8001456 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800144c:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <prvResetNextTaskUnblockTime+0x3c>)
 800144e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001452:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001454:	e008      	b.n	8001468 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001456:	4b07      	ldr	r3, [pc, #28]	; (8001474 <prvResetNextTaskUnblockTime+0x38>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	4a04      	ldr	r2, [pc, #16]	; (8001478 <prvResetNextTaskUnblockTime+0x3c>)
 8001466:	6013      	str	r3, [r2, #0]
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	20000138 	.word	0x20000138
 8001478:	200001a0 	.word	0x200001a0

0800147c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800147c:	b580      	push	{r7, lr}
 800147e:	b088      	sub	sp, #32
 8001480:	af02      	add	r7, sp, #8
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
 8001488:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800148a:	f000 fabf 	bl	8001a0c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800148e:	4b2b      	ldr	r3, [pc, #172]	; (800153c <xTaskNotifyWait+0xc0>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001496:	b2db      	uxtb	r3, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d01a      	beq.n	80014d2 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800149c:	4b27      	ldr	r3, [pc, #156]	; (800153c <xTaskNotifyWait+0xc0>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	43d2      	mvns	r2, r2
 80014a6:	400a      	ands	r2, r1
 80014a8:	651a      	str	r2, [r3, #80]	; 0x50

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80014aa:	4b24      	ldr	r3, [pc, #144]	; (800153c <xTaskNotifyWait+0xc0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

				if( xTicksToWait > ( TickType_t ) 0 )
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d00b      	beq.n	80014d2 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80014ba:	2101      	movs	r1, #1
 80014bc:	6838      	ldr	r0, [r7, #0]
 80014be:	f000 f905 	bl	80016cc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80014c2:	4b1f      	ldr	r3, [pc, #124]	; (8001540 <xTaskNotifyWait+0xc4>)
 80014c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	f3bf 8f4f 	dsb	sy
 80014ce:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80014d2:	f000 fac9 	bl	8001a68 <vPortExitCritical>

		taskENTER_CRITICAL();
 80014d6:	f000 fa99 	bl	8001a0c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	4613      	mov	r3, r2
 80014e2:	68ba      	ldr	r2, [r7, #8]
 80014e4:	68f9      	ldr	r1, [r7, #12]
 80014e6:	2040      	movs	r0, #64	; 0x40
 80014e8:	f001 fbee 	bl	8002cc8 <SEGGER_SYSVIEW_RecordU32x4>

			if( pulNotificationValue != NULL )
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d004      	beq.n	80014fc <xTaskNotifyWait+0x80>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80014f2:	4b12      	ldr	r3, [pc, #72]	; (800153c <xTaskNotifyWait+0xc0>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80014fc:	4b0f      	ldr	r3, [pc, #60]	; (800153c <xTaskNotifyWait+0xc0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d002      	beq.n	8001510 <xTaskNotifyWait+0x94>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
 800150e:	e008      	b.n	8001522 <xTaskNotifyWait+0xa6>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8001510:	4b0a      	ldr	r3, [pc, #40]	; (800153c <xTaskNotifyWait+0xc0>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	43d2      	mvns	r2, r2
 800151a:	400a      	ands	r2, r1
 800151c:	651a      	str	r2, [r3, #80]	; 0x50
				xReturn = pdTRUE;
 800151e:	2301      	movs	r3, #1
 8001520:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <xTaskNotifyWait+0xc0>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 800152c:	f000 fa9c 	bl	8001a68 <vPortExitCritical>

		return xReturn;
 8001530:	697b      	ldr	r3, [r7, #20]
	}
 8001532:	4618      	mov	r0, r3
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200000a8 	.word	0x200000a8
 8001540:	e000ed04 	.word	0xe000ed04

08001544 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08c      	sub	sp, #48	; 0x30
 8001548:	af02      	add	r7, sp, #8
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	603b      	str	r3, [r7, #0]
 8001550:	4613      	mov	r3, r2
 8001552:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8001554:	2301      	movs	r3, #1
 8001556:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d109      	bne.n	8001572 <xTaskGenericNotify+0x2e>
 800155e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001562:	f383 8811 	msr	BASEPRI, r3
 8001566:	f3bf 8f6f 	isb	sy
 800156a:	f3bf 8f4f 	dsb	sy
 800156e:	61bb      	str	r3, [r7, #24]
 8001570:	e7fe      	b.n	8001570 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8001576:	f000 fa49 	bl	8001a0c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8001580:	6a3b      	ldr	r3, [r7, #32]
 8001582:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8001588:	6a3b      	ldr	r3, [r7, #32]
 800158a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800158e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8001590:	6a3b      	ldr	r3, [r7, #32]
 8001592:	2202      	movs	r2, #2
 8001594:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	2b04      	cmp	r3, #4
 800159c:	d827      	bhi.n	80015ee <xTaskGenericNotify+0xaa>
 800159e:	a201      	add	r2, pc, #4	; (adr r2, 80015a4 <xTaskGenericNotify+0x60>)
 80015a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a4:	0800160d 	.word	0x0800160d
 80015a8:	080015b9 	.word	0x080015b9
 80015ac:	080015c7 	.word	0x080015c7
 80015b0:	080015d3 	.word	0x080015d3
 80015b4:	080015db 	.word	0x080015db
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80015b8:	6a3b      	ldr	r3, [r7, #32]
 80015ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	431a      	orrs	r2, r3
 80015c0:	6a3b      	ldr	r3, [r7, #32]
 80015c2:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 80015c4:	e025      	b.n	8001612 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80015c6:	6a3b      	ldr	r3, [r7, #32]
 80015c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015ca:	1c5a      	adds	r2, r3, #1
 80015cc:	6a3b      	ldr	r3, [r7, #32]
 80015ce:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 80015d0:	e01f      	b.n	8001612 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80015d2:	6a3b      	ldr	r3, [r7, #32]
 80015d4:	68ba      	ldr	r2, [r7, #8]
 80015d6:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 80015d8:	e01b      	b.n	8001612 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80015da:	7ffb      	ldrb	r3, [r7, #31]
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d003      	beq.n	80015e8 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80015e0:	6a3b      	ldr	r3, [r7, #32]
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80015e6:	e014      	b.n	8001612 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80015ec:	e011      	b.n	8001612 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80015ee:	6a3b      	ldr	r3, [r7, #32]
 80015f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015f6:	d00b      	beq.n	8001610 <xTaskGenericNotify+0xcc>
 80015f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015fc:	f383 8811 	msr	BASEPRI, r3
 8001600:	f3bf 8f6f 	isb	sy
 8001604:	f3bf 8f4f 	dsb	sy
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	e7fe      	b.n	800160a <xTaskGenericNotify+0xc6>
					break;
 800160c:	bf00      	nop
 800160e:	e000      	b.n	8001612 <xTaskGenericNotify+0xce>

					break;
 8001610:	bf00      	nop
			}

			traceTASK_NOTIFY();
 8001612:	6a3b      	ldr	r3, [r7, #32]
 8001614:	4618      	mov	r0, r3
 8001616:	f002 f875 	bl	8003704 <SEGGER_SYSVIEW_ShrinkId>
 800161a:	4601      	mov	r1, r0
 800161c:	79fa      	ldrb	r2, [r7, #7]
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	4613      	mov	r3, r2
 8001624:	68ba      	ldr	r2, [r7, #8]
 8001626:	203e      	movs	r0, #62	; 0x3e
 8001628:	f001 fb4e 	bl	8002cc8 <SEGGER_SYSVIEW_RecordU32x4>

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800162c:	7ffb      	ldrb	r3, [r7, #31]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d13c      	bne.n	80016ac <xTaskGenericNotify+0x168>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001632:	6a3b      	ldr	r3, [r7, #32]
 8001634:	3304      	adds	r3, #4
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fa98 	bl	8000b6c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800163c:	6a3b      	ldr	r3, [r7, #32]
 800163e:	4618      	mov	r0, r3
 8001640:	f001 ffbc 	bl	80035bc <SEGGER_SYSVIEW_OnTaskStartReady>
 8001644:	6a3b      	ldr	r3, [r7, #32]
 8001646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001648:	2201      	movs	r2, #1
 800164a:	409a      	lsls	r2, r3
 800164c:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <xTaskGenericNotify+0x178>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4313      	orrs	r3, r2
 8001652:	4a1a      	ldr	r2, [pc, #104]	; (80016bc <xTaskGenericNotify+0x178>)
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	6a3b      	ldr	r3, [r7, #32]
 8001658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4a17      	ldr	r2, [pc, #92]	; (80016c0 <xTaskGenericNotify+0x17c>)
 8001664:	441a      	add	r2, r3
 8001666:	6a3b      	ldr	r3, [r7, #32]
 8001668:	3304      	adds	r3, #4
 800166a:	4619      	mov	r1, r3
 800166c:	4610      	mov	r0, r2
 800166e:	f7ff fa20 	bl	8000ab2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8001672:	6a3b      	ldr	r3, [r7, #32]
 8001674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001676:	2b00      	cmp	r3, #0
 8001678:	d009      	beq.n	800168e <xTaskGenericNotify+0x14a>
 800167a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800167e:	f383 8811 	msr	BASEPRI, r3
 8001682:	f3bf 8f6f 	isb	sy
 8001686:	f3bf 8f4f 	dsb	sy
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	e7fe      	b.n	800168c <xTaskGenericNotify+0x148>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800168e:	6a3b      	ldr	r3, [r7, #32]
 8001690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <xTaskGenericNotify+0x180>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001698:	429a      	cmp	r2, r3
 800169a:	d907      	bls.n	80016ac <xTaskGenericNotify+0x168>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800169c:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <xTaskGenericNotify+0x184>)
 800169e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	f3bf 8f4f 	dsb	sy
 80016a8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80016ac:	f000 f9dc 	bl	8001a68 <vPortExitCritical>

		return xReturn;
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3728      	adds	r7, #40	; 0x28
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000188 	.word	0x20000188
 80016c0:	200000ac 	.word	0x200000ac
 80016c4:	200000a8 	.word	0x200000a8
 80016c8:	e000ed04 	.word	0xe000ed04

080016cc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80016d6:	4b32      	ldr	r3, [pc, #200]	; (80017a0 <prvAddCurrentTaskToDelayedList+0xd4>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80016dc:	4b31      	ldr	r3, [pc, #196]	; (80017a4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	3304      	adds	r3, #4
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fa42 	bl	8000b6c <uxListRemove>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d10b      	bne.n	8001706 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80016ee:	4b2d      	ldr	r3, [pc, #180]	; (80017a4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f4:	2201      	movs	r2, #1
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43da      	mvns	r2, r3
 80016fc:	4b2a      	ldr	r3, [pc, #168]	; (80017a8 <prvAddCurrentTaskToDelayedList+0xdc>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4013      	ands	r3, r2
 8001702:	4a29      	ldr	r2, [pc, #164]	; (80017a8 <prvAddCurrentTaskToDelayedList+0xdc>)
 8001704:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800170c:	d110      	bne.n	8001730 <prvAddCurrentTaskToDelayedList+0x64>
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d00d      	beq.n	8001730 <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8001714:	4b23      	ldr	r3, [pc, #140]	; (80017a4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	211b      	movs	r1, #27
 800171a:	4618      	mov	r0, r3
 800171c:	f001 ff92 	bl	8003644 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001720:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	3304      	adds	r3, #4
 8001726:	4619      	mov	r1, r3
 8001728:	4820      	ldr	r0, [pc, #128]	; (80017ac <prvAddCurrentTaskToDelayedList+0xe0>)
 800172a:	f7ff f9c2 	bl	8000ab2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800172e:	e032      	b.n	8001796 <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001738:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68ba      	ldr	r2, [r7, #8]
 800173e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001740:	68ba      	ldr	r2, [r7, #8]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	429a      	cmp	r2, r3
 8001746:	d20f      	bcs.n	8001768 <prvAddCurrentTaskToDelayedList+0x9c>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8001748:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2104      	movs	r1, #4
 800174e:	4618      	mov	r0, r3
 8001750:	f001 ff78 	bl	8003644 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001754:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	3304      	adds	r3, #4
 800175e:	4619      	mov	r1, r3
 8001760:	4610      	mov	r0, r2
 8001762:	f7ff f9ca 	bl	8000afa <vListInsert>
}
 8001766:	e016      	b.n	8001796 <prvAddCurrentTaskToDelayedList+0xca>
        traceMOVED_TASK_TO_DELAYED_LIST();
 8001768:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2104      	movs	r1, #4
 800176e:	4618      	mov	r0, r3
 8001770:	f001 ff68 	bl	8003644 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001774:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	3304      	adds	r3, #4
 800177e:	4619      	mov	r1, r3
 8001780:	4610      	mov	r0, r2
 8001782:	f7ff f9ba 	bl	8000afa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001786:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <prvAddCurrentTaskToDelayedList+0xec>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	429a      	cmp	r2, r3
 800178e:	d202      	bcs.n	8001796 <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 8001790:	4a09      	ldr	r2, [pc, #36]	; (80017b8 <prvAddCurrentTaskToDelayedList+0xec>)
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	6013      	str	r3, [r2, #0]
}
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000184 	.word	0x20000184
 80017a4:	200000a8 	.word	0x200000a8
 80017a8:	20000188 	.word	0x20000188
 80017ac:	2000016c 	.word	0x2000016c
 80017b0:	2000013c 	.word	0x2000013c
 80017b4:	20000138 	.word	0x20000138
 80017b8:	200001a0 	.word	0x200001a0

080017bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	3b04      	subs	r3, #4
 80017cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	3b04      	subs	r3, #4
 80017da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	f023 0201 	bic.w	r2, r3, #1
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	3b04      	subs	r3, #4
 80017ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80017ec:	4a0c      	ldr	r2, [pc, #48]	; (8001820 <pxPortInitialiseStack+0x64>)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	3b14      	subs	r3, #20
 80017f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	3b04      	subs	r3, #4
 8001802:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f06f 0202 	mvn.w	r2, #2
 800180a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	3b20      	subs	r3, #32
 8001810:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001812:	68fb      	ldr	r3, [r7, #12]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	08001825 	.word	0x08001825

08001824 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800182e:	4b11      	ldr	r3, [pc, #68]	; (8001874 <prvTaskExitError+0x50>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001836:	d009      	beq.n	800184c <prvTaskExitError+0x28>
 8001838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800183c:	f383 8811 	msr	BASEPRI, r3
 8001840:	f3bf 8f6f 	isb	sy
 8001844:	f3bf 8f4f 	dsb	sy
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	e7fe      	b.n	800184a <prvTaskExitError+0x26>
 800184c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001850:	f383 8811 	msr	BASEPRI, r3
 8001854:	f3bf 8f6f 	isb	sy
 8001858:	f3bf 8f4f 	dsb	sy
 800185c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800185e:	bf00      	nop
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0fc      	beq.n	8001860 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001866:	bf00      	nop
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	20000010 	.word	0x20000010
	...

08001880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001880:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <pxCurrentTCBConst2>)
 8001882:	6819      	ldr	r1, [r3, #0]
 8001884:	6808      	ldr	r0, [r1, #0]
 8001886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800188a:	f380 8809 	msr	PSP, r0
 800188e:	f3bf 8f6f 	isb	sy
 8001892:	f04f 0000 	mov.w	r0, #0
 8001896:	f380 8811 	msr	BASEPRI, r0
 800189a:	4770      	bx	lr
 800189c:	f3af 8000 	nop.w

080018a0 <pxCurrentTCBConst2>:
 80018a0:	200000a8 	.word	0x200000a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80018a4:	bf00      	nop
 80018a6:	bf00      	nop

080018a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80018a8:	4808      	ldr	r0, [pc, #32]	; (80018cc <prvPortStartFirstTask+0x24>)
 80018aa:	6800      	ldr	r0, [r0, #0]
 80018ac:	6800      	ldr	r0, [r0, #0]
 80018ae:	f380 8808 	msr	MSP, r0
 80018b2:	f04f 0000 	mov.w	r0, #0
 80018b6:	f380 8814 	msr	CONTROL, r0
 80018ba:	b662      	cpsie	i
 80018bc:	b661      	cpsie	f
 80018be:	f3bf 8f4f 	dsb	sy
 80018c2:	f3bf 8f6f 	isb	sy
 80018c6:	df00      	svc	0
 80018c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80018ca:	bf00      	nop
 80018cc:	e000ed08 	.word	0xe000ed08

080018d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80018d6:	4b44      	ldr	r3, [pc, #272]	; (80019e8 <xPortStartScheduler+0x118>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a44      	ldr	r2, [pc, #272]	; (80019ec <xPortStartScheduler+0x11c>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d109      	bne.n	80018f4 <xPortStartScheduler+0x24>
 80018e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018e4:	f383 8811 	msr	BASEPRI, r3
 80018e8:	f3bf 8f6f 	isb	sy
 80018ec:	f3bf 8f4f 	dsb	sy
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	e7fe      	b.n	80018f2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80018f4:	4b3c      	ldr	r3, [pc, #240]	; (80019e8 <xPortStartScheduler+0x118>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a3d      	ldr	r2, [pc, #244]	; (80019f0 <xPortStartScheduler+0x120>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d109      	bne.n	8001912 <xPortStartScheduler+0x42>
 80018fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001902:	f383 8811 	msr	BASEPRI, r3
 8001906:	f3bf 8f6f 	isb	sy
 800190a:	f3bf 8f4f 	dsb	sy
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	e7fe      	b.n	8001910 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001912:	4b38      	ldr	r3, [pc, #224]	; (80019f4 <xPortStartScheduler+0x124>)
 8001914:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	b2db      	uxtb	r3, r3
 800191c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	22ff      	movs	r2, #255	; 0xff
 8001922:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	b2db      	uxtb	r3, r3
 800192a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800192c:	78fb      	ldrb	r3, [r7, #3]
 800192e:	b2db      	uxtb	r3, r3
 8001930:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4b30      	ldr	r3, [pc, #192]	; (80019f8 <xPortStartScheduler+0x128>)
 8001938:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800193a:	4b30      	ldr	r3, [pc, #192]	; (80019fc <xPortStartScheduler+0x12c>)
 800193c:	2207      	movs	r2, #7
 800193e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001940:	e009      	b.n	8001956 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8001942:	4b2e      	ldr	r3, [pc, #184]	; (80019fc <xPortStartScheduler+0x12c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	3b01      	subs	r3, #1
 8001948:	4a2c      	ldr	r2, [pc, #176]	; (80019fc <xPortStartScheduler+0x12c>)
 800194a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800194c:	78fb      	ldrb	r3, [r7, #3]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	b2db      	uxtb	r3, r3
 8001954:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001956:	78fb      	ldrb	r3, [r7, #3]
 8001958:	b2db      	uxtb	r3, r3
 800195a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800195e:	2b80      	cmp	r3, #128	; 0x80
 8001960:	d0ef      	beq.n	8001942 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001962:	4b26      	ldr	r3, [pc, #152]	; (80019fc <xPortStartScheduler+0x12c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f1c3 0307 	rsb	r3, r3, #7
 800196a:	2b04      	cmp	r3, #4
 800196c:	d009      	beq.n	8001982 <xPortStartScheduler+0xb2>
 800196e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001972:	f383 8811 	msr	BASEPRI, r3
 8001976:	f3bf 8f6f 	isb	sy
 800197a:	f3bf 8f4f 	dsb	sy
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	e7fe      	b.n	8001980 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001982:	4b1e      	ldr	r3, [pc, #120]	; (80019fc <xPortStartScheduler+0x12c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	021b      	lsls	r3, r3, #8
 8001988:	4a1c      	ldr	r2, [pc, #112]	; (80019fc <xPortStartScheduler+0x12c>)
 800198a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800198c:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <xPortStartScheduler+0x12c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001994:	4a19      	ldr	r2, [pc, #100]	; (80019fc <xPortStartScheduler+0x12c>)
 8001996:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	b2da      	uxtb	r2, r3
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80019a0:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <xPortStartScheduler+0x130>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a16      	ldr	r2, [pc, #88]	; (8001a00 <xPortStartScheduler+0x130>)
 80019a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80019ac:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <xPortStartScheduler+0x130>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a13      	ldr	r2, [pc, #76]	; (8001a00 <xPortStartScheduler+0x130>)
 80019b2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80019b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80019b8:	f000 f8de 	bl	8001b78 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80019bc:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <xPortStartScheduler+0x134>)
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80019c2:	f000 f8fd 	bl	8001bc0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <xPortStartScheduler+0x138>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a0f      	ldr	r2, [pc, #60]	; (8001a08 <xPortStartScheduler+0x138>)
 80019cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80019d0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80019d2:	f7ff ff69 	bl	80018a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80019d6:	f7ff fc35 	bl	8001244 <vTaskSwitchContext>
	prvTaskExitError();
 80019da:	f7ff ff23 	bl	8001824 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	e000ed00 	.word	0xe000ed00
 80019ec:	410fc271 	.word	0x410fc271
 80019f0:	410fc270 	.word	0x410fc270
 80019f4:	e000e400 	.word	0xe000e400
 80019f8:	200001ac 	.word	0x200001ac
 80019fc:	200001b0 	.word	0x200001b0
 8001a00:	e000ed20 	.word	0xe000ed20
 8001a04:	20000010 	.word	0x20000010
 8001a08:	e000ef34 	.word	0xe000ef34

08001a0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a16:	f383 8811 	msr	BASEPRI, r3
 8001a1a:	f3bf 8f6f 	isb	sy
 8001a1e:	f3bf 8f4f 	dsb	sy
 8001a22:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001a24:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <vPortEnterCritical+0x54>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	4a0d      	ldr	r2, [pc, #52]	; (8001a60 <vPortEnterCritical+0x54>)
 8001a2c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <vPortEnterCritical+0x54>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d10e      	bne.n	8001a54 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001a36:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <vPortEnterCritical+0x58>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d009      	beq.n	8001a54 <vPortEnterCritical+0x48>
 8001a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a44:	f383 8811 	msr	BASEPRI, r3
 8001a48:	f3bf 8f6f 	isb	sy
 8001a4c:	f3bf 8f4f 	dsb	sy
 8001a50:	603b      	str	r3, [r7, #0]
 8001a52:	e7fe      	b.n	8001a52 <vPortEnterCritical+0x46>
	}
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	20000010 	.word	0x20000010
 8001a64:	e000ed04 	.word	0xe000ed04

08001a68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8001a6e:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <vPortExitCritical+0x4c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d109      	bne.n	8001a8a <vPortExitCritical+0x22>
 8001a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a7a:	f383 8811 	msr	BASEPRI, r3
 8001a7e:	f3bf 8f6f 	isb	sy
 8001a82:	f3bf 8f4f 	dsb	sy
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	e7fe      	b.n	8001a88 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <vPortExitCritical+0x4c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	4a08      	ldr	r2, [pc, #32]	; (8001ab4 <vPortExitCritical+0x4c>)
 8001a92:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001a94:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <vPortExitCritical+0x4c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d104      	bne.n	8001aa6 <vPortExitCritical+0x3e>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	20000010 	.word	0x20000010
	...

08001ac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001ac0:	f3ef 8009 	mrs	r0, PSP
 8001ac4:	f3bf 8f6f 	isb	sy
 8001ac8:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <pxCurrentTCBConst>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	f01e 0f10 	tst.w	lr, #16
 8001ad0:	bf08      	it	eq
 8001ad2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001ad6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ada:	6010      	str	r0, [r2, #0]
 8001adc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001ae0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001ae4:	f380 8811 	msr	BASEPRI, r0
 8001ae8:	f3bf 8f4f 	dsb	sy
 8001aec:	f3bf 8f6f 	isb	sy
 8001af0:	f7ff fba8 	bl	8001244 <vTaskSwitchContext>
 8001af4:	f04f 0000 	mov.w	r0, #0
 8001af8:	f380 8811 	msr	BASEPRI, r0
 8001afc:	bc09      	pop	{r0, r3}
 8001afe:	6819      	ldr	r1, [r3, #0]
 8001b00:	6808      	ldr	r0, [r1, #0]
 8001b02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b06:	f01e 0f10 	tst.w	lr, #16
 8001b0a:	bf08      	it	eq
 8001b0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001b10:	f380 8809 	msr	PSP, r0
 8001b14:	f3bf 8f6f 	isb	sy
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	f3af 8000 	nop.w

08001b20 <pxCurrentTCBConst>:
 8001b20:	200000a8 	.word	0x200000a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001b24:	bf00      	nop
 8001b26:	bf00      	nop

08001b28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
	__asm volatile
 8001b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b32:	f383 8811 	msr	BASEPRI, r3
 8001b36:	f3bf 8f6f 	isb	sy
 8001b3a:	f3bf 8f4f 	dsb	sy
 8001b3e:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8001b40:	f001 fc1e 	bl	8003380 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001b44:	f7ff fac2 	bl	80010cc <xTaskIncrementTick>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d006      	beq.n	8001b5c <SysTick_Handler+0x34>
		{
			traceISR_EXIT_TO_SCHEDULER();
 8001b4e:	f001 fc75 	bl	800343c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001b52:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <SysTick_Handler+0x4c>)
 8001b54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	e001      	b.n	8001b60 <SysTick_Handler+0x38>
		}
		else
		{
			traceISR_EXIT();
 8001b5c:	f001 fc52 	bl	8003404 <SEGGER_SYSVIEW_RecordExitISR>
 8001b60:	2300      	movs	r3, #0
 8001b62:	603b      	str	r3, [r7, #0]
	__asm volatile
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	e000ed04 	.word	0xe000ed04

08001b78 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <vPortSetupTimerInterrupt+0x34>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001b82:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <vPortSetupTimerInterrupt+0x38>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001b88:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <vPortSetupTimerInterrupt+0x3c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <vPortSetupTimerInterrupt+0x40>)
 8001b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b92:	099b      	lsrs	r3, r3, #6
 8001b94:	4a09      	ldr	r2, [pc, #36]	; (8001bbc <vPortSetupTimerInterrupt+0x44>)
 8001b96:	3b01      	subs	r3, #1
 8001b98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001b9a:	4b04      	ldr	r3, [pc, #16]	; (8001bac <vPortSetupTimerInterrupt+0x34>)
 8001b9c:	2207      	movs	r2, #7
 8001b9e:	601a      	str	r2, [r3, #0]
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	e000e010 	.word	0xe000e010
 8001bb0:	e000e018 	.word	0xe000e018
 8001bb4:	20000014 	.word	0x20000014
 8001bb8:	10624dd3 	.word	0x10624dd3
 8001bbc:	e000e014 	.word	0xe000e014

08001bc0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001bc0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001bd0 <vPortEnableVFP+0x10>
 8001bc4:	6801      	ldr	r1, [r0, #0]
 8001bc6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001bca:	6001      	str	r1, [r0, #0]
 8001bcc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8001bce:	bf00      	nop
 8001bd0:	e000ed88 	.word	0xe000ed88

08001bd4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8001bda:	f3ef 8305 	mrs	r3, IPSR
 8001bde:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2b0f      	cmp	r3, #15
 8001be4:	d913      	bls.n	8001c0e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001be6:	4a16      	ldr	r2, [pc, #88]	; (8001c40 <vPortValidateInterruptPriority+0x6c>)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4413      	add	r3, r2
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001bf0:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <vPortValidateInterruptPriority+0x70>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	7afa      	ldrb	r2, [r7, #11]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d209      	bcs.n	8001c0e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8001bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bfe:	f383 8811 	msr	BASEPRI, r3
 8001c02:	f3bf 8f6f 	isb	sy
 8001c06:	f3bf 8f4f 	dsb	sy
 8001c0a:	607b      	str	r3, [r7, #4]
 8001c0c:	e7fe      	b.n	8001c0c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001c0e:	4b0e      	ldr	r3, [pc, #56]	; (8001c48 <vPortValidateInterruptPriority+0x74>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c16:	4b0d      	ldr	r3, [pc, #52]	; (8001c4c <vPortValidateInterruptPriority+0x78>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d909      	bls.n	8001c32 <vPortValidateInterruptPriority+0x5e>
 8001c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c22:	f383 8811 	msr	BASEPRI, r3
 8001c26:	f3bf 8f6f 	isb	sy
 8001c2a:	f3bf 8f4f 	dsb	sy
 8001c2e:	603b      	str	r3, [r7, #0]
 8001c30:	e7fe      	b.n	8001c30 <vPortValidateInterruptPriority+0x5c>
	}
 8001c32:	bf00      	nop
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	e000e3f0 	.word	0xe000e3f0
 8001c44:	200001ac 	.word	0x200001ac
 8001c48:	e000ed0c 	.word	0xe000ed0c
 8001c4c:	200001b0 	.word	0x200001b0

08001c50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08a      	sub	sp, #40	; 0x28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001c5c:	f7ff f966 	bl	8000f2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001c60:	4b57      	ldr	r3, [pc, #348]	; (8001dc0 <pvPortMalloc+0x170>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8001c68:	f000 f90c 	bl	8001e84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001c6c:	4b55      	ldr	r3, [pc, #340]	; (8001dc4 <pvPortMalloc+0x174>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4013      	ands	r3, r2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f040 808c 	bne.w	8001d92 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d01c      	beq.n	8001cba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8001c80:	2208      	movs	r2, #8
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d013      	beq.n	8001cba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f023 0307 	bic.w	r3, r3, #7
 8001c98:	3308      	adds	r3, #8
 8001c9a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d009      	beq.n	8001cba <pvPortMalloc+0x6a>
 8001ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001caa:	f383 8811 	msr	BASEPRI, r3
 8001cae:	f3bf 8f6f 	isb	sy
 8001cb2:	f3bf 8f4f 	dsb	sy
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	e7fe      	b.n	8001cb8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d068      	beq.n	8001d92 <pvPortMalloc+0x142>
 8001cc0:	4b41      	ldr	r3, [pc, #260]	; (8001dc8 <pvPortMalloc+0x178>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d863      	bhi.n	8001d92 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001cca:	4b40      	ldr	r3, [pc, #256]	; (8001dcc <pvPortMalloc+0x17c>)
 8001ccc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001cce:	4b3f      	ldr	r3, [pc, #252]	; (8001dcc <pvPortMalloc+0x17c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001cd4:	e004      	b.n	8001ce0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d903      	bls.n	8001cf2 <pvPortMalloc+0xa2>
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1f1      	bne.n	8001cd6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001cf2:	4b33      	ldr	r3, [pc, #204]	; (8001dc0 <pvPortMalloc+0x170>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d04a      	beq.n	8001d92 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001cfc:	6a3b      	ldr	r3, [r7, #32]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2208      	movs	r2, #8
 8001d02:	4413      	add	r3, r2
 8001d04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	6a3b      	ldr	r3, [r7, #32]
 8001d0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	1ad2      	subs	r2, r2, r3
 8001d16:	2308      	movs	r3, #8
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d91e      	bls.n	8001d5c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4413      	add	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d009      	beq.n	8001d44 <pvPortMalloc+0xf4>
 8001d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d34:	f383 8811 	msr	BASEPRI, r3
 8001d38:	f3bf 8f6f 	isb	sy
 8001d3c:	f3bf 8f4f 	dsb	sy
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	e7fe      	b.n	8001d42 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	1ad2      	subs	r2, r2, r3
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001d56:	69b8      	ldr	r0, [r7, #24]
 8001d58:	f000 f8f6 	bl	8001f48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001d5c:	4b1a      	ldr	r3, [pc, #104]	; (8001dc8 <pvPortMalloc+0x178>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	4a18      	ldr	r2, [pc, #96]	; (8001dc8 <pvPortMalloc+0x178>)
 8001d68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001d6a:	4b17      	ldr	r3, [pc, #92]	; (8001dc8 <pvPortMalloc+0x178>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <pvPortMalloc+0x180>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d203      	bcs.n	8001d7e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001d76:	4b14      	ldr	r3, [pc, #80]	; (8001dc8 <pvPortMalloc+0x178>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a15      	ldr	r2, [pc, #84]	; (8001dd0 <pvPortMalloc+0x180>)
 8001d7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <pvPortMalloc+0x174>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	431a      	orrs	r2, r3
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001d92:	f7ff f8d9 	bl	8000f48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d009      	beq.n	8001db4 <pvPortMalloc+0x164>
 8001da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001da4:	f383 8811 	msr	BASEPRI, r3
 8001da8:	f3bf 8f6f 	isb	sy
 8001dac:	f3bf 8f4f 	dsb	sy
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	e7fe      	b.n	8001db2 <pvPortMalloc+0x162>
	return pvReturn;
 8001db4:	69fb      	ldr	r3, [r7, #28]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3728      	adds	r7, #40	; 0x28
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20012dbc 	.word	0x20012dbc
 8001dc4:	20012dc8 	.word	0x20012dc8
 8001dc8:	20012dc0 	.word	0x20012dc0
 8001dcc:	20012db4 	.word	0x20012db4
 8001dd0:	20012dc4 	.word	0x20012dc4

08001dd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d046      	beq.n	8001e74 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001de6:	2308      	movs	r3, #8
 8001de8:	425b      	negs	r3, r3
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	4413      	add	r3, r2
 8001dee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	4b20      	ldr	r3, [pc, #128]	; (8001e7c <vPortFree+0xa8>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d109      	bne.n	8001e16 <vPortFree+0x42>
 8001e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e06:	f383 8811 	msr	BASEPRI, r3
 8001e0a:	f3bf 8f6f 	isb	sy
 8001e0e:	f3bf 8f4f 	dsb	sy
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	e7fe      	b.n	8001e14 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d009      	beq.n	8001e32 <vPortFree+0x5e>
 8001e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e22:	f383 8811 	msr	BASEPRI, r3
 8001e26:	f3bf 8f6f 	isb	sy
 8001e2a:	f3bf 8f4f 	dsb	sy
 8001e2e:	60bb      	str	r3, [r7, #8]
 8001e30:	e7fe      	b.n	8001e30 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <vPortFree+0xa8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d019      	beq.n	8001e74 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d115      	bne.n	8001e74 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <vPortFree+0xa8>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	401a      	ands	r2, r3
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001e58:	f7ff f868 	bl	8000f2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <vPortFree+0xac>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4413      	add	r3, r2
 8001e66:	4a06      	ldr	r2, [pc, #24]	; (8001e80 <vPortFree+0xac>)
 8001e68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001e6a:	6938      	ldr	r0, [r7, #16]
 8001e6c:	f000 f86c 	bl	8001f48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001e70:	f7ff f86a 	bl	8000f48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001e74:	bf00      	nop
 8001e76:	3718      	adds	r7, #24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20012dc8 	.word	0x20012dc8
 8001e80:	20012dc0 	.word	0x20012dc0

08001e84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001e8a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001e8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001e90:	4b27      	ldr	r3, [pc, #156]	; (8001f30 <prvHeapInit+0xac>)
 8001e92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00c      	beq.n	8001eb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	3307      	adds	r3, #7
 8001ea2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f023 0307 	bic.w	r3, r3, #7
 8001eaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001eac:	68ba      	ldr	r2, [r7, #8]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	4a1f      	ldr	r2, [pc, #124]	; (8001f30 <prvHeapInit+0xac>)
 8001eb4:	4413      	add	r3, r2
 8001eb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001ebc:	4a1d      	ldr	r2, [pc, #116]	; (8001f34 <prvHeapInit+0xb0>)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001ec2:	4b1c      	ldr	r3, [pc, #112]	; (8001f34 <prvHeapInit+0xb0>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	4413      	add	r3, r2
 8001ece:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001ed0:	2208      	movs	r2, #8
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	1a9b      	subs	r3, r3, r2
 8001ed6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f023 0307 	bic.w	r3, r3, #7
 8001ede:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4a15      	ldr	r2, [pc, #84]	; (8001f38 <prvHeapInit+0xb4>)
 8001ee4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001ee6:	4b14      	ldr	r3, [pc, #80]	; (8001f38 <prvHeapInit+0xb4>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2200      	movs	r2, #0
 8001eec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001eee:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <prvHeapInit+0xb4>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	1ad2      	subs	r2, r2, r3
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001f04:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <prvHeapInit+0xb4>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	4a0a      	ldr	r2, [pc, #40]	; (8001f3c <prvHeapInit+0xb8>)
 8001f12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	4a09      	ldr	r2, [pc, #36]	; (8001f40 <prvHeapInit+0xbc>)
 8001f1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001f1c:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <prvHeapInit+0xc0>)
 8001f1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001f22:	601a      	str	r2, [r3, #0]
}
 8001f24:	bf00      	nop
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	200001b4 	.word	0x200001b4
 8001f34:	20012db4 	.word	0x20012db4
 8001f38:	20012dbc 	.word	0x20012dbc
 8001f3c:	20012dc4 	.word	0x20012dc4
 8001f40:	20012dc0 	.word	0x20012dc0
 8001f44:	20012dc8 	.word	0x20012dc8

08001f48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001f50:	4b28      	ldr	r3, [pc, #160]	; (8001ff4 <prvInsertBlockIntoFreeList+0xac>)
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	e002      	b.n	8001f5c <prvInsertBlockIntoFreeList+0x14>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d8f7      	bhi.n	8001f56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	4413      	add	r3, r2
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d108      	bne.n	8001f8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	441a      	add	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	441a      	add	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d118      	bne.n	8001fd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <prvInsertBlockIntoFreeList+0xb0>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d00d      	beq.n	8001fc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	441a      	add	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	e008      	b.n	8001fd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001fc6:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <prvInsertBlockIntoFreeList+0xb0>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	e003      	b.n	8001fd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d002      	beq.n	8001fe6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001fe6:	bf00      	nop
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	20012db4 	.word	0x20012db4
 8001ff8:	20012dbc 	.word	0x20012dbc

08001ffc <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8002000:	4803      	ldr	r0, [pc, #12]	; (8002010 <_cbSendSystemDesc+0x14>)
 8002002:	f001 f969 	bl	80032d8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8002006:	4803      	ldr	r0, [pc, #12]	; (8002014 <_cbSendSystemDesc+0x18>)
 8002008:	f001 f966 	bl	80032d8 <SEGGER_SYSVIEW_SendSysDesc>
}
 800200c:	bf00      	nop
 800200e:	bd80      	pop	{r7, pc}
 8002010:	08004878 	.word	0x08004878
 8002014:	080048b4 	.word	0x080048b4

08002018 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800201c:	4b06      	ldr	r3, [pc, #24]	; (8002038 <SEGGER_SYSVIEW_Conf+0x20>)
 800201e:	6818      	ldr	r0, [r3, #0]
 8002020:	4b05      	ldr	r3, [pc, #20]	; (8002038 <SEGGER_SYSVIEW_Conf+0x20>)
 8002022:	6819      	ldr	r1, [r3, #0]
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <SEGGER_SYSVIEW_Conf+0x24>)
 8002026:	4a06      	ldr	r2, [pc, #24]	; (8002040 <SEGGER_SYSVIEW_Conf+0x28>)
 8002028:	f000 fd4c 	bl	8002ac4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800202c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8002030:	f000 fd86 	bl	8002b40 <SEGGER_SYSVIEW_SetRAMBase>
}
 8002034:	bf00      	nop
 8002036:	bd80      	pop	{r7, pc}
 8002038:	20000014 	.word	0x20000014
 800203c:	08001ffd 	.word	0x08001ffd
 8002040:	080049bc 	.word	0x080049bc

08002044 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8002044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002046:	b085      	sub	sp, #20
 8002048:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800204a:	2300      	movs	r3, #0
 800204c:	607b      	str	r3, [r7, #4]
 800204e:	e034      	b.n	80020ba <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8002050:	491e      	ldr	r1, [pc, #120]	; (80020cc <_cbSendTaskList+0x88>)
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	6818      	ldr	r0, [r3, #0]
 8002060:	491a      	ldr	r1, [pc, #104]	; (80020cc <_cbSendTaskList+0x88>)
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	440b      	add	r3, r1
 800206e:	3304      	adds	r3, #4
 8002070:	681c      	ldr	r4, [r3, #0]
 8002072:	4916      	ldr	r1, [pc, #88]	; (80020cc <_cbSendTaskList+0x88>)
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	440b      	add	r3, r1
 8002080:	3308      	adds	r3, #8
 8002082:	681d      	ldr	r5, [r3, #0]
 8002084:	4911      	ldr	r1, [pc, #68]	; (80020cc <_cbSendTaskList+0x88>)
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	4613      	mov	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	330c      	adds	r3, #12
 8002094:	681e      	ldr	r6, [r3, #0]
 8002096:	490d      	ldr	r1, [pc, #52]	; (80020cc <_cbSendTaskList+0x88>)
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	440b      	add	r3, r1
 80020a4:	3310      	adds	r3, #16
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	4633      	mov	r3, r6
 80020ac:	462a      	mov	r2, r5
 80020ae:	4621      	mov	r1, r4
 80020b0:	f000 f8b4 	bl	800221c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3301      	adds	r3, #1
 80020b8:	607b      	str	r3, [r7, #4]
 80020ba:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <_cbSendTaskList+0x8c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d3c5      	bcc.n	8002050 <_cbSendTaskList+0xc>
  }
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020cc:	20012dcc 	.word	0x20012dcc
 80020d0:	20012e6c 	.word	0x20012e6c

080020d4 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80020d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80020da:	f7fe ffe5 	bl	80010a8 <xTaskGetTickCountFromISR>
 80020de:	4603      	mov	r3, r0
 80020e0:	f04f 0400 	mov.w	r4, #0
 80020e4:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80020e8:	e9d7 5600 	ldrd	r5, r6, [r7]
 80020ec:	462b      	mov	r3, r5
 80020ee:	4634      	mov	r4, r6
 80020f0:	f04f 0100 	mov.w	r1, #0
 80020f4:	f04f 0200 	mov.w	r2, #0
 80020f8:	0162      	lsls	r2, r4, #5
 80020fa:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80020fe:	0159      	lsls	r1, r3, #5
 8002100:	460b      	mov	r3, r1
 8002102:	4614      	mov	r4, r2
 8002104:	1b5b      	subs	r3, r3, r5
 8002106:	eb64 0406 	sbc.w	r4, r4, r6
 800210a:	f04f 0100 	mov.w	r1, #0
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	00a2      	lsls	r2, r4, #2
 8002114:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8002118:	0099      	lsls	r1, r3, #2
 800211a:	460b      	mov	r3, r1
 800211c:	4614      	mov	r4, r2
 800211e:	195b      	adds	r3, r3, r5
 8002120:	eb44 0406 	adc.w	r4, r4, r6
 8002124:	f04f 0100 	mov.w	r1, #0
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	00e2      	lsls	r2, r4, #3
 800212e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002132:	00d9      	lsls	r1, r3, #3
 8002134:	460b      	mov	r3, r1
 8002136:	4614      	mov	r4, r2
 8002138:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 800213c:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8002140:	4618      	mov	r0, r3
 8002142:	4621      	mov	r1, r4
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800214c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af02      	add	r7, sp, #8
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
 8002158:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800215a:	2205      	movs	r2, #5
 800215c:	492b      	ldr	r1, [pc, #172]	; (800220c <SYSVIEW_AddTask+0xc0>)
 800215e:	68b8      	ldr	r0, [r7, #8]
 8002160:	f001 ff5c 	bl	800401c <memcmp>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d04b      	beq.n	8002202 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800216a:	4b29      	ldr	r3, [pc, #164]	; (8002210 <SYSVIEW_AddTask+0xc4>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2b07      	cmp	r3, #7
 8002170:	d903      	bls.n	800217a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8002172:	4828      	ldr	r0, [pc, #160]	; (8002214 <SYSVIEW_AddTask+0xc8>)
 8002174:	f001 fbb4 	bl	80038e0 <SEGGER_SYSVIEW_Warn>
    return;
 8002178:	e044      	b.n	8002204 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800217a:	4b25      	ldr	r3, [pc, #148]	; (8002210 <SYSVIEW_AddTask+0xc4>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	4926      	ldr	r1, [pc, #152]	; (8002218 <SYSVIEW_AddTask+0xcc>)
 8002180:	4613      	mov	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800218e:	4b20      	ldr	r3, [pc, #128]	; (8002210 <SYSVIEW_AddTask+0xc4>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	4921      	ldr	r1, [pc, #132]	; (8002218 <SYSVIEW_AddTask+0xcc>)
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	440b      	add	r3, r1
 800219e:	3304      	adds	r3, #4
 80021a0:	68ba      	ldr	r2, [r7, #8]
 80021a2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80021a4:	4b1a      	ldr	r3, [pc, #104]	; (8002210 <SYSVIEW_AddTask+0xc4>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	491b      	ldr	r1, [pc, #108]	; (8002218 <SYSVIEW_AddTask+0xcc>)
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	440b      	add	r3, r1
 80021b4:	3308      	adds	r3, #8
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80021ba:	4b15      	ldr	r3, [pc, #84]	; (8002210 <SYSVIEW_AddTask+0xc4>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	4916      	ldr	r1, [pc, #88]	; (8002218 <SYSVIEW_AddTask+0xcc>)
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	440b      	add	r3, r1
 80021ca:	330c      	adds	r3, #12
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80021d0:	4b0f      	ldr	r3, [pc, #60]	; (8002210 <SYSVIEW_AddTask+0xc4>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	4910      	ldr	r1, [pc, #64]	; (8002218 <SYSVIEW_AddTask+0xcc>)
 80021d6:	4613      	mov	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	440b      	add	r3, r1
 80021e0:	3310      	adds	r3, #16
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80021e6:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <SYSVIEW_AddTask+0xc4>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	3301      	adds	r3, #1
 80021ec:	4a08      	ldr	r2, [pc, #32]	; (8002210 <SYSVIEW_AddTask+0xc4>)
 80021ee:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	68b9      	ldr	r1, [r7, #8]
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f000 f80e 	bl	800221c <SYSVIEW_SendTaskInfo>
 8002200:	e000      	b.n	8002204 <SYSVIEW_AddTask+0xb8>
    return;
 8002202:	bf00      	nop

}
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	080048c4 	.word	0x080048c4
 8002210:	20012e6c 	.word	0x20012e6c
 8002214:	080048cc 	.word	0x080048cc
 8002218:	20012dcc 	.word	0x20012dcc

0800221c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800221c:	b580      	push	{r7, lr}
 800221e:	b08a      	sub	sp, #40	; 0x28
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
 8002228:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800222a:	f107 0314 	add.w	r3, r7, #20
 800222e:	2214      	movs	r2, #20
 8002230:	2100      	movs	r1, #0
 8002232:	4618      	mov	r0, r3
 8002234:	f001 ff0c 	bl	8004050 <memset>
  TaskInfo.TaskID     = TaskID;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8002248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800224c:	f107 0314 	add.w	r3, r7, #20
 8002250:	4618      	mov	r0, r3
 8002252:	f000 ff47 	bl	80030e4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8002256:	bf00      	nop
 8002258:	3728      	adds	r7, #40	; 0x28
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8002266:	4b21      	ldr	r3, [pc, #132]	; (80022ec <_DoInit+0x8c>)
 8002268:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2203      	movs	r2, #3
 800226e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2203      	movs	r2, #3
 8002274:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a1d      	ldr	r2, [pc, #116]	; (80022f0 <_DoInit+0x90>)
 800227a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a1d      	ldr	r2, [pc, #116]	; (80022f4 <_DoInit+0x94>)
 8002280:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002288:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a14      	ldr	r2, [pc, #80]	; (80022f0 <_DoInit+0x90>)
 80022a0:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a14      	ldr	r2, [pc, #80]	; (80022f8 <_DoInit+0x98>)
 80022a6:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2210      	movs	r2, #16
 80022ac:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3307      	adds	r3, #7
 80022c4:	4a0d      	ldr	r2, [pc, #52]	; (80022fc <_DoInit+0x9c>)
 80022c6:	6810      	ldr	r0, [r2, #0]
 80022c8:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a0c      	ldr	r2, [pc, #48]	; (8002300 <_DoInit+0xa0>)
 80022ce:	6810      	ldr	r0, [r2, #0]
 80022d0:	6018      	str	r0, [r3, #0]
 80022d2:	8891      	ldrh	r1, [r2, #4]
 80022d4:	7992      	ldrb	r2, [r2, #6]
 80022d6:	8099      	strh	r1, [r3, #4]
 80022d8:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2220      	movs	r2, #32
 80022de:	719a      	strb	r2, [r3, #6]
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	200153b4 	.word	0x200153b4
 80022f0:	0800491c 	.word	0x0800491c
 80022f4:	20012e70 	.word	0x20012e70
 80022f8:	20013270 	.word	0x20013270
 80022fc:	08004928 	.word	0x08004928
 8002300:	0800492c 	.word	0x0800492c

08002304 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002304:	b580      	push	{r7, lr}
 8002306:	b08a      	sub	sp, #40	; 0x28
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 8002310:	4b3c      	ldr	r3, [pc, #240]	; (8002404 <SEGGER_RTT_ReadNoLock+0x100>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <SEGGER_RTT_ReadNoLock+0x18>
 8002318:	f7ff ffa2 	bl	8002260 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	4613      	mov	r3, r2
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	4413      	add	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	3360      	adds	r3, #96	; 0x60
 8002328:	4a36      	ldr	r2, [pc, #216]	; (8002404 <SEGGER_RTT_ReadNoLock+0x100>)
 800232a:	4413      	add	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 800233e:	2300      	movs	r3, #0
 8002340:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8002342:	6a3a      	ldr	r2, [r7, #32]
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	429a      	cmp	r2, r3
 8002348:	d92a      	bls.n	80023a0 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	689a      	ldr	r2, [r3, #8]
 800234e:	6a3b      	ldr	r3, [r7, #32]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4293      	cmp	r3, r2
 800235a:	bf28      	it	cs
 800235c:	4613      	movcs	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	6a3b      	ldr	r3, [r7, #32]
 8002366:	4413      	add	r3, r2
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	4619      	mov	r1, r3
 800236c:	69f8      	ldr	r0, [r7, #28]
 800236e:	f001 fe64 	bl	800403a <memcpy>
    NumBytesRead += NumBytesRem;
 8002372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	4413      	add	r3, r2
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 800237a:	69fa      	ldr	r2, [r7, #28]
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	4413      	add	r3, r2
 8002380:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800238a:	6a3a      	ldr	r2, [r7, #32]
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	4413      	add	r3, r2
 8002390:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	6a3a      	ldr	r2, [r7, #32]
 8002398:	429a      	cmp	r2, r3
 800239a:	d101      	bne.n	80023a0 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 800239c:	2300      	movs	r3, #0
 800239e:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	6a3b      	ldr	r3, [r7, #32]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4293      	cmp	r3, r2
 80023ae:	bf28      	it	cs
 80023b0:	4613      	movcs	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d018      	beq.n	80023ec <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	6a3b      	ldr	r3, [r7, #32]
 80023c0:	4413      	add	r3, r2
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4619      	mov	r1, r3
 80023c6:	69f8      	ldr	r0, [r7, #28]
 80023c8:	f001 fe37 	bl	800403a <memcpy>
    NumBytesRead += NumBytesRem;
 80023cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	4413      	add	r3, r2
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 80023d4:	69fa      	ldr	r2, [r7, #28]
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4413      	add	r3, r2
 80023da:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80023e4:	6a3a      	ldr	r2, [r7, #32]
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	4413      	add	r3, r2
 80023ea:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d002      	beq.n	80023f8 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	6a3a      	ldr	r2, [r7, #32]
 80023f6:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3728      	adds	r7, #40	; 0x28
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	200153b4 	.word	0x200153b4

08002408 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002408:	b580      	push	{r7, lr}
 800240a:	b08a      	sub	sp, #40	; 0x28
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1c5a      	adds	r2, r3, #1
 800241c:	4613      	mov	r3, r2
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	4413      	add	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	4a3f      	ldr	r2, [pc, #252]	; (8002524 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 8002426:	4413      	add	r3, r2
 8002428:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 800242a:	6a3b      	ldr	r3, [r7, #32]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 8002430:	6a3b      	ldr	r3, [r7, #32]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 8002436:	69fa      	ldr	r2, [r7, #28]
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	429a      	cmp	r2, r3
 800243c:	d854      	bhi.n	80024e8 <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 800243e:	6a3b      	ldr	r3, [r7, #32]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	3b01      	subs	r3, #1
 8002448:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	429a      	cmp	r2, r3
 8002450:	d30f      	bcc.n	8002472 <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002452:	6a3b      	ldr	r3, [r7, #32]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	4413      	add	r3, r2
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800245e:	4618      	mov	r0, r3
 8002460:	f001 fdeb 	bl	800403a <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	441a      	add	r2, r3
 800246a:	6a3b      	ldr	r3, [r7, #32]
 800246c:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 800246e:	2301      	movs	r3, #1
 8002470:	e054      	b.n	800251c <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	4413      	add	r3, r2
 8002478:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	429a      	cmp	r2, r3
 8002480:	d34b      	bcc.n	800251a <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 8002482:	6a3b      	ldr	r3, [r7, #32]
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	429a      	cmp	r2, r3
 8002492:	d90e      	bls.n	80024b2 <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002494:	6a3b      	ldr	r3, [r7, #32]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	4413      	add	r3, r2
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024a0:	4618      	mov	r0, r3
 80024a2:	f001 fdca 	bl	800403a <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	441a      	add	r2, r3
 80024ac:	6a3b      	ldr	r3, [r7, #32]
 80024ae:	60da      	str	r2, [r3, #12]
 80024b0:	e018      	b.n	80024e4 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 80024b2:	6a3b      	ldr	r3, [r7, #32]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	4413      	add	r3, r2
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024be:	4618      	mov	r0, r3
 80024c0:	f001 fdbb 	bl	800403a <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	6858      	ldr	r0, [r3, #4]
 80024c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	18d1      	adds	r1, r2, r3
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	461a      	mov	r2, r3
 80024d6:	f001 fdb0 	bl	800403a <memcpy>
        pRing->WrOff = NumBytes - Rem;
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad2      	subs	r2, r2, r3
 80024e0:	6a3b      	ldr	r3, [r7, #32]
 80024e2:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e019      	b.n	800251c <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 80024e8:	69fa      	ldr	r2, [r7, #28]
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	3b01      	subs	r3, #1
 80024f0:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d30f      	bcc.n	800251a <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	4413      	add	r3, r2
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002506:	4618      	mov	r0, r3
 8002508:	f001 fd97 	bl	800403a <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	441a      	add	r2, r3
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3728      	adds	r7, #40	; 0x28
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	200153b4 	.word	0x200153b4

08002528 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
 8002534:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8002536:	4b30      	ldr	r3, [pc, #192]	; (80025f8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 800253e:	f7ff fe8f 	bl	8002260 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8002542:	4b2d      	ldr	r3, [pc, #180]	; (80025f8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	461a      	mov	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4293      	cmp	r3, r2
 800254c:	d24c      	bcs.n	80025e8 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 800254e:	f3ef 8311 	mrs	r3, BASEPRI
 8002552:	f04f 0120 	mov.w	r1, #32
 8002556:	f381 8811 	msr	BASEPRI, r1
 800255a:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d032      	beq.n	80025c8 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8002562:	4925      	ldr	r1, [pc, #148]	; (80025f8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	4613      	mov	r3, r2
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	4413      	add	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	440b      	add	r3, r1
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8002576:	4920      	ldr	r1, [pc, #128]	; (80025f8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	1c5a      	adds	r2, r3, #1
 800257c:	4613      	mov	r3, r2
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	4413      	add	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	440b      	add	r3, r1
 8002586:	3304      	adds	r3, #4
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800258c:	491a      	ldr	r1, [pc, #104]	; (80025f8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	4613      	mov	r3, r2
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	4413      	add	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	440b      	add	r3, r1
 800259a:	3320      	adds	r3, #32
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 80025a0:	4915      	ldr	r1, [pc, #84]	; (80025f8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	4613      	mov	r3, r2
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	4413      	add	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	440b      	add	r3, r1
 80025ae:	3328      	adds	r3, #40	; 0x28
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 80025b4:	4910      	ldr	r1, [pc, #64]	; (80025f8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	4613      	mov	r3, r2
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	4413      	add	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	440b      	add	r3, r1
 80025c2:	3324      	adds	r3, #36	; 0x24
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 80025c8:	490b      	ldr	r1, [pc, #44]	; (80025f8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	4613      	mov	r3, r2
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	4413      	add	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	440b      	add	r3, r1
 80025d6:	332c      	adds	r3, #44	; 0x2c
 80025d8:	6a3a      	ldr	r2, [r7, #32]
 80025da:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80025e2:	2300      	movs	r3, #0
 80025e4:	617b      	str	r3, [r7, #20]
 80025e6:	e002      	b.n	80025ee <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 80025e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025ec:	617b      	str	r3, [r7, #20]
  }
  return r;
 80025ee:	697b      	ldr	r3, [r7, #20]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	200153b4 	.word	0x200153b4

080025fc <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
 8002608:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 800260a:	4b30      	ldr	r3, [pc, #192]	; (80026cc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <SEGGER_RTT_ConfigDownBuffer+0x1a>
 8002612:	f7ff fe25 	bl	8002260 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 8002616:	4b2d      	ldr	r3, [pc, #180]	; (80026cc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	461a      	mov	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4293      	cmp	r3, r2
 8002620:	d24b      	bcs.n	80026ba <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 8002622:	f3ef 8311 	mrs	r3, BASEPRI
 8002626:	f04f 0120 	mov.w	r1, #32
 800262a:	f381 8811 	msr	BASEPRI, r1
 800262e:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d031      	beq.n	800269a <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 8002636:	4925      	ldr	r1, [pc, #148]	; (80026cc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	4613      	mov	r3, r2
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	4413      	add	r3, r2
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	440b      	add	r3, r1
 8002644:	3360      	adds	r3, #96	; 0x60
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800264a:	4920      	ldr	r1, [pc, #128]	; (80026cc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	4613      	mov	r3, r2
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	4413      	add	r3, r2
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	440b      	add	r3, r1
 8002658:	3364      	adds	r3, #100	; 0x64
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800265e:	491b      	ldr	r1, [pc, #108]	; (80026cc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	4613      	mov	r3, r2
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	4413      	add	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	440b      	add	r3, r1
 800266c:	3368      	adds	r3, #104	; 0x68
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 8002672:	4916      	ldr	r1, [pc, #88]	; (80026cc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	4613      	mov	r3, r2
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	4413      	add	r3, r2
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	440b      	add	r3, r1
 8002680:	3370      	adds	r3, #112	; 0x70
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 8002686:	4911      	ldr	r1, [pc, #68]	; (80026cc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	4613      	mov	r3, r2
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	4413      	add	r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	440b      	add	r3, r1
 8002694:	336c      	adds	r3, #108	; 0x6c
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 800269a:	490c      	ldr	r1, [pc, #48]	; (80026cc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	4613      	mov	r3, r2
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	4413      	add	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	440b      	add	r3, r1
 80026a8:	3374      	adds	r3, #116	; 0x74
 80026aa:	6a3a      	ldr	r2, [r7, #32]
 80026ac:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	e002      	b.n	80026c0 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 80026ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026be:	617b      	str	r3, [r7, #20]
  }
  return r;
 80026c0:	697b      	ldr	r3, [r7, #20]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	200153b4 	.word	0x200153b4

080026d0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80026d0:	b480      	push	{r7}
 80026d2:	b087      	sub	sp, #28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80026e0:	e002      	b.n	80026e8 <_EncodeStr+0x18>
    Len++;
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	3301      	adds	r3, #1
 80026e6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	4413      	add	r3, r2
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1f6      	bne.n	80026e2 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d901      	bls.n	8002700 <_EncodeStr+0x30>
    Len = Limit;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	2bfe      	cmp	r3, #254	; 0xfe
 8002704:	d806      	bhi.n	8002714 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	1c5a      	adds	r2, r3, #1
 800270a:	60fa      	str	r2, [r7, #12]
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	701a      	strb	r2, [r3, #0]
 8002712:	e011      	b.n	8002738 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	1c5a      	adds	r2, r3, #1
 8002718:	60fa      	str	r2, [r7, #12]
 800271a:	22ff      	movs	r2, #255	; 0xff
 800271c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	1c5a      	adds	r2, r3, #1
 8002722:	60fa      	str	r2, [r7, #12]
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	0a19      	lsrs	r1, r3, #8
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	1c5a      	adds	r2, r3, #1
 8002732:	60fa      	str	r2, [r7, #12]
 8002734:	b2ca      	uxtb	r2, r1
 8002736:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800273c:	e00a      	b.n	8002754 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	1c53      	adds	r3, r2, #1
 8002742:	60bb      	str	r3, [r7, #8]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	1c59      	adds	r1, r3, #1
 8002748:	60f9      	str	r1, [r7, #12]
 800274a:	7812      	ldrb	r2, [r2, #0]
 800274c:	701a      	strb	r2, [r3, #0]
    n++;
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	3301      	adds	r3, #1
 8002752:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	429a      	cmp	r2, r3
 800275a:	d3f0      	bcc.n	800273e <_EncodeStr+0x6e>
  }
  return pPayload;
 800275c:	68fb      	ldr	r3, [r7, #12]
}
 800275e:	4618      	mov	r0, r3
 8002760:	371c      	adds	r7, #28
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3304      	adds	r3, #4
}
 8002776:	4618      	mov	r0, r3
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002788:	1cfb      	adds	r3, r7, #3
 800278a:	2201      	movs	r2, #1
 800278c:	4619      	mov	r1, r3
 800278e:	2001      	movs	r0, #1
 8002790:	f7ff fdb8 	bl	8002304 <SEGGER_RTT_ReadNoLock>
 8002794:	4603      	mov	r3, r0
 8002796:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	dd44      	ble.n	8002828 <_HandleIncomingPacket+0xa6>
    switch (Cmd) {
 800279e:	78fb      	ldrb	r3, [r7, #3]
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d01a      	beq.n	80027da <_HandleIncomingPacket+0x58>
 80027a4:	2b04      	cmp	r3, #4
 80027a6:	dc06      	bgt.n	80027b6 <_HandleIncomingPacket+0x34>
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d010      	beq.n	80027ce <_HandleIncomingPacket+0x4c>
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	dc11      	bgt.n	80027d4 <_HandleIncomingPacket+0x52>
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d009      	beq.n	80027c8 <_HandleIncomingPacket+0x46>
 80027b4:	e02d      	b.n	8002812 <_HandleIncomingPacket+0x90>
 80027b6:	2b06      	cmp	r3, #6
 80027b8:	d015      	beq.n	80027e6 <_HandleIncomingPacket+0x64>
 80027ba:	2b06      	cmp	r3, #6
 80027bc:	db10      	blt.n	80027e0 <_HandleIncomingPacket+0x5e>
 80027be:	2b07      	cmp	r3, #7
 80027c0:	d014      	beq.n	80027ec <_HandleIncomingPacket+0x6a>
 80027c2:	2b80      	cmp	r3, #128	; 0x80
 80027c4:	d015      	beq.n	80027f2 <_HandleIncomingPacket+0x70>
 80027c6:	e024      	b.n	8002812 <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80027c8:	f000 fb10 	bl	8002dec <SEGGER_SYSVIEW_Start>
      break;
 80027cc:	e031      	b.n	8002832 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80027ce:	f000 fbc9 	bl	8002f64 <SEGGER_SYSVIEW_Stop>
      break;
 80027d2:	e02e      	b.n	8002832 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80027d4:	f000 fda4 	bl	8003320 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80027d8:	e02b      	b.n	8002832 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80027da:	f000 fd69 	bl	80032b0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80027de:	e028      	b.n	8002832 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80027e0:	f000 fbe6 	bl	8002fb0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80027e4:	e025      	b.n	8002832 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80027e6:	f001 f83d 	bl	8003864 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80027ea:	e022      	b.n	8002832 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80027ec:	f001 f81c 	bl	8003828 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80027f0:	e01f      	b.n	8002832 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80027f2:	1cfb      	adds	r3, r7, #3
 80027f4:	2201      	movs	r2, #1
 80027f6:	4619      	mov	r1, r3
 80027f8:	2001      	movs	r0, #1
 80027fa:	f7ff fd83 	bl	8002304 <SEGGER_RTT_ReadNoLock>
 80027fe:	4603      	mov	r3, r0
 8002800:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	dd11      	ble.n	800282c <_HandleIncomingPacket+0xaa>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8002808:	78fb      	ldrb	r3, [r7, #3]
 800280a:	4618      	mov	r0, r3
 800280c:	f000 ff8c 	bl	8003728 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8002810:	e00c      	b.n	800282c <_HandleIncomingPacket+0xaa>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8002812:	78fb      	ldrb	r3, [r7, #3]
 8002814:	b25b      	sxtb	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	da0a      	bge.n	8002830 <_HandleIncomingPacket+0xae>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800281a:	1cfb      	adds	r3, r7, #3
 800281c:	2201      	movs	r2, #1
 800281e:	4619      	mov	r1, r3
 8002820:	2001      	movs	r0, #1
 8002822:	f7ff fd6f 	bl	8002304 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8002826:	e003      	b.n	8002830 <_HandleIncomingPacket+0xae>
    }
  }
 8002828:	bf00      	nop
 800282a:	e002      	b.n	8002832 <_HandleIncomingPacket+0xb0>
      break;
 800282c:	bf00      	nop
 800282e:	e000      	b.n	8002832 <_HandleIncomingPacket+0xb0>
      break;
 8002830:	bf00      	nop
}
 8002832:	bf00      	nop
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
	...

0800283c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800283c:	b580      	push	{r7, lr}
 800283e:	b08c      	sub	sp, #48	; 0x30
 8002840:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8002842:	2301      	movs	r3, #1
 8002844:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8002846:	1d3b      	adds	r3, r7, #4
 8002848:	3301      	adds	r3, #1
 800284a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002850:	4b30      	ldr	r3, [pc, #192]	; (8002914 <_TrySendOverflowPacket+0xd8>)
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	62bb      	str	r3, [r7, #40]	; 0x28
 8002856:	e00b      	b.n	8002870 <_TrySendOverflowPacket+0x34>
 8002858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285a:	b2da      	uxtb	r2, r3
 800285c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285e:	1c59      	adds	r1, r3, #1
 8002860:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002862:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	701a      	strb	r2, [r3, #0]
 800286a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286c:	09db      	lsrs	r3, r3, #7
 800286e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002872:	2b7f      	cmp	r3, #127	; 0x7f
 8002874:	d8f0      	bhi.n	8002858 <_TrySendOverflowPacket+0x1c>
 8002876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002878:	1c5a      	adds	r2, r3, #1
 800287a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800287c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	701a      	strb	r2, [r3, #0]
 8002882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002884:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002886:	4b24      	ldr	r3, [pc, #144]	; (8002918 <_TrySendOverflowPacket+0xdc>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800288c:	4b21      	ldr	r3, [pc, #132]	; (8002914 <_TrySendOverflowPacket+0xd8>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	623b      	str	r3, [r7, #32]
 800289e:	e00b      	b.n	80028b8 <_TrySendOverflowPacket+0x7c>
 80028a0:	6a3b      	ldr	r3, [r7, #32]
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	1c59      	adds	r1, r3, #1
 80028a8:	6279      	str	r1, [r7, #36]	; 0x24
 80028aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	701a      	strb	r2, [r3, #0]
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	09db      	lsrs	r3, r3, #7
 80028b6:	623b      	str	r3, [r7, #32]
 80028b8:	6a3b      	ldr	r3, [r7, #32]
 80028ba:	2b7f      	cmp	r3, #127	; 0x7f
 80028bc:	d8f0      	bhi.n	80028a0 <_TrySendOverflowPacket+0x64>
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	627a      	str	r2, [r7, #36]	; 0x24
 80028c4:	6a3a      	ldr	r2, [r7, #32]
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	701a      	strb	r2, [r3, #0]
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80028ce:	69fa      	ldr	r2, [r7, #28]
 80028d0:	1d3b      	adds	r3, r7, #4
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	461a      	mov	r2, r3
 80028d6:	1d3b      	adds	r3, r7, #4
 80028d8:	4619      	mov	r1, r3
 80028da:	2001      	movs	r0, #1
 80028dc:	f7ff fd94 	bl	8002408 <SEGGER_RTT_WriteSkipNoLock>
 80028e0:	4603      	mov	r3, r0
 80028e2:	613b      	str	r3, [r7, #16]
  if (Status) {
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d009      	beq.n	80028fe <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80028ea:	4a0a      	ldr	r2, [pc, #40]	; (8002914 <_TrySendOverflowPacket+0xd8>)
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80028f0:	4b08      	ldr	r3, [pc, #32]	; (8002914 <_TrySendOverflowPacket+0xd8>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	3b01      	subs	r3, #1
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	4b06      	ldr	r3, [pc, #24]	; (8002914 <_TrySendOverflowPacket+0xd8>)
 80028fa:	701a      	strb	r2, [r3, #0]
 80028fc:	e004      	b.n	8002908 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80028fe:	4b05      	ldr	r3, [pc, #20]	; (8002914 <_TrySendOverflowPacket+0xd8>)
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	3301      	adds	r3, #1
 8002904:	4a03      	ldr	r2, [pc, #12]	; (8002914 <_TrySendOverflowPacket+0xd8>)
 8002906:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8002908:	693b      	ldr	r3, [r7, #16]
}
 800290a:	4618      	mov	r0, r3
 800290c:	3730      	adds	r7, #48	; 0x30
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	20015288 	.word	0x20015288
 8002918:	e0001004 	.word	0xe0001004

0800291c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800291c:	b580      	push	{r7, lr}
 800291e:	b08a      	sub	sp, #40	; 0x28
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8002928:	4b63      	ldr	r3, [pc, #396]	; (8002ab8 <_SendPacket+0x19c>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d010      	beq.n	8002952 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8002930:	4b61      	ldr	r3, [pc, #388]	; (8002ab8 <_SendPacket+0x19c>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 80a1 	beq.w	8002a7c <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800293a:	4b5f      	ldr	r3, [pc, #380]	; (8002ab8 <_SendPacket+0x19c>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d109      	bne.n	8002956 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8002942:	f7ff ff7b 	bl	800283c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8002946:	4b5c      	ldr	r3, [pc, #368]	; (8002ab8 <_SendPacket+0x19c>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b01      	cmp	r3, #1
 800294c:	f040 8098 	bne.w	8002a80 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 8002950:	e001      	b.n	8002956 <_SendPacket+0x3a>
    goto Send;
 8002952:	bf00      	nop
 8002954:	e000      	b.n	8002958 <_SendPacket+0x3c>
Send:
 8002956:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b1f      	cmp	r3, #31
 800295c:	d809      	bhi.n	8002972 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800295e:	4b56      	ldr	r3, [pc, #344]	; (8002ab8 <_SendPacket+0x19c>)
 8002960:	69da      	ldr	r2, [r3, #28]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	fa22 f303 	lsr.w	r3, r2, r3
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b00      	cmp	r3, #0
 800296e:	f040 8089 	bne.w	8002a84 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b17      	cmp	r3, #23
 8002976:	d807      	bhi.n	8002988 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	3b01      	subs	r3, #1
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	b2da      	uxtb	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	701a      	strb	r2, [r3, #0]
 8002986:	e03d      	b.n	8002a04 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	2b7f      	cmp	r3, #127	; 0x7f
 8002994:	d912      	bls.n	80029bc <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	09da      	lsrs	r2, r3, #7
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	3b01      	subs	r3, #1
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	3a01      	subs	r2, #1
 80029ae:	60fa      	str	r2, [r7, #12]
 80029b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	701a      	strb	r2, [r3, #0]
 80029ba:	e006      	b.n	80029ca <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	3b01      	subs	r3, #1
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b7f      	cmp	r3, #127	; 0x7f
 80029ce:	d912      	bls.n	80029f6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	09da      	lsrs	r2, r3, #7
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	3a01      	subs	r2, #1
 80029e8:	60fa      	str	r2, [r7, #12]
 80029ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	701a      	strb	r2, [r3, #0]
 80029f4:	e006      	b.n	8002a04 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	3b01      	subs	r3, #1
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002a04:	4b2d      	ldr	r3, [pc, #180]	; (8002abc <_SendPacket+0x1a0>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002a0a:	4b2b      	ldr	r3, [pc, #172]	; (8002ab8 <_SendPacket+0x19c>)
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	627b      	str	r3, [r7, #36]	; 0x24
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	623b      	str	r3, [r7, #32]
 8002a1c:	e00b      	b.n	8002a36 <_SendPacket+0x11a>
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	1c59      	adds	r1, r3, #1
 8002a26:	6279      	str	r1, [r7, #36]	; 0x24
 8002a28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	701a      	strb	r2, [r3, #0]
 8002a30:	6a3b      	ldr	r3, [r7, #32]
 8002a32:	09db      	lsrs	r3, r3, #7
 8002a34:	623b      	str	r3, [r7, #32]
 8002a36:	6a3b      	ldr	r3, [r7, #32]
 8002a38:	2b7f      	cmp	r3, #127	; 0x7f
 8002a3a:	d8f0      	bhi.n	8002a1e <_SendPacket+0x102>
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	1c5a      	adds	r2, r3, #1
 8002a40:	627a      	str	r2, [r7, #36]	; 0x24
 8002a42:	6a3a      	ldr	r2, [r7, #32]
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	701a      	strb	r2, [r3, #0]
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	461a      	mov	r2, r3
 8002a54:	68f9      	ldr	r1, [r7, #12]
 8002a56:	2001      	movs	r0, #1
 8002a58:	f7ff fcd6 	bl	8002408 <SEGGER_RTT_WriteSkipNoLock>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	613b      	str	r3, [r7, #16]
  if (Status) {
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002a66:	4a14      	ldr	r2, [pc, #80]	; (8002ab8 <_SendPacket+0x19c>)
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	60d3      	str	r3, [r2, #12]
 8002a6c:	e00b      	b.n	8002a86 <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8002a6e:	4b12      	ldr	r3, [pc, #72]	; (8002ab8 <_SendPacket+0x19c>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	3301      	adds	r3, #1
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	4b10      	ldr	r3, [pc, #64]	; (8002ab8 <_SendPacket+0x19c>)
 8002a78:	701a      	strb	r2, [r3, #0]
 8002a7a:	e004      	b.n	8002a86 <_SendPacket+0x16a>
    goto SendDone;
 8002a7c:	bf00      	nop
 8002a7e:	e002      	b.n	8002a86 <_SendPacket+0x16a>
      goto SendDone;
 8002a80:	bf00      	nop
 8002a82:	e000      	b.n	8002a86 <_SendPacket+0x16a>
      goto SendDone;
 8002a84:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8002a86:	4b0e      	ldr	r3, [pc, #56]	; (8002ac0 <_SendPacket+0x1a4>)
 8002a88:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <_SendPacket+0x1a4>)
 8002a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d00b      	beq.n	8002aae <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8002a96:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <_SendPacket+0x19c>)
 8002a98:	789b      	ldrb	r3, [r3, #2]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d107      	bne.n	8002aae <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8002a9e:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <_SendPacket+0x19c>)
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8002aa4:	f7ff fe6d 	bl	8002782 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8002aa8:	4b03      	ldr	r3, [pc, #12]	; (8002ab8 <_SendPacket+0x19c>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8002aae:	bf00      	nop
 8002ab0:	3728      	adds	r7, #40	; 0x28
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	20015288 	.word	0x20015288
 8002abc:	e0001004 	.word	0xe0001004
 8002ac0:	200153b4 	.word	0x200153b4

08002ac4 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af02      	add	r7, sp, #8
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
 8002ad0:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ada:	4a14      	ldr	r2, [pc, #80]	; (8002b2c <SEGGER_SYSVIEW_Init+0x68>)
 8002adc:	4914      	ldr	r1, [pc, #80]	; (8002b30 <SEGGER_SYSVIEW_Init+0x6c>)
 8002ade:	2001      	movs	r0, #1
 8002ae0:	f7ff fd22 	bl	8002528 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	2308      	movs	r3, #8
 8002aea:	4a12      	ldr	r2, [pc, #72]	; (8002b34 <SEGGER_SYSVIEW_Init+0x70>)
 8002aec:	4910      	ldr	r1, [pc, #64]	; (8002b30 <SEGGER_SYSVIEW_Init+0x6c>)
 8002aee:	2001      	movs	r0, #1
 8002af0:	f7ff fd84 	bl	80025fc <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8002af4:	4b10      	ldr	r3, [pc, #64]	; (8002b38 <SEGGER_SYSVIEW_Init+0x74>)
 8002af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002afa:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002afc:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <SEGGER_SYSVIEW_Init+0x78>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a0d      	ldr	r2, [pc, #52]	; (8002b38 <SEGGER_SYSVIEW_Init+0x74>)
 8002b02:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8002b04:	4a0c      	ldr	r2, [pc, #48]	; (8002b38 <SEGGER_SYSVIEW_Init+0x74>)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8002b0a:	4a0b      	ldr	r2, [pc, #44]	; (8002b38 <SEGGER_SYSVIEW_Init+0x74>)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8002b10:	4a09      	ldr	r2, [pc, #36]	; (8002b38 <SEGGER_SYSVIEW_Init+0x74>)
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8002b16:	4a08      	ldr	r2, [pc, #32]	; (8002b38 <SEGGER_SYSVIEW_Init+0x74>)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8002b1c:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <SEGGER_SYSVIEW_Init+0x74>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8002b22:	bf00      	nop
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20013280 	.word	0x20013280
 8002b30:	08004934 	.word	0x08004934
 8002b34:	20015280 	.word	0x20015280
 8002b38:	20015288 	.word	0x20015288
 8002b3c:	e0001004 	.word	0xe0001004

08002b40 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8002b48:	4a04      	ldr	r2, [pc, #16]	; (8002b5c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6113      	str	r3, [r2, #16]
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	20015288 	.word	0x20015288

08002b60 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002b68:	f3ef 8311 	mrs	r3, BASEPRI
 8002b6c:	f04f 0120 	mov.w	r1, #32
 8002b70:	f381 8811 	msr	BASEPRI, r1
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	4808      	ldr	r0, [pc, #32]	; (8002b98 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8002b78:	f7ff fdf7 	bl	800276a <_PreparePacket>
 8002b7c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	68b9      	ldr	r1, [r7, #8]
 8002b82:	68b8      	ldr	r0, [r7, #8]
 8002b84:	f7ff feca 	bl	800291c <_SendPacket>
  RECORD_END();
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f383 8811 	msr	BASEPRI, r3
}
 8002b8e:	bf00      	nop
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	200152b8 	.word	0x200152b8

08002b9c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b088      	sub	sp, #32
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002ba6:	f3ef 8311 	mrs	r3, BASEPRI
 8002baa:	f04f 0120 	mov.w	r1, #32
 8002bae:	f381 8811 	msr	BASEPRI, r1
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	4816      	ldr	r0, [pc, #88]	; (8002c10 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8002bb6:	f7ff fdd8 	bl	800276a <_PreparePacket>
 8002bba:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	61fb      	str	r3, [r7, #28]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	61bb      	str	r3, [r7, #24]
 8002bc8:	e00b      	b.n	8002be2 <SEGGER_SYSVIEW_RecordU32+0x46>
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	1c59      	adds	r1, r3, #1
 8002bd2:	61f9      	str	r1, [r7, #28]
 8002bd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	701a      	strb	r2, [r3, #0]
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	09db      	lsrs	r3, r3, #7
 8002be0:	61bb      	str	r3, [r7, #24]
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	2b7f      	cmp	r3, #127	; 0x7f
 8002be6:	d8f0      	bhi.n	8002bca <SEGGER_SYSVIEW_RecordU32+0x2e>
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	61fa      	str	r2, [r7, #28]
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	701a      	strb	r2, [r3, #0]
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	68f9      	ldr	r1, [r7, #12]
 8002bfc:	6938      	ldr	r0, [r7, #16]
 8002bfe:	f7ff fe8d 	bl	800291c <_SendPacket>
  RECORD_END();
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f383 8811 	msr	BASEPRI, r3
}
 8002c08:	bf00      	nop
 8002c0a:	3720      	adds	r7, #32
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	200152b8 	.word	0x200152b8

08002c14 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08c      	sub	sp, #48	; 0x30
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8002c20:	f3ef 8311 	mrs	r3, BASEPRI
 8002c24:	f04f 0120 	mov.w	r1, #32
 8002c28:	f381 8811 	msr	BASEPRI, r1
 8002c2c:	61fb      	str	r3, [r7, #28]
 8002c2e:	4825      	ldr	r0, [pc, #148]	; (8002cc4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8002c30:	f7ff fd9b 	bl	800276a <_PreparePacket>
 8002c34:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c42:	e00b      	b.n	8002c5c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8002c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4a:	1c59      	adds	r1, r3, #1
 8002c4c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002c4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	701a      	strb	r2, [r3, #0]
 8002c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c58:	09db      	lsrs	r3, r3, #7
 8002c5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5e:	2b7f      	cmp	r3, #127	; 0x7f
 8002c60:	d8f0      	bhi.n	8002c44 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8002c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c64:	1c5a      	adds	r2, r3, #1
 8002c66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	701a      	strb	r2, [r3, #0]
 8002c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c70:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	623b      	str	r3, [r7, #32]
 8002c7a:	e00b      	b.n	8002c94 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	1c59      	adds	r1, r3, #1
 8002c84:	6279      	str	r1, [r7, #36]	; 0x24
 8002c86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	701a      	strb	r2, [r3, #0]
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	09db      	lsrs	r3, r3, #7
 8002c92:	623b      	str	r3, [r7, #32]
 8002c94:	6a3b      	ldr	r3, [r7, #32]
 8002c96:	2b7f      	cmp	r3, #127	; 0x7f
 8002c98:	d8f0      	bhi.n	8002c7c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	1c5a      	adds	r2, r3, #1
 8002c9e:	627a      	str	r2, [r7, #36]	; 0x24
 8002ca0:	6a3a      	ldr	r2, [r7, #32]
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	701a      	strb	r2, [r3, #0]
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	6979      	ldr	r1, [r7, #20]
 8002cae:	69b8      	ldr	r0, [r7, #24]
 8002cb0:	f7ff fe34 	bl	800291c <_SendPacket>
  RECORD_END();
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f383 8811 	msr	BASEPRI, r3
}
 8002cba:	bf00      	nop
 8002cbc:	3730      	adds	r7, #48	; 0x30
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	200152b8 	.word	0x200152b8

08002cc8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b090      	sub	sp, #64	; 0x40
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
 8002cd4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002cd6:	f3ef 8311 	mrs	r3, BASEPRI
 8002cda:	f04f 0120 	mov.w	r1, #32
 8002cde:	f381 8811 	msr	BASEPRI, r1
 8002ce2:	61fb      	str	r3, [r7, #28]
 8002ce4:	4840      	ldr	r0, [pc, #256]	; (8002de8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8002ce6:	f7ff fd40 	bl	800276a <_PreparePacket>
 8002cea:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cf8:	e00b      	b.n	8002d12 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8002cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d00:	1c59      	adds	r1, r3, #1
 8002d02:	63f9      	str	r1, [r7, #60]	; 0x3c
 8002d04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	701a      	strb	r2, [r3, #0]
 8002d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d0e:	09db      	lsrs	r3, r3, #7
 8002d10:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d14:	2b7f      	cmp	r3, #127	; 0x7f
 8002d16:	d8f0      	bhi.n	8002cfa <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8002d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d1a:	1c5a      	adds	r2, r3, #1
 8002d1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	701a      	strb	r2, [r3, #0]
 8002d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d26:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	633b      	str	r3, [r7, #48]	; 0x30
 8002d30:	e00b      	b.n	8002d4a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8002d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d38:	1c59      	adds	r1, r3, #1
 8002d3a:	6379      	str	r1, [r7, #52]	; 0x34
 8002d3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002d40:	b2d2      	uxtb	r2, r2
 8002d42:	701a      	strb	r2, [r3, #0]
 8002d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d46:	09db      	lsrs	r3, r3, #7
 8002d48:	633b      	str	r3, [r7, #48]	; 0x30
 8002d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4c:	2b7f      	cmp	r3, #127	; 0x7f
 8002d4e:	d8f0      	bhi.n	8002d32 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8002d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d52:	1c5a      	adds	r2, r3, #1
 8002d54:	637a      	str	r2, [r7, #52]	; 0x34
 8002d56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d58:	b2d2      	uxtb	r2, r2
 8002d5a:	701a      	strb	r2, [r3, #0]
 8002d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d5e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d68:	e00b      	b.n	8002d82 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8002d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d70:	1c59      	adds	r1, r3, #1
 8002d72:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002d74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002d78:	b2d2      	uxtb	r2, r2
 8002d7a:	701a      	strb	r2, [r3, #0]
 8002d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7e:	09db      	lsrs	r3, r3, #7
 8002d80:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d84:	2b7f      	cmp	r3, #127	; 0x7f
 8002d86:	d8f0      	bhi.n	8002d6a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8002d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8a:	1c5a      	adds	r2, r3, #1
 8002d8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d90:	b2d2      	uxtb	r2, r2
 8002d92:	701a      	strb	r2, [r3, #0]
 8002d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d96:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d9e:	623b      	str	r3, [r7, #32]
 8002da0:	e00b      	b.n	8002dba <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	1c59      	adds	r1, r3, #1
 8002daa:	6279      	str	r1, [r7, #36]	; 0x24
 8002dac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002db0:	b2d2      	uxtb	r2, r2
 8002db2:	701a      	strb	r2, [r3, #0]
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	09db      	lsrs	r3, r3, #7
 8002db8:	623b      	str	r3, [r7, #32]
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	2b7f      	cmp	r3, #127	; 0x7f
 8002dbe:	d8f0      	bhi.n	8002da2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	1c5a      	adds	r2, r3, #1
 8002dc4:	627a      	str	r2, [r7, #36]	; 0x24
 8002dc6:	6a3a      	ldr	r2, [r7, #32]
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	701a      	strb	r2, [r3, #0]
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dce:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	6979      	ldr	r1, [r7, #20]
 8002dd4:	69b8      	ldr	r0, [r7, #24]
 8002dd6:	f7ff fda1 	bl	800291c <_SendPacket>
  RECORD_END();
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	f383 8811 	msr	BASEPRI, r3
}
 8002de0:	bf00      	nop
 8002de2:	3740      	adds	r7, #64	; 0x40
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	200152b8 	.word	0x200152b8

08002dec <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b08c      	sub	sp, #48	; 0x30
 8002df0:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 8002df2:	4b59      	ldr	r3, [pc, #356]	; (8002f58 <SEGGER_SYSVIEW_Start+0x16c>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f040 80aa 	bne.w	8002f50 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 8002dfc:	4b56      	ldr	r3, [pc, #344]	; (8002f58 <SEGGER_SYSVIEW_Start+0x16c>)
 8002dfe:	2201      	movs	r2, #1
 8002e00:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8002e02:	f3ef 8311 	mrs	r3, BASEPRI
 8002e06:	f04f 0120 	mov.w	r1, #32
 8002e0a:	f381 8811 	msr	BASEPRI, r1
 8002e0e:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8002e10:	220a      	movs	r2, #10
 8002e12:	4952      	ldr	r1, [pc, #328]	; (8002f5c <SEGGER_SYSVIEW_Start+0x170>)
 8002e14:	2001      	movs	r0, #1
 8002e16:	f7ff faf7 	bl	8002408 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8002e20:	200a      	movs	r0, #10
 8002e22:	f7ff fe9d 	bl	8002b60 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002e26:	f3ef 8311 	mrs	r3, BASEPRI
 8002e2a:	f04f 0120 	mov.w	r1, #32
 8002e2e:	f381 8811 	msr	BASEPRI, r1
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	484a      	ldr	r0, [pc, #296]	; (8002f60 <SEGGER_SYSVIEW_Start+0x174>)
 8002e36:	f7ff fc98 	bl	800276a <_PreparePacket>
 8002e3a:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e44:	4b44      	ldr	r3, [pc, #272]	; (8002f58 <SEGGER_SYSVIEW_Start+0x16c>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e4a:	e00b      	b.n	8002e64 <SEGGER_SYSVIEW_Start+0x78>
 8002e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e52:	1c59      	adds	r1, r3, #1
 8002e54:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002e56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	701a      	strb	r2, [r3, #0]
 8002e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e60:	09db      	lsrs	r3, r3, #7
 8002e62:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e66:	2b7f      	cmp	r3, #127	; 0x7f
 8002e68:	d8f0      	bhi.n	8002e4c <SEGGER_SYSVIEW_Start+0x60>
 8002e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	701a      	strb	r2, [r3, #0]
 8002e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e78:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7e:	4b36      	ldr	r3, [pc, #216]	; (8002f58 <SEGGER_SYSVIEW_Start+0x16c>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	623b      	str	r3, [r7, #32]
 8002e84:	e00b      	b.n	8002e9e <SEGGER_SYSVIEW_Start+0xb2>
 8002e86:	6a3b      	ldr	r3, [r7, #32]
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	1c59      	adds	r1, r3, #1
 8002e8e:	6279      	str	r1, [r7, #36]	; 0x24
 8002e90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e94:	b2d2      	uxtb	r2, r2
 8002e96:	701a      	strb	r2, [r3, #0]
 8002e98:	6a3b      	ldr	r3, [r7, #32]
 8002e9a:	09db      	lsrs	r3, r3, #7
 8002e9c:	623b      	str	r3, [r7, #32]
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
 8002ea0:	2b7f      	cmp	r3, #127	; 0x7f
 8002ea2:	d8f0      	bhi.n	8002e86 <SEGGER_SYSVIEW_Start+0x9a>
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	1c5a      	adds	r2, r3, #1
 8002ea8:	627a      	str	r2, [r7, #36]	; 0x24
 8002eaa:	6a3a      	ldr	r2, [r7, #32]
 8002eac:	b2d2      	uxtb	r2, r2
 8002eae:	701a      	strb	r2, [r3, #0]
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	61fb      	str	r3, [r7, #28]
 8002eb8:	4b27      	ldr	r3, [pc, #156]	; (8002f58 <SEGGER_SYSVIEW_Start+0x16c>)
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	61bb      	str	r3, [r7, #24]
 8002ebe:	e00b      	b.n	8002ed8 <SEGGER_SYSVIEW_Start+0xec>
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	1c59      	adds	r1, r3, #1
 8002ec8:	61f9      	str	r1, [r7, #28]
 8002eca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	701a      	strb	r2, [r3, #0]
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	09db      	lsrs	r3, r3, #7
 8002ed6:	61bb      	str	r3, [r7, #24]
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	2b7f      	cmp	r3, #127	; 0x7f
 8002edc:	d8f0      	bhi.n	8002ec0 <SEGGER_SYSVIEW_Start+0xd4>
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	1c5a      	adds	r2, r3, #1
 8002ee2:	61fa      	str	r2, [r7, #28]
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	701a      	strb	r2, [r3, #0]
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	617b      	str	r3, [r7, #20]
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	613b      	str	r3, [r7, #16]
 8002ef6:	e00b      	b.n	8002f10 <SEGGER_SYSVIEW_Start+0x124>
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	1c59      	adds	r1, r3, #1
 8002f00:	6179      	str	r1, [r7, #20]
 8002f02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	701a      	strb	r2, [r3, #0]
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	09db      	lsrs	r3, r3, #7
 8002f0e:	613b      	str	r3, [r7, #16]
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	2b7f      	cmp	r3, #127	; 0x7f
 8002f14:	d8f0      	bhi.n	8002ef8 <SEGGER_SYSVIEW_Start+0x10c>
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	617a      	str	r2, [r7, #20]
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	701a      	strb	r2, [r3, #0]
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002f26:	2218      	movs	r2, #24
 8002f28:	6839      	ldr	r1, [r7, #0]
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7ff fcf6 	bl	800291c <_SendPacket>
      RECORD_END();
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002f36:	4b08      	ldr	r3, [pc, #32]	; (8002f58 <SEGGER_SYSVIEW_Start+0x16c>)
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d002      	beq.n	8002f44 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 8002f3e:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <SEGGER_SYSVIEW_Start+0x16c>)
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8002f44:	f000 f9ec 	bl	8003320 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8002f48:	f000 f9b2 	bl	80032b0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8002f4c:	f000 fc8a 	bl	8003864 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8002f50:	bf00      	nop
 8002f52:	3730      	adds	r7, #48	; 0x30
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	20015288 	.word	0x20015288
 8002f5c:	080049c4 	.word	0x080049c4
 8002f60:	200152b8 	.word	0x200152b8

08002f64 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002f6a:	f3ef 8311 	mrs	r3, BASEPRI
 8002f6e:	f04f 0120 	mov.w	r1, #32
 8002f72:	f381 8811 	msr	BASEPRI, r1
 8002f76:	607b      	str	r3, [r7, #4]
 8002f78:	480b      	ldr	r0, [pc, #44]	; (8002fa8 <SEGGER_SYSVIEW_Stop+0x44>)
 8002f7a:	f7ff fbf6 	bl	800276a <_PreparePacket>
 8002f7e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8002f80:	4b0a      	ldr	r3, [pc, #40]	; (8002fac <SEGGER_SYSVIEW_Stop+0x48>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d007      	beq.n	8002f98 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8002f88:	220b      	movs	r2, #11
 8002f8a:	6839      	ldr	r1, [r7, #0]
 8002f8c:	6838      	ldr	r0, [r7, #0]
 8002f8e:	f7ff fcc5 	bl	800291c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8002f92:	4b06      	ldr	r3, [pc, #24]	; (8002fac <SEGGER_SYSVIEW_Stop+0x48>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f383 8811 	msr	BASEPRI, r3
}
 8002f9e:	bf00      	nop
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	200152b8 	.word	0x200152b8
 8002fac:	20015288 	.word	0x20015288

08002fb0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08c      	sub	sp, #48	; 0x30
 8002fb4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002fb6:	f3ef 8311 	mrs	r3, BASEPRI
 8002fba:	f04f 0120 	mov.w	r1, #32
 8002fbe:	f381 8811 	msr	BASEPRI, r1
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	4845      	ldr	r0, [pc, #276]	; (80030dc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8002fc6:	f7ff fbd0 	bl	800276a <_PreparePacket>
 8002fca:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fd4:	4b42      	ldr	r3, [pc, #264]	; (80030e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fda:	e00b      	b.n	8002ff4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8002fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe2:	1c59      	adds	r1, r3, #1
 8002fe4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002fe6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	701a      	strb	r2, [r3, #0]
 8002fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff0:	09db      	lsrs	r3, r3, #7
 8002ff2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff6:	2b7f      	cmp	r3, #127	; 0x7f
 8002ff8:	d8f0      	bhi.n	8002fdc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8002ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffc:	1c5a      	adds	r2, r3, #1
 8002ffe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003000:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	701a      	strb	r2, [r3, #0]
 8003006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003008:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	627b      	str	r3, [r7, #36]	; 0x24
 800300e:	4b34      	ldr	r3, [pc, #208]	; (80030e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	623b      	str	r3, [r7, #32]
 8003014:	e00b      	b.n	800302e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003016:	6a3b      	ldr	r3, [r7, #32]
 8003018:	b2da      	uxtb	r2, r3
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	1c59      	adds	r1, r3, #1
 800301e:	6279      	str	r1, [r7, #36]	; 0x24
 8003020:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003024:	b2d2      	uxtb	r2, r2
 8003026:	701a      	strb	r2, [r3, #0]
 8003028:	6a3b      	ldr	r3, [r7, #32]
 800302a:	09db      	lsrs	r3, r3, #7
 800302c:	623b      	str	r3, [r7, #32]
 800302e:	6a3b      	ldr	r3, [r7, #32]
 8003030:	2b7f      	cmp	r3, #127	; 0x7f
 8003032:	d8f0      	bhi.n	8003016 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	1c5a      	adds	r2, r3, #1
 8003038:	627a      	str	r2, [r7, #36]	; 0x24
 800303a:	6a3a      	ldr	r2, [r7, #32]
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	701a      	strb	r2, [r3, #0]
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	61fb      	str	r3, [r7, #28]
 8003048:	4b25      	ldr	r3, [pc, #148]	; (80030e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	61bb      	str	r3, [r7, #24]
 800304e:	e00b      	b.n	8003068 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	b2da      	uxtb	r2, r3
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	1c59      	adds	r1, r3, #1
 8003058:	61f9      	str	r1, [r7, #28]
 800305a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	701a      	strb	r2, [r3, #0]
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	09db      	lsrs	r3, r3, #7
 8003066:	61bb      	str	r3, [r7, #24]
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	2b7f      	cmp	r3, #127	; 0x7f
 800306c:	d8f0      	bhi.n	8003050 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	61fa      	str	r2, [r7, #28]
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	701a      	strb	r2, [r3, #0]
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	617b      	str	r3, [r7, #20]
 8003082:	2302      	movs	r3, #2
 8003084:	613b      	str	r3, [r7, #16]
 8003086:	e00b      	b.n	80030a0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	b2da      	uxtb	r2, r3
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	1c59      	adds	r1, r3, #1
 8003090:	6179      	str	r1, [r7, #20]
 8003092:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	701a      	strb	r2, [r3, #0]
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	09db      	lsrs	r3, r3, #7
 800309e:	613b      	str	r3, [r7, #16]
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	2b7f      	cmp	r3, #127	; 0x7f
 80030a4:	d8f0      	bhi.n	8003088 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	1c5a      	adds	r2, r3, #1
 80030aa:	617a      	str	r2, [r7, #20]
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	701a      	strb	r2, [r3, #0]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80030b6:	2218      	movs	r2, #24
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	68b8      	ldr	r0, [r7, #8]
 80030bc:	f7ff fc2e 	bl	800291c <_SendPacket>
  RECORD_END();
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80030c6:	4b06      	ldr	r3, [pc, #24]	; (80030e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80030c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d002      	beq.n	80030d4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80030ce:	4b04      	ldr	r3, [pc, #16]	; (80030e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	4798      	blx	r3
  }
}
 80030d4:	bf00      	nop
 80030d6:	3730      	adds	r7, #48	; 0x30
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	200152b8 	.word	0x200152b8
 80030e0:	20015288 	.word	0x20015288

080030e4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b092      	sub	sp, #72	; 0x48
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80030ec:	f3ef 8311 	mrs	r3, BASEPRI
 80030f0:	f04f 0120 	mov.w	r1, #32
 80030f4:	f381 8811 	msr	BASEPRI, r1
 80030f8:	617b      	str	r3, [r7, #20]
 80030fa:	486b      	ldr	r0, [pc, #428]	; (80032a8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80030fc:	f7ff fb35 	bl	800276a <_PreparePacket>
 8003100:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	647b      	str	r3, [r7, #68]	; 0x44
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	4b67      	ldr	r3, [pc, #412]	; (80032ac <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	089b      	lsrs	r3, r3, #2
 8003116:	643b      	str	r3, [r7, #64]	; 0x40
 8003118:	e00b      	b.n	8003132 <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 800311a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800311c:	b2da      	uxtb	r2, r3
 800311e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003120:	1c59      	adds	r1, r3, #1
 8003122:	6479      	str	r1, [r7, #68]	; 0x44
 8003124:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	701a      	strb	r2, [r3, #0]
 800312c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800312e:	09db      	lsrs	r3, r3, #7
 8003130:	643b      	str	r3, [r7, #64]	; 0x40
 8003132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003134:	2b7f      	cmp	r3, #127	; 0x7f
 8003136:	d8f0      	bhi.n	800311a <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8003138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800313a:	1c5a      	adds	r2, r3, #1
 800313c:	647a      	str	r2, [r7, #68]	; 0x44
 800313e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003140:	b2d2      	uxtb	r2, r2
 8003142:	701a      	strb	r2, [r3, #0]
 8003144:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003146:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	63bb      	str	r3, [r7, #56]	; 0x38
 8003152:	e00b      	b.n	800316c <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8003154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003156:	b2da      	uxtb	r2, r3
 8003158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800315a:	1c59      	adds	r1, r3, #1
 800315c:	63f9      	str	r1, [r7, #60]	; 0x3c
 800315e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003162:	b2d2      	uxtb	r2, r2
 8003164:	701a      	strb	r2, [r3, #0]
 8003166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003168:	09db      	lsrs	r3, r3, #7
 800316a:	63bb      	str	r3, [r7, #56]	; 0x38
 800316c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316e:	2b7f      	cmp	r3, #127	; 0x7f
 8003170:	d8f0      	bhi.n	8003154 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 8003172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003174:	1c5a      	adds	r2, r3, #1
 8003176:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003178:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	701a      	strb	r2, [r3, #0]
 800317e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003180:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2220      	movs	r2, #32
 8003188:	4619      	mov	r1, r3
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f7ff faa0 	bl	80026d0 <_EncodeStr>
 8003190:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003192:	2209      	movs	r2, #9
 8003194:	68f9      	ldr	r1, [r7, #12]
 8003196:	6938      	ldr	r0, [r7, #16]
 8003198:	f7ff fbc0 	bl	800291c <_SendPacket>
  //
  pPayload = pPayloadStart;
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	637b      	str	r3, [r7, #52]	; 0x34
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	4b40      	ldr	r3, [pc, #256]	; (80032ac <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	089b      	lsrs	r3, r3, #2
 80031b0:	633b      	str	r3, [r7, #48]	; 0x30
 80031b2:	e00b      	b.n	80031cc <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 80031b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ba:	1c59      	adds	r1, r3, #1
 80031bc:	6379      	str	r1, [r7, #52]	; 0x34
 80031be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	701a      	strb	r2, [r3, #0]
 80031c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c8:	09db      	lsrs	r3, r3, #7
 80031ca:	633b      	str	r3, [r7, #48]	; 0x30
 80031cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ce:	2b7f      	cmp	r3, #127	; 0x7f
 80031d0:	d8f0      	bhi.n	80031b4 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 80031d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031d4:	1c5a      	adds	r2, r3, #1
 80031d6:	637a      	str	r2, [r7, #52]	; 0x34
 80031d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031da:	b2d2      	uxtb	r2, r2
 80031dc:	701a      	strb	r2, [r3, #0]
 80031de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80031ec:	e00b      	b.n	8003206 <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 80031ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f4:	1c59      	adds	r1, r3, #1
 80031f6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80031f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	701a      	strb	r2, [r3, #0]
 8003200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003202:	09db      	lsrs	r3, r3, #7
 8003204:	62bb      	str	r3, [r7, #40]	; 0x28
 8003206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003208:	2b7f      	cmp	r3, #127	; 0x7f
 800320a:	d8f0      	bhi.n	80031ee <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 800320c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320e:	1c5a      	adds	r2, r3, #1
 8003210:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003214:	b2d2      	uxtb	r2, r2
 8003216:	701a      	strb	r2, [r3, #0]
 8003218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800321a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	627b      	str	r3, [r7, #36]	; 0x24
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	623b      	str	r3, [r7, #32]
 8003226:	e00b      	b.n	8003240 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8003228:	6a3b      	ldr	r3, [r7, #32]
 800322a:	b2da      	uxtb	r2, r3
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	1c59      	adds	r1, r3, #1
 8003230:	6279      	str	r1, [r7, #36]	; 0x24
 8003232:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	701a      	strb	r2, [r3, #0]
 800323a:	6a3b      	ldr	r3, [r7, #32]
 800323c:	09db      	lsrs	r3, r3, #7
 800323e:	623b      	str	r3, [r7, #32]
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	2b7f      	cmp	r3, #127	; 0x7f
 8003244:	d8f0      	bhi.n	8003228 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	1c5a      	adds	r2, r3, #1
 800324a:	627a      	str	r2, [r7, #36]	; 0x24
 800324c:	6a3a      	ldr	r2, [r7, #32]
 800324e:	b2d2      	uxtb	r2, r2
 8003250:	701a      	strb	r2, [r3, #0]
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	61fb      	str	r3, [r7, #28]
 800325a:	2300      	movs	r3, #0
 800325c:	61bb      	str	r3, [r7, #24]
 800325e:	e00b      	b.n	8003278 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	b2da      	uxtb	r2, r3
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	1c59      	adds	r1, r3, #1
 8003268:	61f9      	str	r1, [r7, #28]
 800326a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800326e:	b2d2      	uxtb	r2, r2
 8003270:	701a      	strb	r2, [r3, #0]
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	09db      	lsrs	r3, r3, #7
 8003276:	61bb      	str	r3, [r7, #24]
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	2b7f      	cmp	r3, #127	; 0x7f
 800327c:	d8f0      	bhi.n	8003260 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	61fa      	str	r2, [r7, #28]
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	701a      	strb	r2, [r3, #0]
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800328e:	2215      	movs	r2, #21
 8003290:	68f9      	ldr	r1, [r7, #12]
 8003292:	6938      	ldr	r0, [r7, #16]
 8003294:	f7ff fb42 	bl	800291c <_SendPacket>
  RECORD_END();
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	f383 8811 	msr	BASEPRI, r3
}
 800329e:	bf00      	nop
 80032a0:	3748      	adds	r7, #72	; 0x48
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	200152b8 	.word	0x200152b8
 80032ac:	20015288 	.word	0x20015288

080032b0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80032b4:	4b07      	ldr	r3, [pc, #28]	; (80032d4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d008      	beq.n	80032ce <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80032bc:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80032c6:	4b03      	ldr	r3, [pc, #12]	; (80032d4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	4798      	blx	r3
  }
}
 80032ce:	bf00      	nop
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	20015288 	.word	0x20015288

080032d8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80032e0:	f3ef 8311 	mrs	r3, BASEPRI
 80032e4:	f04f 0120 	mov.w	r1, #32
 80032e8:	f381 8811 	msr	BASEPRI, r1
 80032ec:	617b      	str	r3, [r7, #20]
 80032ee:	480b      	ldr	r0, [pc, #44]	; (800331c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80032f0:	f7ff fa3b 	bl	800276a <_PreparePacket>
 80032f4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80032f6:	2280      	movs	r2, #128	; 0x80
 80032f8:	6879      	ldr	r1, [r7, #4]
 80032fa:	6938      	ldr	r0, [r7, #16]
 80032fc:	f7ff f9e8 	bl	80026d0 <_EncodeStr>
 8003300:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8003302:	220e      	movs	r2, #14
 8003304:	68f9      	ldr	r1, [r7, #12]
 8003306:	6938      	ldr	r0, [r7, #16]
 8003308:	f7ff fb08 	bl	800291c <_SendPacket>
  RECORD_END();
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	f383 8811 	msr	BASEPRI, r3
}
 8003312:	bf00      	nop
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	200152b8 	.word	0x200152b8

08003320 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8003320:	b590      	push	{r4, r7, lr}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8003326:	4b14      	ldr	r3, [pc, #80]	; (8003378 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d019      	beq.n	8003362 <SEGGER_SYSVIEW_RecordSystime+0x42>
 800332e:	4b12      	ldr	r3, [pc, #72]	; (8003378 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d014      	beq.n	8003362 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8003338:	4b0f      	ldr	r3, [pc, #60]	; (8003378 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4798      	blx	r3
 8003340:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003344:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8003346:	e9d7 1200 	ldrd	r1, r2, [r7]
 800334a:	f04f 0300 	mov.w	r3, #0
 800334e:	f04f 0400 	mov.w	r4, #0
 8003352:	0013      	movs	r3, r2
 8003354:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003356:	461a      	mov	r2, r3
 8003358:	4601      	mov	r1, r0
 800335a:	200d      	movs	r0, #13
 800335c:	f7ff fc5a 	bl	8002c14 <SEGGER_SYSVIEW_RecordU32x2>
 8003360:	e005      	b.n	800336e <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8003362:	4b06      	ldr	r3, [pc, #24]	; (800337c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4619      	mov	r1, r3
 8003368:	200c      	movs	r0, #12
 800336a:	f7ff fc17 	bl	8002b9c <SEGGER_SYSVIEW_RecordU32>
  }
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	bd90      	pop	{r4, r7, pc}
 8003376:	bf00      	nop
 8003378:	20015288 	.word	0x20015288
 800337c:	e0001004 	.word	0xe0001004

08003380 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003386:	f3ef 8311 	mrs	r3, BASEPRI
 800338a:	f04f 0120 	mov.w	r1, #32
 800338e:	f381 8811 	msr	BASEPRI, r1
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	4819      	ldr	r0, [pc, #100]	; (80033fc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8003396:	f7ff f9e8 	bl	800276a <_PreparePacket>
 800339a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80033a0:	4b17      	ldr	r3, [pc, #92]	; (8003400 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033a8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	617b      	str	r3, [r7, #20]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	613b      	str	r3, [r7, #16]
 80033b2:	e00b      	b.n	80033cc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	1c59      	adds	r1, r3, #1
 80033bc:	6179      	str	r1, [r7, #20]
 80033be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	701a      	strb	r2, [r3, #0]
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	09db      	lsrs	r3, r3, #7
 80033ca:	613b      	str	r3, [r7, #16]
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	2b7f      	cmp	r3, #127	; 0x7f
 80033d0:	d8f0      	bhi.n	80033b4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	617a      	str	r2, [r7, #20]
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	b2d2      	uxtb	r2, r2
 80033dc:	701a      	strb	r2, [r3, #0]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80033e2:	2202      	movs	r2, #2
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	68b8      	ldr	r0, [r7, #8]
 80033e8:	f7ff fa98 	bl	800291c <_SendPacket>
  RECORD_END();
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f383 8811 	msr	BASEPRI, r3
}
 80033f2:	bf00      	nop
 80033f4:	3718      	adds	r7, #24
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	200152b8 	.word	0x200152b8
 8003400:	e000ed04 	.word	0xe000ed04

08003404 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800340a:	f3ef 8311 	mrs	r3, BASEPRI
 800340e:	f04f 0120 	mov.w	r1, #32
 8003412:	f381 8811 	msr	BASEPRI, r1
 8003416:	607b      	str	r3, [r7, #4]
 8003418:	4807      	ldr	r0, [pc, #28]	; (8003438 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800341a:	f7ff f9a6 	bl	800276a <_PreparePacket>
 800341e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8003420:	2203      	movs	r2, #3
 8003422:	6839      	ldr	r1, [r7, #0]
 8003424:	6838      	ldr	r0, [r7, #0]
 8003426:	f7ff fa79 	bl	800291c <_SendPacket>
  RECORD_END();
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f383 8811 	msr	BASEPRI, r3
}
 8003430:	bf00      	nop
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	200152b8 	.word	0x200152b8

0800343c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003442:	f3ef 8311 	mrs	r3, BASEPRI
 8003446:	f04f 0120 	mov.w	r1, #32
 800344a:	f381 8811 	msr	BASEPRI, r1
 800344e:	607b      	str	r3, [r7, #4]
 8003450:	4807      	ldr	r0, [pc, #28]	; (8003470 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8003452:	f7ff f98a 	bl	800276a <_PreparePacket>
 8003456:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8003458:	2212      	movs	r2, #18
 800345a:	6839      	ldr	r1, [r7, #0]
 800345c:	6838      	ldr	r0, [r7, #0]
 800345e:	f7ff fa5d 	bl	800291c <_SendPacket>
  RECORD_END();
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f383 8811 	msr	BASEPRI, r3
}
 8003468:	bf00      	nop
 800346a:	3708      	adds	r7, #8
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	200152b8 	.word	0x200152b8

08003474 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800347a:	f3ef 8311 	mrs	r3, BASEPRI
 800347e:	f04f 0120 	mov.w	r1, #32
 8003482:	f381 8811 	msr	BASEPRI, r1
 8003486:	607b      	str	r3, [r7, #4]
 8003488:	4807      	ldr	r0, [pc, #28]	; (80034a8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800348a:	f7ff f96e 	bl	800276a <_PreparePacket>
 800348e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8003490:	2211      	movs	r2, #17
 8003492:	6839      	ldr	r1, [r7, #0]
 8003494:	6838      	ldr	r0, [r7, #0]
 8003496:	f7ff fa41 	bl	800291c <_SendPacket>
  RECORD_END();
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f383 8811 	msr	BASEPRI, r3
}
 80034a0:	bf00      	nop
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	200152b8 	.word	0x200152b8

080034ac <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b088      	sub	sp, #32
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80034b4:	f3ef 8311 	mrs	r3, BASEPRI
 80034b8:	f04f 0120 	mov.w	r1, #32
 80034bc:	f381 8811 	msr	BASEPRI, r1
 80034c0:	617b      	str	r3, [r7, #20]
 80034c2:	481a      	ldr	r0, [pc, #104]	; (800352c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80034c4:	f7ff f951 	bl	800276a <_PreparePacket>
 80034c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80034ce:	4b18      	ldr	r3, [pc, #96]	; (8003530 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	089b      	lsrs	r3, r3, #2
 80034d8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	61fb      	str	r3, [r7, #28]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	61bb      	str	r3, [r7, #24]
 80034e2:	e00b      	b.n	80034fc <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	1c59      	adds	r1, r3, #1
 80034ec:	61f9      	str	r1, [r7, #28]
 80034ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	701a      	strb	r2, [r3, #0]
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	09db      	lsrs	r3, r3, #7
 80034fa:	61bb      	str	r3, [r7, #24]
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	2b7f      	cmp	r3, #127	; 0x7f
 8003500:	d8f0      	bhi.n	80034e4 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	1c5a      	adds	r2, r3, #1
 8003506:	61fa      	str	r2, [r7, #28]
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	701a      	strb	r2, [r3, #0]
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8003512:	2208      	movs	r2, #8
 8003514:	68f9      	ldr	r1, [r7, #12]
 8003516:	6938      	ldr	r0, [r7, #16]
 8003518:	f7ff fa00 	bl	800291c <_SendPacket>
  RECORD_END();
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f383 8811 	msr	BASEPRI, r3
}
 8003522:	bf00      	nop
 8003524:	3720      	adds	r7, #32
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	200152b8 	.word	0x200152b8
 8003530:	20015288 	.word	0x20015288

08003534 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8003534:	b580      	push	{r7, lr}
 8003536:	b088      	sub	sp, #32
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800353c:	f3ef 8311 	mrs	r3, BASEPRI
 8003540:	f04f 0120 	mov.w	r1, #32
 8003544:	f381 8811 	msr	BASEPRI, r1
 8003548:	617b      	str	r3, [r7, #20]
 800354a:	481a      	ldr	r0, [pc, #104]	; (80035b4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800354c:	f7ff f90d 	bl	800276a <_PreparePacket>
 8003550:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003556:	4b18      	ldr	r3, [pc, #96]	; (80035b8 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	089b      	lsrs	r3, r3, #2
 8003560:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	61fb      	str	r3, [r7, #28]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	61bb      	str	r3, [r7, #24]
 800356a:	e00b      	b.n	8003584 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	b2da      	uxtb	r2, r3
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	1c59      	adds	r1, r3, #1
 8003574:	61f9      	str	r1, [r7, #28]
 8003576:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800357a:	b2d2      	uxtb	r2, r2
 800357c:	701a      	strb	r2, [r3, #0]
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	09db      	lsrs	r3, r3, #7
 8003582:	61bb      	str	r3, [r7, #24]
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	2b7f      	cmp	r3, #127	; 0x7f
 8003588:	d8f0      	bhi.n	800356c <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	1c5a      	adds	r2, r3, #1
 800358e:	61fa      	str	r2, [r7, #28]
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	701a      	strb	r2, [r3, #0]
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800359a:	2204      	movs	r2, #4
 800359c:	68f9      	ldr	r1, [r7, #12]
 800359e:	6938      	ldr	r0, [r7, #16]
 80035a0:	f7ff f9bc 	bl	800291c <_SendPacket>
  RECORD_END();
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f383 8811 	msr	BASEPRI, r3
}
 80035aa:	bf00      	nop
 80035ac:	3720      	adds	r7, #32
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	200152b8 	.word	0x200152b8
 80035b8:	20015288 	.word	0x20015288

080035bc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80035bc:	b580      	push	{r7, lr}
 80035be:	b088      	sub	sp, #32
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80035c4:	f3ef 8311 	mrs	r3, BASEPRI
 80035c8:	f04f 0120 	mov.w	r1, #32
 80035cc:	f381 8811 	msr	BASEPRI, r1
 80035d0:	617b      	str	r3, [r7, #20]
 80035d2:	481a      	ldr	r0, [pc, #104]	; (800363c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80035d4:	f7ff f8c9 	bl	800276a <_PreparePacket>
 80035d8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80035de:	4b18      	ldr	r3, [pc, #96]	; (8003640 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	089b      	lsrs	r3, r3, #2
 80035e8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	61fb      	str	r3, [r7, #28]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	61bb      	str	r3, [r7, #24]
 80035f2:	e00b      	b.n	800360c <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	1c59      	adds	r1, r3, #1
 80035fc:	61f9      	str	r1, [r7, #28]
 80035fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	701a      	strb	r2, [r3, #0]
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	09db      	lsrs	r3, r3, #7
 800360a:	61bb      	str	r3, [r7, #24]
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	2b7f      	cmp	r3, #127	; 0x7f
 8003610:	d8f0      	bhi.n	80035f4 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	61fa      	str	r2, [r7, #28]
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	701a      	strb	r2, [r3, #0]
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8003622:	2206      	movs	r2, #6
 8003624:	68f9      	ldr	r1, [r7, #12]
 8003626:	6938      	ldr	r0, [r7, #16]
 8003628:	f7ff f978 	bl	800291c <_SendPacket>
  RECORD_END();
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f383 8811 	msr	BASEPRI, r3
}
 8003632:	bf00      	nop
 8003634:	3720      	adds	r7, #32
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	200152b8 	.word	0x200152b8
 8003640:	20015288 	.word	0x20015288

08003644 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8003644:	b580      	push	{r7, lr}
 8003646:	b08a      	sub	sp, #40	; 0x28
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800364e:	f3ef 8311 	mrs	r3, BASEPRI
 8003652:	f04f 0120 	mov.w	r1, #32
 8003656:	f381 8811 	msr	BASEPRI, r1
 800365a:	617b      	str	r3, [r7, #20]
 800365c:	4827      	ldr	r0, [pc, #156]	; (80036fc <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800365e:	f7ff f884 	bl	800276a <_PreparePacket>
 8003662:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003668:	4b25      	ldr	r3, [pc, #148]	; (8003700 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	089b      	lsrs	r3, r3, #2
 8003672:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	627b      	str	r3, [r7, #36]	; 0x24
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	623b      	str	r3, [r7, #32]
 800367c:	e00b      	b.n	8003696 <SEGGER_SYSVIEW_OnTaskStopReady+0x52>
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	b2da      	uxtb	r2, r3
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	1c59      	adds	r1, r3, #1
 8003686:	6279      	str	r1, [r7, #36]	; 0x24
 8003688:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800368c:	b2d2      	uxtb	r2, r2
 800368e:	701a      	strb	r2, [r3, #0]
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	09db      	lsrs	r3, r3, #7
 8003694:	623b      	str	r3, [r7, #32]
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	2b7f      	cmp	r3, #127	; 0x7f
 800369a:	d8f0      	bhi.n	800367e <SEGGER_SYSVIEW_OnTaskStopReady+0x3a>
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	1c5a      	adds	r2, r3, #1
 80036a0:	627a      	str	r2, [r7, #36]	; 0x24
 80036a2:	6a3a      	ldr	r2, [r7, #32]
 80036a4:	b2d2      	uxtb	r2, r2
 80036a6:	701a      	strb	r2, [r3, #0]
 80036a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036aa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	61fb      	str	r3, [r7, #28]
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	61bb      	str	r3, [r7, #24]
 80036b4:	e00b      	b.n	80036ce <SEGGER_SYSVIEW_OnTaskStopReady+0x8a>
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	1c59      	adds	r1, r3, #1
 80036be:	61f9      	str	r1, [r7, #28]
 80036c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80036c4:	b2d2      	uxtb	r2, r2
 80036c6:	701a      	strb	r2, [r3, #0]
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	09db      	lsrs	r3, r3, #7
 80036cc:	61bb      	str	r3, [r7, #24]
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	2b7f      	cmp	r3, #127	; 0x7f
 80036d2:	d8f0      	bhi.n	80036b6 <SEGGER_SYSVIEW_OnTaskStopReady+0x72>
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	1c5a      	adds	r2, r3, #1
 80036d8:	61fa      	str	r2, [r7, #28]
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	b2d2      	uxtb	r2, r2
 80036de:	701a      	strb	r2, [r3, #0]
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80036e4:	2207      	movs	r2, #7
 80036e6:	68f9      	ldr	r1, [r7, #12]
 80036e8:	6938      	ldr	r0, [r7, #16]
 80036ea:	f7ff f917 	bl	800291c <_SendPacket>
  RECORD_END();
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f383 8811 	msr	BASEPRI, r3
}
 80036f4:	bf00      	nop
 80036f6:	3728      	adds	r7, #40	; 0x28
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	200152b8 	.word	0x200152b8
 8003700:	20015288 	.word	0x20015288

08003704 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800370c:	4b05      	ldr	r3, [pc, #20]	; (8003724 <SEGGER_SYSVIEW_ShrinkId+0x20>)
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	089b      	lsrs	r3, r3, #2
}
 8003716:	4618      	mov	r0, r3
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	20015288 	.word	0x20015288

08003728 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8003728:	b580      	push	{r7, lr}
 800372a:	b08c      	sub	sp, #48	; 0x30
 800372c:	af00      	add	r7, sp, #0
 800372e:	4603      	mov	r3, r0
 8003730:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8003732:	4b3b      	ldr	r3, [pc, #236]	; (8003820 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d06d      	beq.n	8003816 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800373a:	4b39      	ldr	r3, [pc, #228]	; (8003820 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8003740:	2300      	movs	r3, #0
 8003742:	62bb      	str	r3, [r7, #40]	; 0x28
 8003744:	e008      	b.n	8003758 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8003746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800374c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800374e:	2b00      	cmp	r3, #0
 8003750:	d007      	beq.n	8003762 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8003752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003754:	3301      	adds	r3, #1
 8003756:	62bb      	str	r3, [r7, #40]	; 0x28
 8003758:	79fb      	ldrb	r3, [r7, #7]
 800375a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800375c:	429a      	cmp	r2, r3
 800375e:	d3f2      	bcc.n	8003746 <SEGGER_SYSVIEW_SendModule+0x1e>
 8003760:	e000      	b.n	8003764 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8003762:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8003764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003766:	2b00      	cmp	r3, #0
 8003768:	d055      	beq.n	8003816 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800376a:	f3ef 8311 	mrs	r3, BASEPRI
 800376e:	f04f 0120 	mov.w	r1, #32
 8003772:	f381 8811 	msr	BASEPRI, r1
 8003776:	617b      	str	r3, [r7, #20]
 8003778:	482a      	ldr	r0, [pc, #168]	; (8003824 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800377a:	f7fe fff6 	bl	800276a <_PreparePacket>
 800377e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	627b      	str	r3, [r7, #36]	; 0x24
 8003788:	79fb      	ldrb	r3, [r7, #7]
 800378a:	623b      	str	r3, [r7, #32]
 800378c:	e00b      	b.n	80037a6 <SEGGER_SYSVIEW_SendModule+0x7e>
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	b2da      	uxtb	r2, r3
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	1c59      	adds	r1, r3, #1
 8003796:	6279      	str	r1, [r7, #36]	; 0x24
 8003798:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	701a      	strb	r2, [r3, #0]
 80037a0:	6a3b      	ldr	r3, [r7, #32]
 80037a2:	09db      	lsrs	r3, r3, #7
 80037a4:	623b      	str	r3, [r7, #32]
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	2b7f      	cmp	r3, #127	; 0x7f
 80037aa:	d8f0      	bhi.n	800378e <SEGGER_SYSVIEW_SendModule+0x66>
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ae:	1c5a      	adds	r2, r3, #1
 80037b0:	627a      	str	r2, [r7, #36]	; 0x24
 80037b2:	6a3a      	ldr	r2, [r7, #32]
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	701a      	strb	r2, [r3, #0]
 80037b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ba:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	61fb      	str	r3, [r7, #28]
 80037c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	61bb      	str	r3, [r7, #24]
 80037c6:	e00b      	b.n	80037e0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	1c59      	adds	r1, r3, #1
 80037d0:	61f9      	str	r1, [r7, #28]
 80037d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	701a      	strb	r2, [r3, #0]
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	09db      	lsrs	r3, r3, #7
 80037de:	61bb      	str	r3, [r7, #24]
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	2b7f      	cmp	r3, #127	; 0x7f
 80037e4:	d8f0      	bhi.n	80037c8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	1c5a      	adds	r2, r3, #1
 80037ea:	61fa      	str	r2, [r7, #28]
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	b2d2      	uxtb	r2, r2
 80037f0:	701a      	strb	r2, [r3, #0]
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80037f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2280      	movs	r2, #128	; 0x80
 80037fc:	4619      	mov	r1, r3
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f7fe ff66 	bl	80026d0 <_EncodeStr>
 8003804:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8003806:	2216      	movs	r2, #22
 8003808:	68f9      	ldr	r1, [r7, #12]
 800380a:	6938      	ldr	r0, [r7, #16]
 800380c:	f7ff f886 	bl	800291c <_SendPacket>
      RECORD_END();
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8003816:	bf00      	nop
 8003818:	3730      	adds	r7, #48	; 0x30
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	200152b0 	.word	0x200152b0
 8003824:	200152b8 	.word	0x200152b8

08003828 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800382e:	4b0c      	ldr	r3, [pc, #48]	; (8003860 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00f      	beq.n	8003856 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8003836:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d002      	beq.n	800384a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1f2      	bne.n	800383c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8003856:	bf00      	nop
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	200152b0 	.word	0x200152b0

08003864 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800386a:	f3ef 8311 	mrs	r3, BASEPRI
 800386e:	f04f 0120 	mov.w	r1, #32
 8003872:	f381 8811 	msr	BASEPRI, r1
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	4817      	ldr	r0, [pc, #92]	; (80038d8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800387a:	f7fe ff76 	bl	800276a <_PreparePacket>
 800387e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	617b      	str	r3, [r7, #20]
 8003888:	4b14      	ldr	r3, [pc, #80]	; (80038dc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	613b      	str	r3, [r7, #16]
 800388e:	e00b      	b.n	80038a8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	b2da      	uxtb	r2, r3
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	1c59      	adds	r1, r3, #1
 8003898:	6179      	str	r1, [r7, #20]
 800389a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	701a      	strb	r2, [r3, #0]
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	09db      	lsrs	r3, r3, #7
 80038a6:	613b      	str	r3, [r7, #16]
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	2b7f      	cmp	r3, #127	; 0x7f
 80038ac:	d8f0      	bhi.n	8003890 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	1c5a      	adds	r2, r3, #1
 80038b2:	617a      	str	r2, [r7, #20]
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	b2d2      	uxtb	r2, r2
 80038b8:	701a      	strb	r2, [r3, #0]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80038be:	221b      	movs	r2, #27
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	68b8      	ldr	r0, [r7, #8]
 80038c4:	f7ff f82a 	bl	800291c <_SendPacket>
  RECORD_END();
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f383 8811 	msr	BASEPRI, r3
}
 80038ce:	bf00      	nop
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	200152b8 	.word	0x200152b8
 80038dc:	200152b4 	.word	0x200152b4

080038e0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08a      	sub	sp, #40	; 0x28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80038e8:	f3ef 8311 	mrs	r3, BASEPRI
 80038ec:	f04f 0120 	mov.w	r1, #32
 80038f0:	f381 8811 	msr	BASEPRI, r1
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	4827      	ldr	r0, [pc, #156]	; (8003994 <SEGGER_SYSVIEW_Warn+0xb4>)
 80038f8:	f7fe ff37 	bl	800276a <_PreparePacket>
 80038fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80038fe:	2280      	movs	r2, #128	; 0x80
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	6938      	ldr	r0, [r7, #16]
 8003904:	f7fe fee4 	bl	80026d0 <_EncodeStr>
 8003908:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	627b      	str	r3, [r7, #36]	; 0x24
 800390e:	2301      	movs	r3, #1
 8003910:	623b      	str	r3, [r7, #32]
 8003912:	e00b      	b.n	800392c <SEGGER_SYSVIEW_Warn+0x4c>
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	b2da      	uxtb	r2, r3
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	1c59      	adds	r1, r3, #1
 800391c:	6279      	str	r1, [r7, #36]	; 0x24
 800391e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003922:	b2d2      	uxtb	r2, r2
 8003924:	701a      	strb	r2, [r3, #0]
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	09db      	lsrs	r3, r3, #7
 800392a:	623b      	str	r3, [r7, #32]
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	2b7f      	cmp	r3, #127	; 0x7f
 8003930:	d8f0      	bhi.n	8003914 <SEGGER_SYSVIEW_Warn+0x34>
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	627a      	str	r2, [r7, #36]	; 0x24
 8003938:	6a3a      	ldr	r2, [r7, #32]
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	701a      	strb	r2, [r3, #0]
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	61fb      	str	r3, [r7, #28]
 8003946:	2300      	movs	r3, #0
 8003948:	61bb      	str	r3, [r7, #24]
 800394a:	e00b      	b.n	8003964 <SEGGER_SYSVIEW_Warn+0x84>
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	b2da      	uxtb	r2, r3
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	1c59      	adds	r1, r3, #1
 8003954:	61f9      	str	r1, [r7, #28]
 8003956:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800395a:	b2d2      	uxtb	r2, r2
 800395c:	701a      	strb	r2, [r3, #0]
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	09db      	lsrs	r3, r3, #7
 8003962:	61bb      	str	r3, [r7, #24]
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	2b7f      	cmp	r3, #127	; 0x7f
 8003968:	d8f0      	bhi.n	800394c <SEGGER_SYSVIEW_Warn+0x6c>
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	1c5a      	adds	r2, r3, #1
 800396e:	61fa      	str	r2, [r7, #28]
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	701a      	strb	r2, [r3, #0]
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800397a:	221a      	movs	r2, #26
 800397c:	68f9      	ldr	r1, [r7, #12]
 800397e:	6938      	ldr	r0, [r7, #16]
 8003980:	f7fe ffcc 	bl	800291c <_SendPacket>
  RECORD_END();
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f383 8811 	msr	BASEPRI, r3
}
 800398a:	bf00      	nop
 800398c:	3728      	adds	r7, #40	; 0x28
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	200152b8 	.word	0x200152b8

08003998 <main>:

TaskHandle_t  xTaskHandle1 = NULL;
TaskHandle_t  xTaskHandle2 = NULL;

int main(void)
{
 8003998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800399a:	b083      	sub	sp, #12
 800399c:	af02      	add	r7, sp, #8
  DWT->CTRL |= (1 << 0);// Enable CYCCNT in DWT_CTRL for SEGGER
 800399e:	4b24      	ldr	r3, [pc, #144]	; (8003a30 <main+0x98>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a23      	ldr	r2, [pc, #140]	; (8003a30 <main+0x98>)
 80039a4:	f043 0301 	orr.w	r3, r3, #1
 80039a8:	6013      	str	r3, [r2, #0]
  //printf("\r\nThis is hello world \n\r");
  // To use the bare HSI clock, for this exercise, the PLL will be turned off
  RCC_DeInit();
 80039aa:	f7fc fdbd 	bl	8000528 <RCC_DeInit>
  // Then update the SystemCoreClock variable
  SystemCoreClockUpdate();
 80039ae:	f000 f9c3 	bl	8003d38 <SystemCoreClockUpdate>
  //Set the hardware peripherals
  prvSetupHardware();
 80039b2:	f000 f927 	bl	8003c04 <prvSetupHardware>

  sprintf(usr_msg,"\r\nThis is a test of Task Notifier \r\n");
 80039b6:	4b1f      	ldr	r3, [pc, #124]	; (8003a34 <main+0x9c>)
 80039b8:	4a1f      	ldr	r2, [pc, #124]	; (8003a38 <main+0xa0>)
 80039ba:	4614      	mov	r4, r2
 80039bc:	469c      	mov	ip, r3
 80039be:	f104 0e20 	add.w	lr, r4, #32
 80039c2:	4665      	mov	r5, ip
 80039c4:	4626      	mov	r6, r4
 80039c6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80039c8:	6028      	str	r0, [r5, #0]
 80039ca:	6069      	str	r1, [r5, #4]
 80039cc:	60aa      	str	r2, [r5, #8]
 80039ce:	60eb      	str	r3, [r5, #12]
 80039d0:	3410      	adds	r4, #16
 80039d2:	f10c 0c10 	add.w	ip, ip, #16
 80039d6:	4574      	cmp	r4, lr
 80039d8:	d1f3      	bne.n	80039c2 <main+0x2a>
 80039da:	4663      	mov	r3, ip
 80039dc:	4622      	mov	r2, r4
 80039de:	6810      	ldr	r0, [r2, #0]
 80039e0:	6018      	str	r0, [r3, #0]
 80039e2:	7912      	ldrb	r2, [r2, #4]
 80039e4:	711a      	strb	r2, [r3, #4]
  printmsg(usr_msg);
 80039e6:	4813      	ldr	r0, [pc, #76]	; (8003a34 <main+0x9c>)
 80039e8:	f000 f91c 	bl	8003c24 <printmsg>

  // Start Recording
  SEGGER_SYSVIEW_Conf();
 80039ec:	f7fe fb14 	bl	8002018 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80039f0:	f7ff f9fc 	bl	8002dec <SEGGER_SYSVIEW_Start>

  // Create the tasks
  xTaskCreate(LED_task_handler,
 80039f4:	4b11      	ldr	r3, [pc, #68]	; (8003a3c <main+0xa4>)
 80039f6:	9301      	str	r3, [sp, #4]
 80039f8:	2302      	movs	r3, #2
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	2300      	movs	r3, #0
 80039fe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003a02:	490f      	ldr	r1, [pc, #60]	; (8003a40 <main+0xa8>)
 8003a04:	480f      	ldr	r0, [pc, #60]	; (8003a44 <main+0xac>)
 8003a06:	f7fd f8db 	bl	8000bc0 <xTaskCreate>
							NULL,
							2,
							&xTaskHandle1);
  // Create the tasks

  xTaskCreate(button_task_handler,
 8003a0a:	4b0f      	ldr	r3, [pc, #60]	; (8003a48 <main+0xb0>)
 8003a0c:	9301      	str	r3, [sp, #4]
 8003a0e:	2302      	movs	r3, #2
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	2300      	movs	r3, #0
 8003a14:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003a18:	490c      	ldr	r1, [pc, #48]	; (8003a4c <main+0xb4>)
 8003a1a:	480d      	ldr	r0, [pc, #52]	; (8003a50 <main+0xb8>)
 8003a1c:	f7fd f8d0 	bl	8000bc0 <xTaskCreate>
							NULL,
							2,
							&xTaskHandle2);

  //Start the sheduler
  vTaskStartScheduler();
 8003a20:	f7fd fa2e 	bl	8000e80 <vTaskStartScheduler>
 8003a24:	2300      	movs	r3, #0
	//for(;;);
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3704      	adds	r7, #4
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	e0001000 	.word	0xe0001000
 8003a34:	2001545c 	.word	0x2001545c
 8003a38:	0800493c 	.word	0x0800493c
 8003a3c:	2001539c 	.word	0x2001539c
 8003a40:	08004964 	.word	0x08004964
 8003a44:	08003a55 	.word	0x08003a55
 8003a48:	200153a0 	.word	0x200153a0
 8003a4c:	08004970 	.word	0x08004970
 8003a50:	08003aa1 	.word	0x08003aa1

08003a54 <LED_task_handler>:

void LED_task_handler(void *params)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  static uint32_t current_notification_value = 0;
  while(1){
	  if (xTaskNotifyWait(0, 0, &current_notification_value, portMAX_DELAY) == pdTRUE){
 8003a5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a60:	4a0b      	ldr	r2, [pc, #44]	; (8003a90 <LED_task_handler+0x3c>)
 8003a62:	2100      	movs	r1, #0
 8003a64:	2000      	movs	r0, #0
 8003a66:	f7fd fd09 	bl	800147c <xTaskNotifyWait>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d1f5      	bne.n	8003a5c <LED_task_handler+0x8>

		  sprintf(usr_msg,"\r\nNotification is received : Button press count : %ld \r\n",current_notification_value);
 8003a70:	4b07      	ldr	r3, [pc, #28]	; (8003a90 <LED_task_handler+0x3c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	461a      	mov	r2, r3
 8003a76:	4907      	ldr	r1, [pc, #28]	; (8003a94 <LED_task_handler+0x40>)
 8003a78:	4807      	ldr	r0, [pc, #28]	; (8003a98 <LED_task_handler+0x44>)
 8003a7a:	f000 faf1 	bl	8004060 <siprintf>
		  printmsg(usr_msg);
 8003a7e:	4806      	ldr	r0, [pc, #24]	; (8003a98 <LED_task_handler+0x44>)
 8003a80:	f000 f8d0 	bl	8003c24 <printmsg>

		  GPIO_ToggleBits(GPIOB, GPIO_Pin_7);
 8003a84:	2180      	movs	r1, #128	; 0x80
 8003a86:	4805      	ldr	r0, [pc, #20]	; (8003a9c <LED_task_handler+0x48>)
 8003a88:	f7fc fcf3 	bl	8000472 <GPIO_ToggleBits>
	  if (xTaskNotifyWait(0, 0, &current_notification_value, portMAX_DELAY) == pdTRUE){
 8003a8c:	e7e6      	b.n	8003a5c <LED_task_handler+0x8>
 8003a8e:	bf00      	nop
 8003a90:	200153a4 	.word	0x200153a4
 8003a94:	08004980 	.word	0x08004980
 8003a98:	2001545c 	.word	0x2001545c
 8003a9c:	40020400 	.word	0x40020400

08003aa0 <button_task_handler>:
  }

}

void button_task_handler(void *params)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
	while(1){
	  if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13)){
 8003aa8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003aac:	4808      	ldr	r0, [pc, #32]	; (8003ad0 <button_task_handler+0x30>)
 8003aae:	f7fc fcc6 	bl	800043e <GPIO_ReadInputDataBit>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0f7      	beq.n	8003aa8 <button_task_handler+0x8>

		  rtosDelay(100);
 8003ab8:	2064      	movs	r0, #100	; 0x64
 8003aba:	f000 f80d 	bl	8003ad8 <rtosDelay>

		  xTaskNotify(xTaskHandle1,0x0,eIncrement);
 8003abe:	4b05      	ldr	r3, [pc, #20]	; (8003ad4 <button_task_handler+0x34>)
 8003ac0:	6818      	ldr	r0, [r3, #0]
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	f7fd fd3c 	bl	8001544 <xTaskGenericNotify>
	  if(GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13)){
 8003acc:	e7ec      	b.n	8003aa8 <button_task_handler+0x8>
 8003ace:	bf00      	nop
 8003ad0:	40020800 	.word	0x40020800
 8003ad4:	2001539c 	.word	0x2001539c

08003ad8 <rtosDelay>:
	  }
	}
}


void rtosDelay(uint32_t delay_ms){
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]

	uint32_t delay_ticks = (delay_ms * configTICK_RATE_HZ)/1000;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ae6:	fb02 f303 	mul.w	r3, r2, r3
 8003aea:	4a0a      	ldr	r2, [pc, #40]	; (8003b14 <rtosDelay+0x3c>)
 8003aec:	fba2 2303 	umull	r2, r3, r2, r3
 8003af0:	099b      	lsrs	r3, r3, #6
 8003af2:	60fb      	str	r3, [r7, #12]

	uint32_t current_tick_count = xTaskGetTickCount();
 8003af4:	f7fd fac8 	bl	8001088 <xTaskGetTickCount>
 8003af8:	60b8      	str	r0, [r7, #8]

	while(xTaskGetTickCount() < (current_tick_count + delay_ticks));
 8003afa:	bf00      	nop
 8003afc:	f7fd fac4 	bl	8001088 <xTaskGetTickCount>
 8003b00:	4601      	mov	r1, r0
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	4413      	add	r3, r2
 8003b08:	4299      	cmp	r1, r3
 8003b0a:	d3f7      	bcc.n	8003afc <rtosDelay+0x24>
}
 8003b0c:	bf00      	nop
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	10624dd3 	.word	0x10624dd3

08003b18 <prvSetupUART>:

static void prvSetupUART(void){
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef gpio_uart_pins;

	// Enable the clock for the USART3 and the GPIOD
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8003b1e:	2101      	movs	r1, #1
 8003b20:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003b24:	f7fc fe50 	bl	80007c8 <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8003b28:	2101      	movs	r1, #1
 8003b2a:	2008      	movs	r0, #8
 8003b2c:	f7fc fe2c 	bl	8000788 <RCC_AHB1PeriphClockCmd>

	//PD8 is TX, PD9 is RX
	gpio_uart_pins.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
 8003b30:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003b34:	613b      	str	r3, [r7, #16]
	gpio_uart_pins.GPIO_Mode = GPIO_Mode_AF;
 8003b36:	2302      	movs	r3, #2
 8003b38:	753b      	strb	r3, [r7, #20]
	gpio_uart_pins.GPIO_PuPd = GPIO_PuPd_UP;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	75fb      	strb	r3, [r7, #23]
	GPIO_Init(GPIOD, &gpio_uart_pins);
 8003b3e:	f107 0310 	add.w	r3, r7, #16
 8003b42:	4619      	mov	r1, r3
 8003b44:	4813      	ldr	r0, [pc, #76]	; (8003b94 <prvSetupUART+0x7c>)
 8003b46:	f7fc fbec 	bl	8000322 <GPIO_Init>

	// AF Mode settings
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_USART3);// PD8
 8003b4a:	2207      	movs	r2, #7
 8003b4c:	2108      	movs	r1, #8
 8003b4e:	4811      	ldr	r0, [pc, #68]	; (8003b94 <prvSetupUART+0x7c>)
 8003b50:	f7fc fca1 	bl	8000496 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_USART3);// PD9
 8003b54:	2207      	movs	r2, #7
 8003b56:	2109      	movs	r1, #9
 8003b58:	480e      	ldr	r0, [pc, #56]	; (8003b94 <prvSetupUART+0x7c>)
 8003b5a:	f7fc fc9c 	bl	8000496 <GPIO_PinAFConfig>

	// Initialize the USART3
	USART_InitTypeDef uart3_init;
	uart3_init.USART_BaudRate = 115200;
 8003b5e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003b62:	603b      	str	r3, [r7, #0]
	uart3_init.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8003b64:	2300      	movs	r3, #0
 8003b66:	81bb      	strh	r3, [r7, #12]
	uart3_init.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8003b68:	230c      	movs	r3, #12
 8003b6a:	817b      	strh	r3, [r7, #10]
	uart3_init.USART_Parity = USART_Parity_No;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	813b      	strh	r3, [r7, #8]
	uart3_init.USART_StopBits = USART_StopBits_1;
 8003b70:	2300      	movs	r3, #0
 8003b72:	80fb      	strh	r3, [r7, #6]
	uart3_init.USART_WordLength = USART_WordLength_8b;
 8003b74:	2300      	movs	r3, #0
 8003b76:	80bb      	strh	r3, [r7, #4]

	USART_Init(USART3, &uart3_init);
 8003b78:	463b      	mov	r3, r7
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	4806      	ldr	r0, [pc, #24]	; (8003b98 <prvSetupUART+0x80>)
 8003b7e:	f7fc fe63 	bl	8000848 <USART_Init>

	USART_Cmd(USART3, ENABLE);
 8003b82:	2101      	movs	r1, #1
 8003b84:	4804      	ldr	r0, [pc, #16]	; (8003b98 <prvSetupUART+0x80>)
 8003b86:	f7fc ff19 	bl	80009bc <USART_Cmd>
}
 8003b8a:	bf00      	nop
 8003b8c:	3718      	adds	r7, #24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40020c00 	.word	0x40020c00
 8003b98:	40004800 	.word	0x40004800

08003b9c <prvSetupButton>:

static void prvSetupButton(void){
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef gpio_button_pins;
	// button pin is PC13
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	2004      	movs	r0, #4
 8003ba6:	f7fc fdef 	bl	8000788 <RCC_AHB1PeriphClockCmd>
	gpio_button_pins.GPIO_Pin = GPIO_Pin_13;
 8003baa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bae:	603b      	str	r3, [r7, #0]
	gpio_button_pins.GPIO_Mode = GPIO_Mode_IN;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	713b      	strb	r3, [r7, #4]
	gpio_button_pins.GPIO_PuPd = GPIO_PuPd_DOWN;
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOC, &gpio_button_pins);
 8003bb8:	463b      	mov	r3, r7
 8003bba:	4619      	mov	r1, r3
 8003bbc:	4803      	ldr	r0, [pc, #12]	; (8003bcc <prvSetupButton+0x30>)
 8003bbe:	f7fc fbb0 	bl	8000322 <GPIO_Init>
}
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	40020800 	.word	0x40020800

08003bd0 <prvSetupBoardLED>:

static void prvSetupBoardLED(void){
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef gpio_LED_pins;
	// leds pins are PB00, PB07 & PB14
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	2002      	movs	r0, #2
 8003bda:	f7fc fdd5 	bl	8000788 <RCC_AHB1PeriphClockCmd>
	gpio_LED_pins.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_7 | GPIO_Pin_14;
 8003bde:	f244 0381 	movw	r3, #16513	; 0x4081
 8003be2:	603b      	str	r3, [r7, #0]
	gpio_LED_pins.GPIO_Mode = GPIO_Mode_OUT;
 8003be4:	2301      	movs	r3, #1
 8003be6:	713b      	strb	r3, [r7, #4]
	gpio_LED_pins.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8003be8:	2300      	movs	r3, #0
 8003bea:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOB, &gpio_LED_pins);
 8003bec:	463b      	mov	r3, r7
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4803      	ldr	r0, [pc, #12]	; (8003c00 <prvSetupBoardLED+0x30>)
 8003bf2:	f7fc fb96 	bl	8000322 <GPIO_Init>
}
 8003bf6:	bf00      	nop
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	40020400 	.word	0x40020400

08003c04 <prvSetupHardware>:

static void prvSetupHardware(void){
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8003c08:	2101      	movs	r1, #1
 8003c0a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003c0e:	f7fc fdfb 	bl	8000808 <RCC_APB2PeriphClockCmd>
	prvSetupUART();
 8003c12:	f7ff ff81 	bl	8003b18 <prvSetupUART>
	prvSetupButton();
 8003c16:	f7ff ffc1 	bl	8003b9c <prvSetupButton>
	prvSetupBoardLED();
 8003c1a:	f7ff ffd9 	bl	8003bd0 <prvSetupBoardLED>
}
 8003c1e:	bf00      	nop
 8003c20:	bd80      	pop	{r7, pc}
	...

08003c24 <printmsg>:


void printmsg(char *msg){
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < strlen(msg); ++i) {
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	e013      	b.n	8003c5a <printmsg+0x36>
		while( USART_GetFlagStatus( USART3, USART_FLAG_TXE ) != SET);
 8003c32:	bf00      	nop
 8003c34:	2180      	movs	r1, #128	; 0x80
 8003c36:	480e      	ldr	r0, [pc, #56]	; (8003c70 <printmsg+0x4c>)
 8003c38:	f7fc fef2 	bl	8000a20 <USART_GetFlagStatus>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d1f8      	bne.n	8003c34 <printmsg+0x10>
		USART_SendData(USART3, msg[i]);
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	4413      	add	r3, r2
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	4808      	ldr	r0, [pc, #32]	; (8003c70 <printmsg+0x4c>)
 8003c50:	f7fc fed4 	bl	80009fc <USART_SendData>
	for (uint32_t i = 0; i < strlen(msg); ++i) {
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	3301      	adds	r3, #1
 8003c58:	60fb      	str	r3, [r7, #12]
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7fc fae0 	bl	8000220 <strlen>
 8003c60:	4602      	mov	r2, r0
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d3e4      	bcc.n	8003c32 <printmsg+0xe>
	}
}
 8003c68:	bf00      	nop
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40004800 	.word	0x40004800

08003c74 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003c7c:	4b11      	ldr	r3, [pc, #68]	; (8003cc4 <_sbrk+0x50>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d102      	bne.n	8003c8a <_sbrk+0x16>
		heap_end = &end;
 8003c84:	4b0f      	ldr	r3, [pc, #60]	; (8003cc4 <_sbrk+0x50>)
 8003c86:	4a10      	ldr	r2, [pc, #64]	; (8003cc8 <_sbrk+0x54>)
 8003c88:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003c8a:	4b0e      	ldr	r3, [pc, #56]	; (8003cc4 <_sbrk+0x50>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003c90:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <_sbrk+0x50>)
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4413      	add	r3, r2
 8003c98:	466a      	mov	r2, sp
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d907      	bls.n	8003cae <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003c9e:	f000 f993 	bl	8003fc8 <__errno>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	230c      	movs	r3, #12
 8003ca6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003ca8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cac:	e006      	b.n	8003cbc <_sbrk+0x48>
	}

	heap_end += incr;
 8003cae:	4b05      	ldr	r3, [pc, #20]	; (8003cc4 <_sbrk+0x50>)
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	4a03      	ldr	r2, [pc, #12]	; (8003cc4 <_sbrk+0x50>)
 8003cb8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003cba:	68fb      	ldr	r3, [r7, #12]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	200153a8 	.word	0x200153a8
 8003cc8:	20015560 	.word	0x20015560

08003ccc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cd0:	4b16      	ldr	r3, [pc, #88]	; (8003d2c <SystemInit+0x60>)
 8003cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd6:	4a15      	ldr	r2, [pc, #84]	; (8003d2c <SystemInit+0x60>)
 8003cd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003ce0:	4b13      	ldr	r3, [pc, #76]	; (8003d30 <SystemInit+0x64>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a12      	ldr	r2, [pc, #72]	; (8003d30 <SystemInit+0x64>)
 8003ce6:	f043 0301 	orr.w	r3, r3, #1
 8003cea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003cec:	4b10      	ldr	r3, [pc, #64]	; (8003d30 <SystemInit+0x64>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003cf2:	4b0f      	ldr	r3, [pc, #60]	; (8003d30 <SystemInit+0x64>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a0e      	ldr	r2, [pc, #56]	; (8003d30 <SystemInit+0x64>)
 8003cf8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d00:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003d02:	4b0b      	ldr	r3, [pc, #44]	; (8003d30 <SystemInit+0x64>)
 8003d04:	4a0b      	ldr	r2, [pc, #44]	; (8003d34 <SystemInit+0x68>)
 8003d06:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003d08:	4b09      	ldr	r3, [pc, #36]	; (8003d30 <SystemInit+0x64>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a08      	ldr	r2, [pc, #32]	; (8003d30 <SystemInit+0x64>)
 8003d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d12:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003d14:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <SystemInit+0x64>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8003d1a:	f000 f8db 	bl	8003ed4 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d1e:	4b03      	ldr	r3, [pc, #12]	; (8003d2c <SystemInit+0x60>)
 8003d20:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d24:	609a      	str	r2, [r3, #8]
#endif
}
 8003d26:	bf00      	nop
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	e000ed00 	.word	0xe000ed00
 8003d30:	40023800 	.word	0x40023800
 8003d34:	24003010 	.word	0x24003010

08003d38 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	613b      	str	r3, [r7, #16]
 8003d42:	2300      	movs	r3, #0
 8003d44:	617b      	str	r3, [r7, #20]
 8003d46:	2302      	movs	r3, #2
 8003d48:	60fb      	str	r3, [r7, #12]
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60bb      	str	r3, [r7, #8]
 8003d4e:	2302      	movs	r3, #2
 8003d50:	607b      	str	r3, [r7, #4]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
 8003d52:	2302      	movs	r3, #2
 8003d54:	603b      	str	r3, [r7, #0]
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003d56:	4b5a      	ldr	r3, [pc, #360]	; (8003ec0 <SystemCoreClockUpdate+0x188>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 030c 	and.w	r3, r3, #12
 8003d5e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	2b0c      	cmp	r3, #12
 8003d64:	f200 8092 	bhi.w	8003e8c <SystemCoreClockUpdate+0x154>
 8003d68:	a201      	add	r2, pc, #4	; (adr r2, 8003d70 <SystemCoreClockUpdate+0x38>)
 8003d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6e:	bf00      	nop
 8003d70:	08003da5 	.word	0x08003da5
 8003d74:	08003e8d 	.word	0x08003e8d
 8003d78:	08003e8d 	.word	0x08003e8d
 8003d7c:	08003e8d 	.word	0x08003e8d
 8003d80:	08003dad 	.word	0x08003dad
 8003d84:	08003e8d 	.word	0x08003e8d
 8003d88:	08003e8d 	.word	0x08003e8d
 8003d8c:	08003e8d 	.word	0x08003e8d
 8003d90:	08003db5 	.word	0x08003db5
 8003d94:	08003e8d 	.word	0x08003e8d
 8003d98:	08003e8d 	.word	0x08003e8d
 8003d9c:	08003e8d 	.word	0x08003e8d
 8003da0:	08003e21 	.word	0x08003e21
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8003da4:	4b47      	ldr	r3, [pc, #284]	; (8003ec4 <SystemCoreClockUpdate+0x18c>)
 8003da6:	4a48      	ldr	r2, [pc, #288]	; (8003ec8 <SystemCoreClockUpdate+0x190>)
 8003da8:	601a      	str	r2, [r3, #0]
      break;
 8003daa:	e073      	b.n	8003e94 <SystemCoreClockUpdate+0x15c>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8003dac:	4b45      	ldr	r3, [pc, #276]	; (8003ec4 <SystemCoreClockUpdate+0x18c>)
 8003dae:	4a47      	ldr	r2, [pc, #284]	; (8003ecc <SystemCoreClockUpdate+0x194>)
 8003db0:	601a      	str	r2, [r3, #0]
      break;
 8003db2:	e06f      	b.n	8003e94 <SystemCoreClockUpdate+0x15c>
    case 0x08:  /* PLL P used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8003db4:	4b42      	ldr	r3, [pc, #264]	; (8003ec0 <SystemCoreClockUpdate+0x188>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	0d9b      	lsrs	r3, r3, #22
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dc0:	4b3f      	ldr	r3, [pc, #252]	; (8003ec0 <SystemCoreClockUpdate+0x188>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dc8:	607b      	str	r3, [r7, #4]
      
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
      if (pllsource != 0)
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00c      	beq.n	8003dea <SystemCoreClockUpdate+0xb2>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003dd0:	4a3e      	ldr	r2, [pc, #248]	; (8003ecc <SystemCoreClockUpdate+0x194>)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd8:	4a39      	ldr	r2, [pc, #228]	; (8003ec0 <SystemCoreClockUpdate+0x188>)
 8003dda:	6852      	ldr	r2, [r2, #4]
 8003ddc:	0992      	lsrs	r2, r2, #6
 8003dde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003de2:	fb02 f303 	mul.w	r3, r2, r3
 8003de6:	617b      	str	r3, [r7, #20]
 8003de8:	e00b      	b.n	8003e02 <SystemCoreClockUpdate+0xca>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003dea:	4a37      	ldr	r2, [pc, #220]	; (8003ec8 <SystemCoreClockUpdate+0x190>)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df2:	4a33      	ldr	r2, [pc, #204]	; (8003ec0 <SystemCoreClockUpdate+0x188>)
 8003df4:	6852      	ldr	r2, [r2, #4]
 8003df6:	0992      	lsrs	r2, r2, #6
 8003df8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dfc:	fb02 f303 	mul.w	r3, r2, r3
 8003e00:	617b      	str	r3, [r7, #20]
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }  
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F412xG || STM32F413_423xx ||  STM32F446xx || STM32F469_479xx */  
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8003e02:	4b2f      	ldr	r3, [pc, #188]	; (8003ec0 <SystemCoreClockUpdate+0x188>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	0c1b      	lsrs	r3, r3, #16
 8003e08:	f003 0303 	and.w	r3, r3, #3
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;      
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1a:	4a2a      	ldr	r2, [pc, #168]	; (8003ec4 <SystemCoreClockUpdate+0x18c>)
 8003e1c:	6013      	str	r3, [r2, #0]
      break;
 8003e1e:	e039      	b.n	8003e94 <SystemCoreClockUpdate+0x15c>
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)      
      case 0x0C:  /* PLL R used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_R
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8003e20:	4b27      	ldr	r3, [pc, #156]	; (8003ec0 <SystemCoreClockUpdate+0x188>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	0d9b      	lsrs	r3, r3, #22
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e2c:	4b24      	ldr	r3, [pc, #144]	; (8003ec0 <SystemCoreClockUpdate+0x188>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e34:	607b      	str	r3, [r7, #4]
      if (pllsource != 0)
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00c      	beq.n	8003e56 <SystemCoreClockUpdate+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003e3c:	4a23      	ldr	r2, [pc, #140]	; (8003ecc <SystemCoreClockUpdate+0x194>)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e44:	4a1e      	ldr	r2, [pc, #120]	; (8003ec0 <SystemCoreClockUpdate+0x188>)
 8003e46:	6852      	ldr	r2, [r2, #4]
 8003e48:	0992      	lsrs	r2, r2, #6
 8003e4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e4e:	fb02 f303 	mul.w	r3, r2, r3
 8003e52:	617b      	str	r3, [r7, #20]
 8003e54:	e00b      	b.n	8003e6e <SystemCoreClockUpdate+0x136>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003e56:	4a1c      	ldr	r2, [pc, #112]	; (8003ec8 <SystemCoreClockUpdate+0x190>)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5e:	4a18      	ldr	r2, [pc, #96]	; (8003ec0 <SystemCoreClockUpdate+0x188>)
 8003e60:	6852      	ldr	r2, [r2, #4]
 8003e62:	0992      	lsrs	r2, r2, #6
 8003e64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e68:	fb02 f303 	mul.w	r3, r2, r3
 8003e6c:	617b      	str	r3, [r7, #20]
      }
 
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
 8003e6e:	4b14      	ldr	r3, [pc, #80]	; (8003ec0 <SystemCoreClockUpdate+0x188>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	0f1b      	lsrs	r3, r3, #28
 8003e74:	f003 0307 	and.w	r3, r3, #7
 8003e78:	3301      	adds	r3, #1
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	603b      	str	r3, [r7, #0]
      SystemCoreClock = pllvco/pllr;      
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e86:	4a0f      	ldr	r2, [pc, #60]	; (8003ec4 <SystemCoreClockUpdate+0x18c>)
 8003e88:	6013      	str	r3, [r2, #0]
      break;
 8003e8a:	e003      	b.n	8003e94 <SystemCoreClockUpdate+0x15c>
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    default:
      SystemCoreClock = HSI_VALUE;
 8003e8c:	4b0d      	ldr	r3, [pc, #52]	; (8003ec4 <SystemCoreClockUpdate+0x18c>)
 8003e8e:	4a0e      	ldr	r2, [pc, #56]	; (8003ec8 <SystemCoreClockUpdate+0x190>)
 8003e90:	601a      	str	r2, [r3, #0]
      break;
 8003e92:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8003e94:	4b0a      	ldr	r3, [pc, #40]	; (8003ec0 <SystemCoreClockUpdate+0x188>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	091b      	lsrs	r3, r3, #4
 8003e9a:	f003 030f 	and.w	r3, r3, #15
 8003e9e:	4a0c      	ldr	r2, [pc, #48]	; (8003ed0 <SystemCoreClockUpdate+0x198>)
 8003ea0:	5cd3      	ldrb	r3, [r2, r3]
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8003ea6:	4b07      	ldr	r3, [pc, #28]	; (8003ec4 <SystemCoreClockUpdate+0x18c>)
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb0:	4a04      	ldr	r2, [pc, #16]	; (8003ec4 <SystemCoreClockUpdate+0x18c>)
 8003eb2:	6013      	str	r3, [r2, #0]
}
 8003eb4:	bf00      	nop
 8003eb6:	371c      	adds	r7, #28
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	20000014 	.word	0x20000014
 8003ec8:	00f42400 	.word	0x00f42400
 8003ecc:	007a1200 	.word	0x007a1200
 8003ed0:	20000018 	.word	0x20000018

08003ed4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003eda:	2300      	movs	r3, #0
 8003edc:	607b      	str	r3, [r7, #4]
 8003ede:	2300      	movs	r3, #0
 8003ee0:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003ee2:	4b35      	ldr	r3, [pc, #212]	; (8003fb8 <SetSysClock+0xe4>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a34      	ldr	r2, [pc, #208]	; (8003fb8 <SetSysClock+0xe4>)
 8003ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eec:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003eee:	4b32      	ldr	r3, [pc, #200]	; (8003fb8 <SetSysClock+0xe4>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	3301      	adds	r3, #1
 8003efc:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d103      	bne.n	8003f0c <SetSysClock+0x38>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003f0a:	d1f0      	bne.n	8003eee <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003f0c:	4b2a      	ldr	r3, [pc, #168]	; (8003fb8 <SetSysClock+0xe4>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d002      	beq.n	8003f1e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	603b      	str	r3, [r7, #0]
 8003f1c:	e001      	b.n	8003f22 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d140      	bne.n	8003faa <SetSysClock+0xd6>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003f28:	4b23      	ldr	r3, [pc, #140]	; (8003fb8 <SetSysClock+0xe4>)
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	4a22      	ldr	r2, [pc, #136]	; (8003fb8 <SetSysClock+0xe4>)
 8003f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f32:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8003f34:	4b21      	ldr	r3, [pc, #132]	; (8003fbc <SetSysClock+0xe8>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a20      	ldr	r2, [pc, #128]	; (8003fbc <SetSysClock+0xe8>)
 8003f3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f3e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003f40:	4b1d      	ldr	r3, [pc, #116]	; (8003fb8 <SetSysClock+0xe4>)
 8003f42:	4a1d      	ldr	r2, [pc, #116]	; (8003fb8 <SetSysClock+0xe4>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
#endif /* STM32F40_41xxx || STM32F427_437x || STM32F429_439xx  || STM32F412xG || STM32F446xx || STM32F469_479xx */

#if defined(STM32F401xx) || defined(STM32F413_423xx)
    /* PCLK2 = HCLK / 1*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8003f48:	4b1b      	ldr	r3, [pc, #108]	; (8003fb8 <SetSysClock+0xe4>)
 8003f4a:	4a1b      	ldr	r2, [pc, #108]	; (8003fb8 <SetSysClock+0xe4>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8003f50:	4b19      	ldr	r3, [pc, #100]	; (8003fb8 <SetSysClock+0xe4>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	4a18      	ldr	r2, [pc, #96]	; (8003fb8 <SetSysClock+0xe4>)
 8003f56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f5a:	6093      	str	r3, [r2, #8]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
#endif /* STM32F40_41xxx || STM32F401xx || STM32F427_437x || STM32F429_439xx || STM32F469_479xx */

#if  defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003f5c:	4b16      	ldr	r3, [pc, #88]	; (8003fb8 <SetSysClock+0xe4>)
 8003f5e:	4a18      	ldr	r2, [pc, #96]	; (8003fc0 <SetSysClock+0xec>)
 8003f60:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003f62:	4b15      	ldr	r3, [pc, #84]	; (8003fb8 <SetSysClock+0xe4>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a14      	ldr	r2, [pc, #80]	; (8003fb8 <SetSysClock+0xe4>)
 8003f68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f6c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003f6e:	bf00      	nop
 8003f70:	4b11      	ldr	r3, [pc, #68]	; (8003fb8 <SetSysClock+0xe4>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0f9      	beq.n	8003f70 <SetSysClock+0x9c>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
#endif /* STM32F40_41xxx  || STM32F412xG */

#if defined(STM32F413_423xx)  
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_3WS;
 8003f7c:	4b11      	ldr	r3, [pc, #68]	; (8003fc4 <SetSysClock+0xf0>)
 8003f7e:	f240 7203 	movw	r2, #1795	; 0x703
 8003f82:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003f84:	4b0c      	ldr	r3, [pc, #48]	; (8003fb8 <SetSysClock+0xe4>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	4a0b      	ldr	r2, [pc, #44]	; (8003fb8 <SetSysClock+0xe4>)
 8003f8a:	f023 0303 	bic.w	r3, r3, #3
 8003f8e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003f90:	4b09      	ldr	r3, [pc, #36]	; (8003fb8 <SetSysClock+0xe4>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	4a08      	ldr	r2, [pc, #32]	; (8003fb8 <SetSysClock+0xe4>)
 8003f96:	f043 0302 	orr.w	r3, r3, #2
 8003f9a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 8003f9c:	bf00      	nop
 8003f9e:	4b06      	ldr	r3, [pc, #24]	; (8003fb8 <SetSysClock+0xe4>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 030c 	and.w	r3, r3, #12
 8003fa6:	2b08      	cmp	r3, #8
 8003fa8:	d1f9      	bne.n	8003f9e <SetSysClock+0xca>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	40023800 	.word	0x40023800
 8003fbc:	40007000 	.word	0x40007000
 8003fc0:	27416408 	.word	0x27416408
 8003fc4:	40023c00 	.word	0x40023c00

08003fc8 <__errno>:
 8003fc8:	4b01      	ldr	r3, [pc, #4]	; (8003fd0 <__errno+0x8>)
 8003fca:	6818      	ldr	r0, [r3, #0]
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	20000028 	.word	0x20000028

08003fd4 <__libc_init_array>:
 8003fd4:	b570      	push	{r4, r5, r6, lr}
 8003fd6:	4e0d      	ldr	r6, [pc, #52]	; (800400c <__libc_init_array+0x38>)
 8003fd8:	4c0d      	ldr	r4, [pc, #52]	; (8004010 <__libc_init_array+0x3c>)
 8003fda:	1ba4      	subs	r4, r4, r6
 8003fdc:	10a4      	asrs	r4, r4, #2
 8003fde:	2500      	movs	r5, #0
 8003fe0:	42a5      	cmp	r5, r4
 8003fe2:	d109      	bne.n	8003ff8 <__libc_init_array+0x24>
 8003fe4:	4e0b      	ldr	r6, [pc, #44]	; (8004014 <__libc_init_array+0x40>)
 8003fe6:	4c0c      	ldr	r4, [pc, #48]	; (8004018 <__libc_init_array+0x44>)
 8003fe8:	f000 fc36 	bl	8004858 <_init>
 8003fec:	1ba4      	subs	r4, r4, r6
 8003fee:	10a4      	asrs	r4, r4, #2
 8003ff0:	2500      	movs	r5, #0
 8003ff2:	42a5      	cmp	r5, r4
 8003ff4:	d105      	bne.n	8004002 <__libc_init_array+0x2e>
 8003ff6:	bd70      	pop	{r4, r5, r6, pc}
 8003ff8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ffc:	4798      	blx	r3
 8003ffe:	3501      	adds	r5, #1
 8004000:	e7ee      	b.n	8003fe0 <__libc_init_array+0xc>
 8004002:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004006:	4798      	blx	r3
 8004008:	3501      	adds	r5, #1
 800400a:	e7f2      	b.n	8003ff2 <__libc_init_array+0x1e>
 800400c:	08004a04 	.word	0x08004a04
 8004010:	08004a04 	.word	0x08004a04
 8004014:	08004a04 	.word	0x08004a04
 8004018:	08004a08 	.word	0x08004a08

0800401c <memcmp>:
 800401c:	b530      	push	{r4, r5, lr}
 800401e:	2400      	movs	r4, #0
 8004020:	42a2      	cmp	r2, r4
 8004022:	d101      	bne.n	8004028 <memcmp+0xc>
 8004024:	2000      	movs	r0, #0
 8004026:	e007      	b.n	8004038 <memcmp+0x1c>
 8004028:	5d03      	ldrb	r3, [r0, r4]
 800402a:	3401      	adds	r4, #1
 800402c:	190d      	adds	r5, r1, r4
 800402e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8004032:	42ab      	cmp	r3, r5
 8004034:	d0f4      	beq.n	8004020 <memcmp+0x4>
 8004036:	1b58      	subs	r0, r3, r5
 8004038:	bd30      	pop	{r4, r5, pc}

0800403a <memcpy>:
 800403a:	b510      	push	{r4, lr}
 800403c:	1e43      	subs	r3, r0, #1
 800403e:	440a      	add	r2, r1
 8004040:	4291      	cmp	r1, r2
 8004042:	d100      	bne.n	8004046 <memcpy+0xc>
 8004044:	bd10      	pop	{r4, pc}
 8004046:	f811 4b01 	ldrb.w	r4, [r1], #1
 800404a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800404e:	e7f7      	b.n	8004040 <memcpy+0x6>

08004050 <memset>:
 8004050:	4402      	add	r2, r0
 8004052:	4603      	mov	r3, r0
 8004054:	4293      	cmp	r3, r2
 8004056:	d100      	bne.n	800405a <memset+0xa>
 8004058:	4770      	bx	lr
 800405a:	f803 1b01 	strb.w	r1, [r3], #1
 800405e:	e7f9      	b.n	8004054 <memset+0x4>

08004060 <siprintf>:
 8004060:	b40e      	push	{r1, r2, r3}
 8004062:	b500      	push	{lr}
 8004064:	b09c      	sub	sp, #112	; 0x70
 8004066:	ab1d      	add	r3, sp, #116	; 0x74
 8004068:	9002      	str	r0, [sp, #8]
 800406a:	9006      	str	r0, [sp, #24]
 800406c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004070:	4809      	ldr	r0, [pc, #36]	; (8004098 <siprintf+0x38>)
 8004072:	9107      	str	r1, [sp, #28]
 8004074:	9104      	str	r1, [sp, #16]
 8004076:	4909      	ldr	r1, [pc, #36]	; (800409c <siprintf+0x3c>)
 8004078:	f853 2b04 	ldr.w	r2, [r3], #4
 800407c:	9105      	str	r1, [sp, #20]
 800407e:	6800      	ldr	r0, [r0, #0]
 8004080:	9301      	str	r3, [sp, #4]
 8004082:	a902      	add	r1, sp, #8
 8004084:	f000 f866 	bl	8004154 <_svfiprintf_r>
 8004088:	9b02      	ldr	r3, [sp, #8]
 800408a:	2200      	movs	r2, #0
 800408c:	701a      	strb	r2, [r3, #0]
 800408e:	b01c      	add	sp, #112	; 0x70
 8004090:	f85d eb04 	ldr.w	lr, [sp], #4
 8004094:	b003      	add	sp, #12
 8004096:	4770      	bx	lr
 8004098:	20000028 	.word	0x20000028
 800409c:	ffff0208 	.word	0xffff0208

080040a0 <__ssputs_r>:
 80040a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040a4:	688e      	ldr	r6, [r1, #8]
 80040a6:	429e      	cmp	r6, r3
 80040a8:	4682      	mov	sl, r0
 80040aa:	460c      	mov	r4, r1
 80040ac:	4690      	mov	r8, r2
 80040ae:	4699      	mov	r9, r3
 80040b0:	d837      	bhi.n	8004122 <__ssputs_r+0x82>
 80040b2:	898a      	ldrh	r2, [r1, #12]
 80040b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80040b8:	d031      	beq.n	800411e <__ssputs_r+0x7e>
 80040ba:	6825      	ldr	r5, [r4, #0]
 80040bc:	6909      	ldr	r1, [r1, #16]
 80040be:	1a6f      	subs	r7, r5, r1
 80040c0:	6965      	ldr	r5, [r4, #20]
 80040c2:	2302      	movs	r3, #2
 80040c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040c8:	fb95 f5f3 	sdiv	r5, r5, r3
 80040cc:	f109 0301 	add.w	r3, r9, #1
 80040d0:	443b      	add	r3, r7
 80040d2:	429d      	cmp	r5, r3
 80040d4:	bf38      	it	cc
 80040d6:	461d      	movcc	r5, r3
 80040d8:	0553      	lsls	r3, r2, #21
 80040da:	d530      	bpl.n	800413e <__ssputs_r+0x9e>
 80040dc:	4629      	mov	r1, r5
 80040de:	f000 fb21 	bl	8004724 <_malloc_r>
 80040e2:	4606      	mov	r6, r0
 80040e4:	b950      	cbnz	r0, 80040fc <__ssputs_r+0x5c>
 80040e6:	230c      	movs	r3, #12
 80040e8:	f8ca 3000 	str.w	r3, [sl]
 80040ec:	89a3      	ldrh	r3, [r4, #12]
 80040ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040f2:	81a3      	strh	r3, [r4, #12]
 80040f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040fc:	463a      	mov	r2, r7
 80040fe:	6921      	ldr	r1, [r4, #16]
 8004100:	f7ff ff9b 	bl	800403a <memcpy>
 8004104:	89a3      	ldrh	r3, [r4, #12]
 8004106:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800410a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800410e:	81a3      	strh	r3, [r4, #12]
 8004110:	6126      	str	r6, [r4, #16]
 8004112:	6165      	str	r5, [r4, #20]
 8004114:	443e      	add	r6, r7
 8004116:	1bed      	subs	r5, r5, r7
 8004118:	6026      	str	r6, [r4, #0]
 800411a:	60a5      	str	r5, [r4, #8]
 800411c:	464e      	mov	r6, r9
 800411e:	454e      	cmp	r6, r9
 8004120:	d900      	bls.n	8004124 <__ssputs_r+0x84>
 8004122:	464e      	mov	r6, r9
 8004124:	4632      	mov	r2, r6
 8004126:	4641      	mov	r1, r8
 8004128:	6820      	ldr	r0, [r4, #0]
 800412a:	f000 fa93 	bl	8004654 <memmove>
 800412e:	68a3      	ldr	r3, [r4, #8]
 8004130:	1b9b      	subs	r3, r3, r6
 8004132:	60a3      	str	r3, [r4, #8]
 8004134:	6823      	ldr	r3, [r4, #0]
 8004136:	441e      	add	r6, r3
 8004138:	6026      	str	r6, [r4, #0]
 800413a:	2000      	movs	r0, #0
 800413c:	e7dc      	b.n	80040f8 <__ssputs_r+0x58>
 800413e:	462a      	mov	r2, r5
 8004140:	f000 fb4a 	bl	80047d8 <_realloc_r>
 8004144:	4606      	mov	r6, r0
 8004146:	2800      	cmp	r0, #0
 8004148:	d1e2      	bne.n	8004110 <__ssputs_r+0x70>
 800414a:	6921      	ldr	r1, [r4, #16]
 800414c:	4650      	mov	r0, sl
 800414e:	f000 fa9b 	bl	8004688 <_free_r>
 8004152:	e7c8      	b.n	80040e6 <__ssputs_r+0x46>

08004154 <_svfiprintf_r>:
 8004154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004158:	461d      	mov	r5, r3
 800415a:	898b      	ldrh	r3, [r1, #12]
 800415c:	061f      	lsls	r7, r3, #24
 800415e:	b09d      	sub	sp, #116	; 0x74
 8004160:	4680      	mov	r8, r0
 8004162:	460c      	mov	r4, r1
 8004164:	4616      	mov	r6, r2
 8004166:	d50f      	bpl.n	8004188 <_svfiprintf_r+0x34>
 8004168:	690b      	ldr	r3, [r1, #16]
 800416a:	b96b      	cbnz	r3, 8004188 <_svfiprintf_r+0x34>
 800416c:	2140      	movs	r1, #64	; 0x40
 800416e:	f000 fad9 	bl	8004724 <_malloc_r>
 8004172:	6020      	str	r0, [r4, #0]
 8004174:	6120      	str	r0, [r4, #16]
 8004176:	b928      	cbnz	r0, 8004184 <_svfiprintf_r+0x30>
 8004178:	230c      	movs	r3, #12
 800417a:	f8c8 3000 	str.w	r3, [r8]
 800417e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004182:	e0c8      	b.n	8004316 <_svfiprintf_r+0x1c2>
 8004184:	2340      	movs	r3, #64	; 0x40
 8004186:	6163      	str	r3, [r4, #20]
 8004188:	2300      	movs	r3, #0
 800418a:	9309      	str	r3, [sp, #36]	; 0x24
 800418c:	2320      	movs	r3, #32
 800418e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004192:	2330      	movs	r3, #48	; 0x30
 8004194:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004198:	9503      	str	r5, [sp, #12]
 800419a:	f04f 0b01 	mov.w	fp, #1
 800419e:	4637      	mov	r7, r6
 80041a0:	463d      	mov	r5, r7
 80041a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80041a6:	b10b      	cbz	r3, 80041ac <_svfiprintf_r+0x58>
 80041a8:	2b25      	cmp	r3, #37	; 0x25
 80041aa:	d13e      	bne.n	800422a <_svfiprintf_r+0xd6>
 80041ac:	ebb7 0a06 	subs.w	sl, r7, r6
 80041b0:	d00b      	beq.n	80041ca <_svfiprintf_r+0x76>
 80041b2:	4653      	mov	r3, sl
 80041b4:	4632      	mov	r2, r6
 80041b6:	4621      	mov	r1, r4
 80041b8:	4640      	mov	r0, r8
 80041ba:	f7ff ff71 	bl	80040a0 <__ssputs_r>
 80041be:	3001      	adds	r0, #1
 80041c0:	f000 80a4 	beq.w	800430c <_svfiprintf_r+0x1b8>
 80041c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041c6:	4453      	add	r3, sl
 80041c8:	9309      	str	r3, [sp, #36]	; 0x24
 80041ca:	783b      	ldrb	r3, [r7, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 809d 	beq.w	800430c <_svfiprintf_r+0x1b8>
 80041d2:	2300      	movs	r3, #0
 80041d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041dc:	9304      	str	r3, [sp, #16]
 80041de:	9307      	str	r3, [sp, #28]
 80041e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041e4:	931a      	str	r3, [sp, #104]	; 0x68
 80041e6:	462f      	mov	r7, r5
 80041e8:	2205      	movs	r2, #5
 80041ea:	f817 1b01 	ldrb.w	r1, [r7], #1
 80041ee:	4850      	ldr	r0, [pc, #320]	; (8004330 <_svfiprintf_r+0x1dc>)
 80041f0:	f7fc f81e 	bl	8000230 <memchr>
 80041f4:	9b04      	ldr	r3, [sp, #16]
 80041f6:	b9d0      	cbnz	r0, 800422e <_svfiprintf_r+0xda>
 80041f8:	06d9      	lsls	r1, r3, #27
 80041fa:	bf44      	itt	mi
 80041fc:	2220      	movmi	r2, #32
 80041fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004202:	071a      	lsls	r2, r3, #28
 8004204:	bf44      	itt	mi
 8004206:	222b      	movmi	r2, #43	; 0x2b
 8004208:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800420c:	782a      	ldrb	r2, [r5, #0]
 800420e:	2a2a      	cmp	r2, #42	; 0x2a
 8004210:	d015      	beq.n	800423e <_svfiprintf_r+0xea>
 8004212:	9a07      	ldr	r2, [sp, #28]
 8004214:	462f      	mov	r7, r5
 8004216:	2000      	movs	r0, #0
 8004218:	250a      	movs	r5, #10
 800421a:	4639      	mov	r1, r7
 800421c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004220:	3b30      	subs	r3, #48	; 0x30
 8004222:	2b09      	cmp	r3, #9
 8004224:	d94d      	bls.n	80042c2 <_svfiprintf_r+0x16e>
 8004226:	b1b8      	cbz	r0, 8004258 <_svfiprintf_r+0x104>
 8004228:	e00f      	b.n	800424a <_svfiprintf_r+0xf6>
 800422a:	462f      	mov	r7, r5
 800422c:	e7b8      	b.n	80041a0 <_svfiprintf_r+0x4c>
 800422e:	4a40      	ldr	r2, [pc, #256]	; (8004330 <_svfiprintf_r+0x1dc>)
 8004230:	1a80      	subs	r0, r0, r2
 8004232:	fa0b f000 	lsl.w	r0, fp, r0
 8004236:	4318      	orrs	r0, r3
 8004238:	9004      	str	r0, [sp, #16]
 800423a:	463d      	mov	r5, r7
 800423c:	e7d3      	b.n	80041e6 <_svfiprintf_r+0x92>
 800423e:	9a03      	ldr	r2, [sp, #12]
 8004240:	1d11      	adds	r1, r2, #4
 8004242:	6812      	ldr	r2, [r2, #0]
 8004244:	9103      	str	r1, [sp, #12]
 8004246:	2a00      	cmp	r2, #0
 8004248:	db01      	blt.n	800424e <_svfiprintf_r+0xfa>
 800424a:	9207      	str	r2, [sp, #28]
 800424c:	e004      	b.n	8004258 <_svfiprintf_r+0x104>
 800424e:	4252      	negs	r2, r2
 8004250:	f043 0302 	orr.w	r3, r3, #2
 8004254:	9207      	str	r2, [sp, #28]
 8004256:	9304      	str	r3, [sp, #16]
 8004258:	783b      	ldrb	r3, [r7, #0]
 800425a:	2b2e      	cmp	r3, #46	; 0x2e
 800425c:	d10c      	bne.n	8004278 <_svfiprintf_r+0x124>
 800425e:	787b      	ldrb	r3, [r7, #1]
 8004260:	2b2a      	cmp	r3, #42	; 0x2a
 8004262:	d133      	bne.n	80042cc <_svfiprintf_r+0x178>
 8004264:	9b03      	ldr	r3, [sp, #12]
 8004266:	1d1a      	adds	r2, r3, #4
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	9203      	str	r2, [sp, #12]
 800426c:	2b00      	cmp	r3, #0
 800426e:	bfb8      	it	lt
 8004270:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004274:	3702      	adds	r7, #2
 8004276:	9305      	str	r3, [sp, #20]
 8004278:	4d2e      	ldr	r5, [pc, #184]	; (8004334 <_svfiprintf_r+0x1e0>)
 800427a:	7839      	ldrb	r1, [r7, #0]
 800427c:	2203      	movs	r2, #3
 800427e:	4628      	mov	r0, r5
 8004280:	f7fb ffd6 	bl	8000230 <memchr>
 8004284:	b138      	cbz	r0, 8004296 <_svfiprintf_r+0x142>
 8004286:	2340      	movs	r3, #64	; 0x40
 8004288:	1b40      	subs	r0, r0, r5
 800428a:	fa03 f000 	lsl.w	r0, r3, r0
 800428e:	9b04      	ldr	r3, [sp, #16]
 8004290:	4303      	orrs	r3, r0
 8004292:	3701      	adds	r7, #1
 8004294:	9304      	str	r3, [sp, #16]
 8004296:	7839      	ldrb	r1, [r7, #0]
 8004298:	4827      	ldr	r0, [pc, #156]	; (8004338 <_svfiprintf_r+0x1e4>)
 800429a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800429e:	2206      	movs	r2, #6
 80042a0:	1c7e      	adds	r6, r7, #1
 80042a2:	f7fb ffc5 	bl	8000230 <memchr>
 80042a6:	2800      	cmp	r0, #0
 80042a8:	d038      	beq.n	800431c <_svfiprintf_r+0x1c8>
 80042aa:	4b24      	ldr	r3, [pc, #144]	; (800433c <_svfiprintf_r+0x1e8>)
 80042ac:	bb13      	cbnz	r3, 80042f4 <_svfiprintf_r+0x1a0>
 80042ae:	9b03      	ldr	r3, [sp, #12]
 80042b0:	3307      	adds	r3, #7
 80042b2:	f023 0307 	bic.w	r3, r3, #7
 80042b6:	3308      	adds	r3, #8
 80042b8:	9303      	str	r3, [sp, #12]
 80042ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042bc:	444b      	add	r3, r9
 80042be:	9309      	str	r3, [sp, #36]	; 0x24
 80042c0:	e76d      	b.n	800419e <_svfiprintf_r+0x4a>
 80042c2:	fb05 3202 	mla	r2, r5, r2, r3
 80042c6:	2001      	movs	r0, #1
 80042c8:	460f      	mov	r7, r1
 80042ca:	e7a6      	b.n	800421a <_svfiprintf_r+0xc6>
 80042cc:	2300      	movs	r3, #0
 80042ce:	3701      	adds	r7, #1
 80042d0:	9305      	str	r3, [sp, #20]
 80042d2:	4619      	mov	r1, r3
 80042d4:	250a      	movs	r5, #10
 80042d6:	4638      	mov	r0, r7
 80042d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042dc:	3a30      	subs	r2, #48	; 0x30
 80042de:	2a09      	cmp	r2, #9
 80042e0:	d903      	bls.n	80042ea <_svfiprintf_r+0x196>
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0c8      	beq.n	8004278 <_svfiprintf_r+0x124>
 80042e6:	9105      	str	r1, [sp, #20]
 80042e8:	e7c6      	b.n	8004278 <_svfiprintf_r+0x124>
 80042ea:	fb05 2101 	mla	r1, r5, r1, r2
 80042ee:	2301      	movs	r3, #1
 80042f0:	4607      	mov	r7, r0
 80042f2:	e7f0      	b.n	80042d6 <_svfiprintf_r+0x182>
 80042f4:	ab03      	add	r3, sp, #12
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	4622      	mov	r2, r4
 80042fa:	4b11      	ldr	r3, [pc, #68]	; (8004340 <_svfiprintf_r+0x1ec>)
 80042fc:	a904      	add	r1, sp, #16
 80042fe:	4640      	mov	r0, r8
 8004300:	f3af 8000 	nop.w
 8004304:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004308:	4681      	mov	r9, r0
 800430a:	d1d6      	bne.n	80042ba <_svfiprintf_r+0x166>
 800430c:	89a3      	ldrh	r3, [r4, #12]
 800430e:	065b      	lsls	r3, r3, #25
 8004310:	f53f af35 	bmi.w	800417e <_svfiprintf_r+0x2a>
 8004314:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004316:	b01d      	add	sp, #116	; 0x74
 8004318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800431c:	ab03      	add	r3, sp, #12
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	4622      	mov	r2, r4
 8004322:	4b07      	ldr	r3, [pc, #28]	; (8004340 <_svfiprintf_r+0x1ec>)
 8004324:	a904      	add	r1, sp, #16
 8004326:	4640      	mov	r0, r8
 8004328:	f000 f882 	bl	8004430 <_printf_i>
 800432c:	e7ea      	b.n	8004304 <_svfiprintf_r+0x1b0>
 800432e:	bf00      	nop
 8004330:	080049ce 	.word	0x080049ce
 8004334:	080049d4 	.word	0x080049d4
 8004338:	080049d8 	.word	0x080049d8
 800433c:	00000000 	.word	0x00000000
 8004340:	080040a1 	.word	0x080040a1

08004344 <_printf_common>:
 8004344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004348:	4691      	mov	r9, r2
 800434a:	461f      	mov	r7, r3
 800434c:	688a      	ldr	r2, [r1, #8]
 800434e:	690b      	ldr	r3, [r1, #16]
 8004350:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004354:	4293      	cmp	r3, r2
 8004356:	bfb8      	it	lt
 8004358:	4613      	movlt	r3, r2
 800435a:	f8c9 3000 	str.w	r3, [r9]
 800435e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004362:	4606      	mov	r6, r0
 8004364:	460c      	mov	r4, r1
 8004366:	b112      	cbz	r2, 800436e <_printf_common+0x2a>
 8004368:	3301      	adds	r3, #1
 800436a:	f8c9 3000 	str.w	r3, [r9]
 800436e:	6823      	ldr	r3, [r4, #0]
 8004370:	0699      	lsls	r1, r3, #26
 8004372:	bf42      	ittt	mi
 8004374:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004378:	3302      	addmi	r3, #2
 800437a:	f8c9 3000 	strmi.w	r3, [r9]
 800437e:	6825      	ldr	r5, [r4, #0]
 8004380:	f015 0506 	ands.w	r5, r5, #6
 8004384:	d107      	bne.n	8004396 <_printf_common+0x52>
 8004386:	f104 0a19 	add.w	sl, r4, #25
 800438a:	68e3      	ldr	r3, [r4, #12]
 800438c:	f8d9 2000 	ldr.w	r2, [r9]
 8004390:	1a9b      	subs	r3, r3, r2
 8004392:	42ab      	cmp	r3, r5
 8004394:	dc28      	bgt.n	80043e8 <_printf_common+0xa4>
 8004396:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800439a:	6822      	ldr	r2, [r4, #0]
 800439c:	3300      	adds	r3, #0
 800439e:	bf18      	it	ne
 80043a0:	2301      	movne	r3, #1
 80043a2:	0692      	lsls	r2, r2, #26
 80043a4:	d42d      	bmi.n	8004402 <_printf_common+0xbe>
 80043a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043aa:	4639      	mov	r1, r7
 80043ac:	4630      	mov	r0, r6
 80043ae:	47c0      	blx	r8
 80043b0:	3001      	adds	r0, #1
 80043b2:	d020      	beq.n	80043f6 <_printf_common+0xb2>
 80043b4:	6823      	ldr	r3, [r4, #0]
 80043b6:	68e5      	ldr	r5, [r4, #12]
 80043b8:	f8d9 2000 	ldr.w	r2, [r9]
 80043bc:	f003 0306 	and.w	r3, r3, #6
 80043c0:	2b04      	cmp	r3, #4
 80043c2:	bf08      	it	eq
 80043c4:	1aad      	subeq	r5, r5, r2
 80043c6:	68a3      	ldr	r3, [r4, #8]
 80043c8:	6922      	ldr	r2, [r4, #16]
 80043ca:	bf0c      	ite	eq
 80043cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043d0:	2500      	movne	r5, #0
 80043d2:	4293      	cmp	r3, r2
 80043d4:	bfc4      	itt	gt
 80043d6:	1a9b      	subgt	r3, r3, r2
 80043d8:	18ed      	addgt	r5, r5, r3
 80043da:	f04f 0900 	mov.w	r9, #0
 80043de:	341a      	adds	r4, #26
 80043e0:	454d      	cmp	r5, r9
 80043e2:	d11a      	bne.n	800441a <_printf_common+0xd6>
 80043e4:	2000      	movs	r0, #0
 80043e6:	e008      	b.n	80043fa <_printf_common+0xb6>
 80043e8:	2301      	movs	r3, #1
 80043ea:	4652      	mov	r2, sl
 80043ec:	4639      	mov	r1, r7
 80043ee:	4630      	mov	r0, r6
 80043f0:	47c0      	blx	r8
 80043f2:	3001      	adds	r0, #1
 80043f4:	d103      	bne.n	80043fe <_printf_common+0xba>
 80043f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043fe:	3501      	adds	r5, #1
 8004400:	e7c3      	b.n	800438a <_printf_common+0x46>
 8004402:	18e1      	adds	r1, r4, r3
 8004404:	1c5a      	adds	r2, r3, #1
 8004406:	2030      	movs	r0, #48	; 0x30
 8004408:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800440c:	4422      	add	r2, r4
 800440e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004412:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004416:	3302      	adds	r3, #2
 8004418:	e7c5      	b.n	80043a6 <_printf_common+0x62>
 800441a:	2301      	movs	r3, #1
 800441c:	4622      	mov	r2, r4
 800441e:	4639      	mov	r1, r7
 8004420:	4630      	mov	r0, r6
 8004422:	47c0      	blx	r8
 8004424:	3001      	adds	r0, #1
 8004426:	d0e6      	beq.n	80043f6 <_printf_common+0xb2>
 8004428:	f109 0901 	add.w	r9, r9, #1
 800442c:	e7d8      	b.n	80043e0 <_printf_common+0x9c>
	...

08004430 <_printf_i>:
 8004430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004434:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004438:	460c      	mov	r4, r1
 800443a:	7e09      	ldrb	r1, [r1, #24]
 800443c:	b085      	sub	sp, #20
 800443e:	296e      	cmp	r1, #110	; 0x6e
 8004440:	4617      	mov	r7, r2
 8004442:	4606      	mov	r6, r0
 8004444:	4698      	mov	r8, r3
 8004446:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004448:	f000 80b3 	beq.w	80045b2 <_printf_i+0x182>
 800444c:	d822      	bhi.n	8004494 <_printf_i+0x64>
 800444e:	2963      	cmp	r1, #99	; 0x63
 8004450:	d036      	beq.n	80044c0 <_printf_i+0x90>
 8004452:	d80a      	bhi.n	800446a <_printf_i+0x3a>
 8004454:	2900      	cmp	r1, #0
 8004456:	f000 80b9 	beq.w	80045cc <_printf_i+0x19c>
 800445a:	2958      	cmp	r1, #88	; 0x58
 800445c:	f000 8083 	beq.w	8004566 <_printf_i+0x136>
 8004460:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004464:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004468:	e032      	b.n	80044d0 <_printf_i+0xa0>
 800446a:	2964      	cmp	r1, #100	; 0x64
 800446c:	d001      	beq.n	8004472 <_printf_i+0x42>
 800446e:	2969      	cmp	r1, #105	; 0x69
 8004470:	d1f6      	bne.n	8004460 <_printf_i+0x30>
 8004472:	6820      	ldr	r0, [r4, #0]
 8004474:	6813      	ldr	r3, [r2, #0]
 8004476:	0605      	lsls	r5, r0, #24
 8004478:	f103 0104 	add.w	r1, r3, #4
 800447c:	d52a      	bpl.n	80044d4 <_printf_i+0xa4>
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6011      	str	r1, [r2, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	da03      	bge.n	800448e <_printf_i+0x5e>
 8004486:	222d      	movs	r2, #45	; 0x2d
 8004488:	425b      	negs	r3, r3
 800448a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800448e:	486f      	ldr	r0, [pc, #444]	; (800464c <_printf_i+0x21c>)
 8004490:	220a      	movs	r2, #10
 8004492:	e039      	b.n	8004508 <_printf_i+0xd8>
 8004494:	2973      	cmp	r1, #115	; 0x73
 8004496:	f000 809d 	beq.w	80045d4 <_printf_i+0x1a4>
 800449a:	d808      	bhi.n	80044ae <_printf_i+0x7e>
 800449c:	296f      	cmp	r1, #111	; 0x6f
 800449e:	d020      	beq.n	80044e2 <_printf_i+0xb2>
 80044a0:	2970      	cmp	r1, #112	; 0x70
 80044a2:	d1dd      	bne.n	8004460 <_printf_i+0x30>
 80044a4:	6823      	ldr	r3, [r4, #0]
 80044a6:	f043 0320 	orr.w	r3, r3, #32
 80044aa:	6023      	str	r3, [r4, #0]
 80044ac:	e003      	b.n	80044b6 <_printf_i+0x86>
 80044ae:	2975      	cmp	r1, #117	; 0x75
 80044b0:	d017      	beq.n	80044e2 <_printf_i+0xb2>
 80044b2:	2978      	cmp	r1, #120	; 0x78
 80044b4:	d1d4      	bne.n	8004460 <_printf_i+0x30>
 80044b6:	2378      	movs	r3, #120	; 0x78
 80044b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044bc:	4864      	ldr	r0, [pc, #400]	; (8004650 <_printf_i+0x220>)
 80044be:	e055      	b.n	800456c <_printf_i+0x13c>
 80044c0:	6813      	ldr	r3, [r2, #0]
 80044c2:	1d19      	adds	r1, r3, #4
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6011      	str	r1, [r2, #0]
 80044c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044d0:	2301      	movs	r3, #1
 80044d2:	e08c      	b.n	80045ee <_printf_i+0x1be>
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6011      	str	r1, [r2, #0]
 80044d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80044dc:	bf18      	it	ne
 80044de:	b21b      	sxthne	r3, r3
 80044e0:	e7cf      	b.n	8004482 <_printf_i+0x52>
 80044e2:	6813      	ldr	r3, [r2, #0]
 80044e4:	6825      	ldr	r5, [r4, #0]
 80044e6:	1d18      	adds	r0, r3, #4
 80044e8:	6010      	str	r0, [r2, #0]
 80044ea:	0628      	lsls	r0, r5, #24
 80044ec:	d501      	bpl.n	80044f2 <_printf_i+0xc2>
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	e002      	b.n	80044f8 <_printf_i+0xc8>
 80044f2:	0668      	lsls	r0, r5, #25
 80044f4:	d5fb      	bpl.n	80044ee <_printf_i+0xbe>
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	4854      	ldr	r0, [pc, #336]	; (800464c <_printf_i+0x21c>)
 80044fa:	296f      	cmp	r1, #111	; 0x6f
 80044fc:	bf14      	ite	ne
 80044fe:	220a      	movne	r2, #10
 8004500:	2208      	moveq	r2, #8
 8004502:	2100      	movs	r1, #0
 8004504:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004508:	6865      	ldr	r5, [r4, #4]
 800450a:	60a5      	str	r5, [r4, #8]
 800450c:	2d00      	cmp	r5, #0
 800450e:	f2c0 8095 	blt.w	800463c <_printf_i+0x20c>
 8004512:	6821      	ldr	r1, [r4, #0]
 8004514:	f021 0104 	bic.w	r1, r1, #4
 8004518:	6021      	str	r1, [r4, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d13d      	bne.n	800459a <_printf_i+0x16a>
 800451e:	2d00      	cmp	r5, #0
 8004520:	f040 808e 	bne.w	8004640 <_printf_i+0x210>
 8004524:	4665      	mov	r5, ip
 8004526:	2a08      	cmp	r2, #8
 8004528:	d10b      	bne.n	8004542 <_printf_i+0x112>
 800452a:	6823      	ldr	r3, [r4, #0]
 800452c:	07db      	lsls	r3, r3, #31
 800452e:	d508      	bpl.n	8004542 <_printf_i+0x112>
 8004530:	6923      	ldr	r3, [r4, #16]
 8004532:	6862      	ldr	r2, [r4, #4]
 8004534:	429a      	cmp	r2, r3
 8004536:	bfde      	ittt	le
 8004538:	2330      	movle	r3, #48	; 0x30
 800453a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800453e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004542:	ebac 0305 	sub.w	r3, ip, r5
 8004546:	6123      	str	r3, [r4, #16]
 8004548:	f8cd 8000 	str.w	r8, [sp]
 800454c:	463b      	mov	r3, r7
 800454e:	aa03      	add	r2, sp, #12
 8004550:	4621      	mov	r1, r4
 8004552:	4630      	mov	r0, r6
 8004554:	f7ff fef6 	bl	8004344 <_printf_common>
 8004558:	3001      	adds	r0, #1
 800455a:	d14d      	bne.n	80045f8 <_printf_i+0x1c8>
 800455c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004560:	b005      	add	sp, #20
 8004562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004566:	4839      	ldr	r0, [pc, #228]	; (800464c <_printf_i+0x21c>)
 8004568:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800456c:	6813      	ldr	r3, [r2, #0]
 800456e:	6821      	ldr	r1, [r4, #0]
 8004570:	1d1d      	adds	r5, r3, #4
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6015      	str	r5, [r2, #0]
 8004576:	060a      	lsls	r2, r1, #24
 8004578:	d50b      	bpl.n	8004592 <_printf_i+0x162>
 800457a:	07ca      	lsls	r2, r1, #31
 800457c:	bf44      	itt	mi
 800457e:	f041 0120 	orrmi.w	r1, r1, #32
 8004582:	6021      	strmi	r1, [r4, #0]
 8004584:	b91b      	cbnz	r3, 800458e <_printf_i+0x15e>
 8004586:	6822      	ldr	r2, [r4, #0]
 8004588:	f022 0220 	bic.w	r2, r2, #32
 800458c:	6022      	str	r2, [r4, #0]
 800458e:	2210      	movs	r2, #16
 8004590:	e7b7      	b.n	8004502 <_printf_i+0xd2>
 8004592:	064d      	lsls	r5, r1, #25
 8004594:	bf48      	it	mi
 8004596:	b29b      	uxthmi	r3, r3
 8004598:	e7ef      	b.n	800457a <_printf_i+0x14a>
 800459a:	4665      	mov	r5, ip
 800459c:	fbb3 f1f2 	udiv	r1, r3, r2
 80045a0:	fb02 3311 	mls	r3, r2, r1, r3
 80045a4:	5cc3      	ldrb	r3, [r0, r3]
 80045a6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80045aa:	460b      	mov	r3, r1
 80045ac:	2900      	cmp	r1, #0
 80045ae:	d1f5      	bne.n	800459c <_printf_i+0x16c>
 80045b0:	e7b9      	b.n	8004526 <_printf_i+0xf6>
 80045b2:	6813      	ldr	r3, [r2, #0]
 80045b4:	6825      	ldr	r5, [r4, #0]
 80045b6:	6961      	ldr	r1, [r4, #20]
 80045b8:	1d18      	adds	r0, r3, #4
 80045ba:	6010      	str	r0, [r2, #0]
 80045bc:	0628      	lsls	r0, r5, #24
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	d501      	bpl.n	80045c6 <_printf_i+0x196>
 80045c2:	6019      	str	r1, [r3, #0]
 80045c4:	e002      	b.n	80045cc <_printf_i+0x19c>
 80045c6:	066a      	lsls	r2, r5, #25
 80045c8:	d5fb      	bpl.n	80045c2 <_printf_i+0x192>
 80045ca:	8019      	strh	r1, [r3, #0]
 80045cc:	2300      	movs	r3, #0
 80045ce:	6123      	str	r3, [r4, #16]
 80045d0:	4665      	mov	r5, ip
 80045d2:	e7b9      	b.n	8004548 <_printf_i+0x118>
 80045d4:	6813      	ldr	r3, [r2, #0]
 80045d6:	1d19      	adds	r1, r3, #4
 80045d8:	6011      	str	r1, [r2, #0]
 80045da:	681d      	ldr	r5, [r3, #0]
 80045dc:	6862      	ldr	r2, [r4, #4]
 80045de:	2100      	movs	r1, #0
 80045e0:	4628      	mov	r0, r5
 80045e2:	f7fb fe25 	bl	8000230 <memchr>
 80045e6:	b108      	cbz	r0, 80045ec <_printf_i+0x1bc>
 80045e8:	1b40      	subs	r0, r0, r5
 80045ea:	6060      	str	r0, [r4, #4]
 80045ec:	6863      	ldr	r3, [r4, #4]
 80045ee:	6123      	str	r3, [r4, #16]
 80045f0:	2300      	movs	r3, #0
 80045f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045f6:	e7a7      	b.n	8004548 <_printf_i+0x118>
 80045f8:	6923      	ldr	r3, [r4, #16]
 80045fa:	462a      	mov	r2, r5
 80045fc:	4639      	mov	r1, r7
 80045fe:	4630      	mov	r0, r6
 8004600:	47c0      	blx	r8
 8004602:	3001      	adds	r0, #1
 8004604:	d0aa      	beq.n	800455c <_printf_i+0x12c>
 8004606:	6823      	ldr	r3, [r4, #0]
 8004608:	079b      	lsls	r3, r3, #30
 800460a:	d413      	bmi.n	8004634 <_printf_i+0x204>
 800460c:	68e0      	ldr	r0, [r4, #12]
 800460e:	9b03      	ldr	r3, [sp, #12]
 8004610:	4298      	cmp	r0, r3
 8004612:	bfb8      	it	lt
 8004614:	4618      	movlt	r0, r3
 8004616:	e7a3      	b.n	8004560 <_printf_i+0x130>
 8004618:	2301      	movs	r3, #1
 800461a:	464a      	mov	r2, r9
 800461c:	4639      	mov	r1, r7
 800461e:	4630      	mov	r0, r6
 8004620:	47c0      	blx	r8
 8004622:	3001      	adds	r0, #1
 8004624:	d09a      	beq.n	800455c <_printf_i+0x12c>
 8004626:	3501      	adds	r5, #1
 8004628:	68e3      	ldr	r3, [r4, #12]
 800462a:	9a03      	ldr	r2, [sp, #12]
 800462c:	1a9b      	subs	r3, r3, r2
 800462e:	42ab      	cmp	r3, r5
 8004630:	dcf2      	bgt.n	8004618 <_printf_i+0x1e8>
 8004632:	e7eb      	b.n	800460c <_printf_i+0x1dc>
 8004634:	2500      	movs	r5, #0
 8004636:	f104 0919 	add.w	r9, r4, #25
 800463a:	e7f5      	b.n	8004628 <_printf_i+0x1f8>
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1ac      	bne.n	800459a <_printf_i+0x16a>
 8004640:	7803      	ldrb	r3, [r0, #0]
 8004642:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004646:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800464a:	e76c      	b.n	8004526 <_printf_i+0xf6>
 800464c:	080049df 	.word	0x080049df
 8004650:	080049f0 	.word	0x080049f0

08004654 <memmove>:
 8004654:	4288      	cmp	r0, r1
 8004656:	b510      	push	{r4, lr}
 8004658:	eb01 0302 	add.w	r3, r1, r2
 800465c:	d807      	bhi.n	800466e <memmove+0x1a>
 800465e:	1e42      	subs	r2, r0, #1
 8004660:	4299      	cmp	r1, r3
 8004662:	d00a      	beq.n	800467a <memmove+0x26>
 8004664:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004668:	f802 4f01 	strb.w	r4, [r2, #1]!
 800466c:	e7f8      	b.n	8004660 <memmove+0xc>
 800466e:	4283      	cmp	r3, r0
 8004670:	d9f5      	bls.n	800465e <memmove+0xa>
 8004672:	1881      	adds	r1, r0, r2
 8004674:	1ad2      	subs	r2, r2, r3
 8004676:	42d3      	cmn	r3, r2
 8004678:	d100      	bne.n	800467c <memmove+0x28>
 800467a:	bd10      	pop	{r4, pc}
 800467c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004680:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004684:	e7f7      	b.n	8004676 <memmove+0x22>
	...

08004688 <_free_r>:
 8004688:	b538      	push	{r3, r4, r5, lr}
 800468a:	4605      	mov	r5, r0
 800468c:	2900      	cmp	r1, #0
 800468e:	d045      	beq.n	800471c <_free_r+0x94>
 8004690:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004694:	1f0c      	subs	r4, r1, #4
 8004696:	2b00      	cmp	r3, #0
 8004698:	bfb8      	it	lt
 800469a:	18e4      	addlt	r4, r4, r3
 800469c:	f000 f8d2 	bl	8004844 <__malloc_lock>
 80046a0:	4a1f      	ldr	r2, [pc, #124]	; (8004720 <_free_r+0x98>)
 80046a2:	6813      	ldr	r3, [r2, #0]
 80046a4:	4610      	mov	r0, r2
 80046a6:	b933      	cbnz	r3, 80046b6 <_free_r+0x2e>
 80046a8:	6063      	str	r3, [r4, #4]
 80046aa:	6014      	str	r4, [r2, #0]
 80046ac:	4628      	mov	r0, r5
 80046ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046b2:	f000 b8c8 	b.w	8004846 <__malloc_unlock>
 80046b6:	42a3      	cmp	r3, r4
 80046b8:	d90c      	bls.n	80046d4 <_free_r+0x4c>
 80046ba:	6821      	ldr	r1, [r4, #0]
 80046bc:	1862      	adds	r2, r4, r1
 80046be:	4293      	cmp	r3, r2
 80046c0:	bf04      	itt	eq
 80046c2:	681a      	ldreq	r2, [r3, #0]
 80046c4:	685b      	ldreq	r3, [r3, #4]
 80046c6:	6063      	str	r3, [r4, #4]
 80046c8:	bf04      	itt	eq
 80046ca:	1852      	addeq	r2, r2, r1
 80046cc:	6022      	streq	r2, [r4, #0]
 80046ce:	6004      	str	r4, [r0, #0]
 80046d0:	e7ec      	b.n	80046ac <_free_r+0x24>
 80046d2:	4613      	mov	r3, r2
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	b10a      	cbz	r2, 80046dc <_free_r+0x54>
 80046d8:	42a2      	cmp	r2, r4
 80046da:	d9fa      	bls.n	80046d2 <_free_r+0x4a>
 80046dc:	6819      	ldr	r1, [r3, #0]
 80046de:	1858      	adds	r0, r3, r1
 80046e0:	42a0      	cmp	r0, r4
 80046e2:	d10b      	bne.n	80046fc <_free_r+0x74>
 80046e4:	6820      	ldr	r0, [r4, #0]
 80046e6:	4401      	add	r1, r0
 80046e8:	1858      	adds	r0, r3, r1
 80046ea:	4282      	cmp	r2, r0
 80046ec:	6019      	str	r1, [r3, #0]
 80046ee:	d1dd      	bne.n	80046ac <_free_r+0x24>
 80046f0:	6810      	ldr	r0, [r2, #0]
 80046f2:	6852      	ldr	r2, [r2, #4]
 80046f4:	605a      	str	r2, [r3, #4]
 80046f6:	4401      	add	r1, r0
 80046f8:	6019      	str	r1, [r3, #0]
 80046fa:	e7d7      	b.n	80046ac <_free_r+0x24>
 80046fc:	d902      	bls.n	8004704 <_free_r+0x7c>
 80046fe:	230c      	movs	r3, #12
 8004700:	602b      	str	r3, [r5, #0]
 8004702:	e7d3      	b.n	80046ac <_free_r+0x24>
 8004704:	6820      	ldr	r0, [r4, #0]
 8004706:	1821      	adds	r1, r4, r0
 8004708:	428a      	cmp	r2, r1
 800470a:	bf04      	itt	eq
 800470c:	6811      	ldreq	r1, [r2, #0]
 800470e:	6852      	ldreq	r2, [r2, #4]
 8004710:	6062      	str	r2, [r4, #4]
 8004712:	bf04      	itt	eq
 8004714:	1809      	addeq	r1, r1, r0
 8004716:	6021      	streq	r1, [r4, #0]
 8004718:	605c      	str	r4, [r3, #4]
 800471a:	e7c7      	b.n	80046ac <_free_r+0x24>
 800471c:	bd38      	pop	{r3, r4, r5, pc}
 800471e:	bf00      	nop
 8004720:	200153ac 	.word	0x200153ac

08004724 <_malloc_r>:
 8004724:	b570      	push	{r4, r5, r6, lr}
 8004726:	1ccd      	adds	r5, r1, #3
 8004728:	f025 0503 	bic.w	r5, r5, #3
 800472c:	3508      	adds	r5, #8
 800472e:	2d0c      	cmp	r5, #12
 8004730:	bf38      	it	cc
 8004732:	250c      	movcc	r5, #12
 8004734:	2d00      	cmp	r5, #0
 8004736:	4606      	mov	r6, r0
 8004738:	db01      	blt.n	800473e <_malloc_r+0x1a>
 800473a:	42a9      	cmp	r1, r5
 800473c:	d903      	bls.n	8004746 <_malloc_r+0x22>
 800473e:	230c      	movs	r3, #12
 8004740:	6033      	str	r3, [r6, #0]
 8004742:	2000      	movs	r0, #0
 8004744:	bd70      	pop	{r4, r5, r6, pc}
 8004746:	f000 f87d 	bl	8004844 <__malloc_lock>
 800474a:	4a21      	ldr	r2, [pc, #132]	; (80047d0 <_malloc_r+0xac>)
 800474c:	6814      	ldr	r4, [r2, #0]
 800474e:	4621      	mov	r1, r4
 8004750:	b991      	cbnz	r1, 8004778 <_malloc_r+0x54>
 8004752:	4c20      	ldr	r4, [pc, #128]	; (80047d4 <_malloc_r+0xb0>)
 8004754:	6823      	ldr	r3, [r4, #0]
 8004756:	b91b      	cbnz	r3, 8004760 <_malloc_r+0x3c>
 8004758:	4630      	mov	r0, r6
 800475a:	f000 f863 	bl	8004824 <_sbrk_r>
 800475e:	6020      	str	r0, [r4, #0]
 8004760:	4629      	mov	r1, r5
 8004762:	4630      	mov	r0, r6
 8004764:	f000 f85e 	bl	8004824 <_sbrk_r>
 8004768:	1c43      	adds	r3, r0, #1
 800476a:	d124      	bne.n	80047b6 <_malloc_r+0x92>
 800476c:	230c      	movs	r3, #12
 800476e:	6033      	str	r3, [r6, #0]
 8004770:	4630      	mov	r0, r6
 8004772:	f000 f868 	bl	8004846 <__malloc_unlock>
 8004776:	e7e4      	b.n	8004742 <_malloc_r+0x1e>
 8004778:	680b      	ldr	r3, [r1, #0]
 800477a:	1b5b      	subs	r3, r3, r5
 800477c:	d418      	bmi.n	80047b0 <_malloc_r+0x8c>
 800477e:	2b0b      	cmp	r3, #11
 8004780:	d90f      	bls.n	80047a2 <_malloc_r+0x7e>
 8004782:	600b      	str	r3, [r1, #0]
 8004784:	50cd      	str	r5, [r1, r3]
 8004786:	18cc      	adds	r4, r1, r3
 8004788:	4630      	mov	r0, r6
 800478a:	f000 f85c 	bl	8004846 <__malloc_unlock>
 800478e:	f104 000b 	add.w	r0, r4, #11
 8004792:	1d23      	adds	r3, r4, #4
 8004794:	f020 0007 	bic.w	r0, r0, #7
 8004798:	1ac3      	subs	r3, r0, r3
 800479a:	d0d3      	beq.n	8004744 <_malloc_r+0x20>
 800479c:	425a      	negs	r2, r3
 800479e:	50e2      	str	r2, [r4, r3]
 80047a0:	e7d0      	b.n	8004744 <_malloc_r+0x20>
 80047a2:	428c      	cmp	r4, r1
 80047a4:	684b      	ldr	r3, [r1, #4]
 80047a6:	bf16      	itet	ne
 80047a8:	6063      	strne	r3, [r4, #4]
 80047aa:	6013      	streq	r3, [r2, #0]
 80047ac:	460c      	movne	r4, r1
 80047ae:	e7eb      	b.n	8004788 <_malloc_r+0x64>
 80047b0:	460c      	mov	r4, r1
 80047b2:	6849      	ldr	r1, [r1, #4]
 80047b4:	e7cc      	b.n	8004750 <_malloc_r+0x2c>
 80047b6:	1cc4      	adds	r4, r0, #3
 80047b8:	f024 0403 	bic.w	r4, r4, #3
 80047bc:	42a0      	cmp	r0, r4
 80047be:	d005      	beq.n	80047cc <_malloc_r+0xa8>
 80047c0:	1a21      	subs	r1, r4, r0
 80047c2:	4630      	mov	r0, r6
 80047c4:	f000 f82e 	bl	8004824 <_sbrk_r>
 80047c8:	3001      	adds	r0, #1
 80047ca:	d0cf      	beq.n	800476c <_malloc_r+0x48>
 80047cc:	6025      	str	r5, [r4, #0]
 80047ce:	e7db      	b.n	8004788 <_malloc_r+0x64>
 80047d0:	200153ac 	.word	0x200153ac
 80047d4:	200153b0 	.word	0x200153b0

080047d8 <_realloc_r>:
 80047d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047da:	4607      	mov	r7, r0
 80047dc:	4614      	mov	r4, r2
 80047de:	460e      	mov	r6, r1
 80047e0:	b921      	cbnz	r1, 80047ec <_realloc_r+0x14>
 80047e2:	4611      	mov	r1, r2
 80047e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80047e8:	f7ff bf9c 	b.w	8004724 <_malloc_r>
 80047ec:	b922      	cbnz	r2, 80047f8 <_realloc_r+0x20>
 80047ee:	f7ff ff4b 	bl	8004688 <_free_r>
 80047f2:	4625      	mov	r5, r4
 80047f4:	4628      	mov	r0, r5
 80047f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047f8:	f000 f826 	bl	8004848 <_malloc_usable_size_r>
 80047fc:	42a0      	cmp	r0, r4
 80047fe:	d20f      	bcs.n	8004820 <_realloc_r+0x48>
 8004800:	4621      	mov	r1, r4
 8004802:	4638      	mov	r0, r7
 8004804:	f7ff ff8e 	bl	8004724 <_malloc_r>
 8004808:	4605      	mov	r5, r0
 800480a:	2800      	cmp	r0, #0
 800480c:	d0f2      	beq.n	80047f4 <_realloc_r+0x1c>
 800480e:	4631      	mov	r1, r6
 8004810:	4622      	mov	r2, r4
 8004812:	f7ff fc12 	bl	800403a <memcpy>
 8004816:	4631      	mov	r1, r6
 8004818:	4638      	mov	r0, r7
 800481a:	f7ff ff35 	bl	8004688 <_free_r>
 800481e:	e7e9      	b.n	80047f4 <_realloc_r+0x1c>
 8004820:	4635      	mov	r5, r6
 8004822:	e7e7      	b.n	80047f4 <_realloc_r+0x1c>

08004824 <_sbrk_r>:
 8004824:	b538      	push	{r3, r4, r5, lr}
 8004826:	4c06      	ldr	r4, [pc, #24]	; (8004840 <_sbrk_r+0x1c>)
 8004828:	2300      	movs	r3, #0
 800482a:	4605      	mov	r5, r0
 800482c:	4608      	mov	r0, r1
 800482e:	6023      	str	r3, [r4, #0]
 8004830:	f7ff fa20 	bl	8003c74 <_sbrk>
 8004834:	1c43      	adds	r3, r0, #1
 8004836:	d102      	bne.n	800483e <_sbrk_r+0x1a>
 8004838:	6823      	ldr	r3, [r4, #0]
 800483a:	b103      	cbz	r3, 800483e <_sbrk_r+0x1a>
 800483c:	602b      	str	r3, [r5, #0]
 800483e:	bd38      	pop	{r3, r4, r5, pc}
 8004840:	20015558 	.word	0x20015558

08004844 <__malloc_lock>:
 8004844:	4770      	bx	lr

08004846 <__malloc_unlock>:
 8004846:	4770      	bx	lr

08004848 <_malloc_usable_size_r>:
 8004848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800484c:	1f18      	subs	r0, r3, #4
 800484e:	2b00      	cmp	r3, #0
 8004850:	bfbc      	itt	lt
 8004852:	580b      	ldrlt	r3, [r1, r0]
 8004854:	18c0      	addlt	r0, r0, r3
 8004856:	4770      	bx	lr

08004858 <_init>:
 8004858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485a:	bf00      	nop
 800485c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800485e:	bc08      	pop	{r3}
 8004860:	469e      	mov	lr, r3
 8004862:	4770      	bx	lr

08004864 <_fini>:
 8004864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004866:	bf00      	nop
 8004868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800486a:	bc08      	pop	{r3}
 800486c:	469e      	mov	lr, r3
 800486e:	4770      	bx	lr
