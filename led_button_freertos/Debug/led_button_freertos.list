
led_button_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003774  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08003954  08003954  00013954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a84  08003a84  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08003a84  08003a84  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a84  08003a84  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a84  08003a84  00013a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a88  08003a88  00013a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08003a8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000154b4  20000028  08003ab4  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200154dc  08003ab4  000254dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_line   000093d1  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0000d66f  00000000  00000000  00029429  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00001b03  00000000  00000000  00036a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000b18  00000000  00000000  000385a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00078d84  00000000  00000000  000390b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000a40  00000000  00000000  000b1e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00002fe0  00000000  00000000  000b2880  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b5860  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fa0  00000000  00000000  000b58dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000028 	.word	0x20000028
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800393c 	.word	0x0800393c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000002c 	.word	0x2000002c
 800021c:	0800393c 	.word	0x0800393c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000230:	480d      	ldr	r0, [pc, #52]	; (8000268 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000232:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000234:	f003 f9be 	bl	80035b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000238:	480c      	ldr	r0, [pc, #48]	; (800026c <LoopForever+0x6>)
  ldr r1, =_edata
 800023a:	490d      	ldr	r1, [pc, #52]	; (8000270 <LoopForever+0xa>)
  ldr r2, =_sidata
 800023c:	4a0d      	ldr	r2, [pc, #52]	; (8000274 <LoopForever+0xe>)
  movs r3, #0
 800023e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000240:	e002      	b.n	8000248 <LoopCopyDataInit>

08000242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000246:	3304      	adds	r3, #4

08000248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800024a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800024c:	d3f9      	bcc.n	8000242 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800024e:	4a0a      	ldr	r2, [pc, #40]	; (8000278 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000250:	4c0a      	ldr	r4, [pc, #40]	; (800027c <LoopForever+0x16>)
  movs r3, #0
 8000252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000254:	e001      	b.n	800025a <LoopFillZerobss>

08000256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000258:	3204      	adds	r2, #4

0800025a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800025a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800025c:	d3fb      	bcc.n	8000256 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800025e:	f003 fb27 	bl	80038b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000262:	f003 f865 	bl	8003330 <main>

08000266 <LoopForever>:

LoopForever:
    b LoopForever
 8000266:	e7fe      	b.n	8000266 <LoopForever>
  ldr   r0, =_estack
 8000268:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800026c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000270:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000274:	08003a8c 	.word	0x08003a8c
  ldr r2, =_sbss
 8000278:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 800027c:	200154dc 	.word	0x200154dc

08000280 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000280:	e7fe      	b.n	8000280 <ADC_IRQHandler>

08000282 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000282:	b480      	push	{r7}
 8000284:	b087      	sub	sp, #28
 8000286:	af00      	add	r7, sp, #0
 8000288:	6078      	str	r0, [r7, #4]
 800028a:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800028c:	2300      	movs	r3, #0
 800028e:	617b      	str	r3, [r7, #20]
 8000290:	2300      	movs	r3, #0
 8000292:	613b      	str	r3, [r7, #16]
 8000294:	2300      	movs	r3, #0
 8000296:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000298:	2300      	movs	r3, #0
 800029a:	617b      	str	r3, [r7, #20]
 800029c:	e076      	b.n	800038c <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800029e:	2201      	movs	r2, #1
 80002a0:	697b      	ldr	r3, [r7, #20]
 80002a2:	fa02 f303 	lsl.w	r3, r2, r3
 80002a6:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	693a      	ldr	r2, [r7, #16]
 80002ae:	4013      	ands	r3, r2
 80002b0:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80002b2:	68fa      	ldr	r2, [r7, #12]
 80002b4:	693b      	ldr	r3, [r7, #16]
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d165      	bne.n	8000386 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	681a      	ldr	r2, [r3, #0]
 80002be:	697b      	ldr	r3, [r7, #20]
 80002c0:	005b      	lsls	r3, r3, #1
 80002c2:	2103      	movs	r1, #3
 80002c4:	fa01 f303 	lsl.w	r3, r1, r3
 80002c8:	43db      	mvns	r3, r3
 80002ca:	401a      	ands	r2, r3
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	681a      	ldr	r2, [r3, #0]
 80002d4:	683b      	ldr	r3, [r7, #0]
 80002d6:	791b      	ldrb	r3, [r3, #4]
 80002d8:	4619      	mov	r1, r3
 80002da:	697b      	ldr	r3, [r7, #20]
 80002dc:	005b      	lsls	r3, r3, #1
 80002de:	fa01 f303 	lsl.w	r3, r1, r3
 80002e2:	431a      	orrs	r2, r3
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	791b      	ldrb	r3, [r3, #4]
 80002ec:	2b01      	cmp	r3, #1
 80002ee:	d003      	beq.n	80002f8 <GPIO_Init+0x76>
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	791b      	ldrb	r3, [r3, #4]
 80002f4:	2b02      	cmp	r3, #2
 80002f6:	d12e      	bne.n	8000356 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	689a      	ldr	r2, [r3, #8]
 80002fc:	697b      	ldr	r3, [r7, #20]
 80002fe:	005b      	lsls	r3, r3, #1
 8000300:	2103      	movs	r1, #3
 8000302:	fa01 f303 	lsl.w	r3, r1, r3
 8000306:	43db      	mvns	r3, r3
 8000308:	401a      	ands	r2, r3
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	689a      	ldr	r2, [r3, #8]
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	795b      	ldrb	r3, [r3, #5]
 8000316:	4619      	mov	r1, r3
 8000318:	697b      	ldr	r3, [r7, #20]
 800031a:	005b      	lsls	r3, r3, #1
 800031c:	fa01 f303 	lsl.w	r3, r1, r3
 8000320:	431a      	orrs	r2, r3
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	685a      	ldr	r2, [r3, #4]
 800032a:	697b      	ldr	r3, [r7, #20]
 800032c:	b29b      	uxth	r3, r3
 800032e:	4619      	mov	r1, r3
 8000330:	2301      	movs	r3, #1
 8000332:	408b      	lsls	r3, r1
 8000334:	43db      	mvns	r3, r3
 8000336:	401a      	ands	r2, r3
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	685b      	ldr	r3, [r3, #4]
 8000340:	683a      	ldr	r2, [r7, #0]
 8000342:	7992      	ldrb	r2, [r2, #6]
 8000344:	4611      	mov	r1, r2
 8000346:	697a      	ldr	r2, [r7, #20]
 8000348:	b292      	uxth	r2, r2
 800034a:	fa01 f202 	lsl.w	r2, r1, r2
 800034e:	b292      	uxth	r2, r2
 8000350:	431a      	orrs	r2, r3
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	68da      	ldr	r2, [r3, #12]
 800035a:	697b      	ldr	r3, [r7, #20]
 800035c:	b29b      	uxth	r3, r3
 800035e:	005b      	lsls	r3, r3, #1
 8000360:	2103      	movs	r1, #3
 8000362:	fa01 f303 	lsl.w	r3, r1, r3
 8000366:	43db      	mvns	r3, r3
 8000368:	401a      	ands	r2, r3
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	68da      	ldr	r2, [r3, #12]
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	79db      	ldrb	r3, [r3, #7]
 8000376:	4619      	mov	r1, r3
 8000378:	697b      	ldr	r3, [r7, #20]
 800037a:	005b      	lsls	r3, r3, #1
 800037c:	fa01 f303 	lsl.w	r3, r1, r3
 8000380:	431a      	orrs	r2, r3
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000386:	697b      	ldr	r3, [r7, #20]
 8000388:	3301      	adds	r3, #1
 800038a:	617b      	str	r3, [r7, #20]
 800038c:	697b      	ldr	r3, [r7, #20]
 800038e:	2b0f      	cmp	r3, #15
 8000390:	d985      	bls.n	800029e <GPIO_Init+0x1c>
    }
  }
}
 8000392:	bf00      	nop
 8000394:	371c      	adds	r7, #28
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr

0800039e <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800039e:	b480      	push	{r7}
 80003a0:	b085      	sub	sp, #20
 80003a2:	af00      	add	r7, sp, #0
 80003a4:	6078      	str	r0, [r7, #4]
 80003a6:	460b      	mov	r3, r1
 80003a8:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80003aa:	2300      	movs	r3, #0
 80003ac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	691a      	ldr	r2, [r3, #16]
 80003b2:	887b      	ldrh	r3, [r7, #2]
 80003b4:	4013      	ands	r3, r2
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d002      	beq.n	80003c0 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80003ba:	2301      	movs	r3, #1
 80003bc:	73fb      	strb	r3, [r7, #15]
 80003be:	e001      	b.n	80003c4 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80003c0:	2300      	movs	r3, #0
 80003c2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80003c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	3714      	adds	r7, #20
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr

080003d2 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80003d2:	b480      	push	{r7}
 80003d4:	b083      	sub	sp, #12
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	6078      	str	r0, [r7, #4]
 80003da:	460b      	mov	r3, r1
 80003dc:	807b      	strh	r3, [r7, #2]
 80003de:	4613      	mov	r3, r2
 80003e0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 80003e2:	787b      	ldrb	r3, [r7, #1]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d003      	beq.n	80003f0 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	887a      	ldrh	r2, [r7, #2]
 80003ec:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 80003ee:	e002      	b.n	80003f6 <GPIO_WriteBit+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	887a      	ldrh	r2, [r7, #2]
 80003f4:	835a      	strh	r2, [r3, #26]
}
 80003f6:	bf00      	nop
 80003f8:	370c      	adds	r7, #12
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr

08000402 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000402:	b480      	push	{r7}
 8000404:	b085      	sub	sp, #20
 8000406:	af00      	add	r7, sp, #0
 8000408:	6078      	str	r0, [r7, #4]
 800040a:	460b      	mov	r3, r1
 800040c:	807b      	strh	r3, [r7, #2]
 800040e:	4613      	mov	r3, r2
 8000410:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000412:	2300      	movs	r3, #0
 8000414:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000416:	2300      	movs	r3, #0
 8000418:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800041a:	787a      	ldrb	r2, [r7, #1]
 800041c:	887b      	ldrh	r3, [r7, #2]
 800041e:	f003 0307 	and.w	r3, r3, #7
 8000422:	009b      	lsls	r3, r3, #2
 8000424:	fa02 f303 	lsl.w	r3, r2, r3
 8000428:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800042a:	887b      	ldrh	r3, [r7, #2]
 800042c:	08db      	lsrs	r3, r3, #3
 800042e:	b29b      	uxth	r3, r3
 8000430:	461a      	mov	r2, r3
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	3208      	adds	r2, #8
 8000436:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800043a:	887b      	ldrh	r3, [r7, #2]
 800043c:	f003 0307 	and.w	r3, r3, #7
 8000440:	009b      	lsls	r3, r3, #2
 8000442:	210f      	movs	r1, #15
 8000444:	fa01 f303 	lsl.w	r3, r1, r3
 8000448:	43db      	mvns	r3, r3
 800044a:	8879      	ldrh	r1, [r7, #2]
 800044c:	08c9      	lsrs	r1, r1, #3
 800044e:	b289      	uxth	r1, r1
 8000450:	4608      	mov	r0, r1
 8000452:	ea02 0103 	and.w	r1, r2, r3
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	f100 0208 	add.w	r2, r0, #8
 800045c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000460:	887b      	ldrh	r3, [r7, #2]
 8000462:	08db      	lsrs	r3, r3, #3
 8000464:	b29b      	uxth	r3, r3
 8000466:	461a      	mov	r2, r3
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	3208      	adds	r2, #8
 800046c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000470:	68fa      	ldr	r2, [r7, #12]
 8000472:	4313      	orrs	r3, r2
 8000474:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000476:	887b      	ldrh	r3, [r7, #2]
 8000478:	08db      	lsrs	r3, r3, #3
 800047a:	b29b      	uxth	r3, r3
 800047c:	461a      	mov	r2, r3
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	3208      	adds	r2, #8
 8000482:	68b9      	ldr	r1, [r7, #8]
 8000484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000488:	bf00      	nop
 800048a:	3714      	adds	r7, #20
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr

08000494 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000498:	4b16      	ldr	r3, [pc, #88]	; (80004f4 <RCC_DeInit+0x60>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a15      	ldr	r2, [pc, #84]	; (80004f4 <RCC_DeInit+0x60>)
 800049e:	f043 0301 	orr.w	r3, r3, #1
 80004a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80004a4:	4b13      	ldr	r3, [pc, #76]	; (80004f4 <RCC_DeInit+0x60>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80004aa:	4b12      	ldr	r3, [pc, #72]	; (80004f4 <RCC_DeInit+0x60>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a11      	ldr	r2, [pc, #68]	; (80004f4 <RCC_DeInit+0x60>)
 80004b0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80004b4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80004b8:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80004ba:	4b0e      	ldr	r3, [pc, #56]	; (80004f4 <RCC_DeInit+0x60>)
 80004bc:	4a0e      	ldr	r2, [pc, #56]	; (80004f8 <RCC_DeInit+0x64>)
 80004be:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 80004c0:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <RCC_DeInit+0x60>)
 80004c2:	4a0e      	ldr	r2, [pc, #56]	; (80004fc <RCC_DeInit+0x68>)
 80004c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80004c8:	4b0a      	ldr	r3, [pc, #40]	; (80004f4 <RCC_DeInit+0x60>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a09      	ldr	r2, [pc, #36]	; (80004f4 <RCC_DeInit+0x60>)
 80004ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80004d4:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <RCC_DeInit+0x60>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
 80004da:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <RCC_DeInit+0x60>)
 80004dc:	2200      	movs	r2, #0
 80004de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
 80004e2:	4b04      	ldr	r3, [pc, #16]	; (80004f4 <RCC_DeInit+0x60>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif /* STM32F410xx || STM32F413_423xx */  
}
 80004ea:	bf00      	nop
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr
 80004f4:	40023800 	.word	0x40023800
 80004f8:	24003010 	.word	0x24003010
 80004fc:	20003000 	.word	0x20003000

08000500 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000500:	b480      	push	{r7}
 8000502:	b08b      	sub	sp, #44	; 0x2c
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000508:	2300      	movs	r3, #0
 800050a:	623b      	str	r3, [r7, #32]
 800050c:	2300      	movs	r3, #0
 800050e:	61fb      	str	r3, [r7, #28]
 8000510:	2300      	movs	r3, #0
 8000512:	627b      	str	r3, [r7, #36]	; 0x24
 8000514:	2302      	movs	r3, #2
 8000516:	61bb      	str	r3, [r7, #24]
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]
 800051c:	2302      	movs	r3, #2
 800051e:	613b      	str	r3, [r7, #16]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
 8000520:	2302      	movs	r3, #2
 8000522:	60fb      	str	r3, [r7, #12]
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000524:	4b6f      	ldr	r3, [pc, #444]	; (80006e4 <RCC_GetClocksFreq+0x1e4>)
 8000526:	689b      	ldr	r3, [r3, #8]
 8000528:	f003 030c 	and.w	r3, r3, #12
 800052c:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 800052e:	6a3b      	ldr	r3, [r7, #32]
 8000530:	2b0c      	cmp	r3, #12
 8000532:	f200 8091 	bhi.w	8000658 <RCC_GetClocksFreq+0x158>
 8000536:	a201      	add	r2, pc, #4	; (adr r2, 800053c <RCC_GetClocksFreq+0x3c>)
 8000538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800053c:	08000571 	.word	0x08000571
 8000540:	08000659 	.word	0x08000659
 8000544:	08000659 	.word	0x08000659
 8000548:	08000659 	.word	0x08000659
 800054c:	08000579 	.word	0x08000579
 8000550:	08000659 	.word	0x08000659
 8000554:	08000659 	.word	0x08000659
 8000558:	08000659 	.word	0x08000659
 800055c:	08000581 	.word	0x08000581
 8000560:	08000659 	.word	0x08000659
 8000564:	08000659 	.word	0x08000659
 8000568:	08000659 	.word	0x08000659
 800056c:	080005ed 	.word	0x080005ed
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4a5d      	ldr	r2, [pc, #372]	; (80006e8 <RCC_GetClocksFreq+0x1e8>)
 8000574:	601a      	str	r2, [r3, #0]
    break;
 8000576:	e073      	b.n	8000660 <RCC_GetClocksFreq+0x160>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4a5c      	ldr	r2, [pc, #368]	; (80006ec <RCC_GetClocksFreq+0x1ec>)
 800057c:	601a      	str	r2, [r3, #0]
    break;
 800057e:	e06f      	b.n	8000660 <RCC_GetClocksFreq+0x160>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000580:	4b58      	ldr	r3, [pc, #352]	; (80006e4 <RCC_GetClocksFreq+0x1e4>)
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	0d9b      	lsrs	r3, r3, #22
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	617b      	str	r3, [r7, #20]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800058c:	4b55      	ldr	r3, [pc, #340]	; (80006e4 <RCC_GetClocksFreq+0x1e4>)
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000594:	613b      	str	r3, [r7, #16]
    
    if (pllsource != 0)
 8000596:	697b      	ldr	r3, [r7, #20]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d00c      	beq.n	80005b6 <RCC_GetClocksFreq+0xb6>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800059c:	4a53      	ldr	r2, [pc, #332]	; (80006ec <RCC_GetClocksFreq+0x1ec>)
 800059e:	693b      	ldr	r3, [r7, #16]
 80005a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80005a4:	4a4f      	ldr	r2, [pc, #316]	; (80006e4 <RCC_GetClocksFreq+0x1e4>)
 80005a6:	6852      	ldr	r2, [r2, #4]
 80005a8:	0992      	lsrs	r2, r2, #6
 80005aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80005ae:	fb02 f303 	mul.w	r3, r2, r3
 80005b2:	627b      	str	r3, [r7, #36]	; 0x24
 80005b4:	e00b      	b.n	80005ce <RCC_GetClocksFreq+0xce>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80005b6:	4a4c      	ldr	r2, [pc, #304]	; (80006e8 <RCC_GetClocksFreq+0x1e8>)
 80005b8:	693b      	ldr	r3, [r7, #16]
 80005ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80005be:	4a49      	ldr	r2, [pc, #292]	; (80006e4 <RCC_GetClocksFreq+0x1e4>)
 80005c0:	6852      	ldr	r2, [r2, #4]
 80005c2:	0992      	lsrs	r2, r2, #6
 80005c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80005c8:	fb02 f303 	mul.w	r3, r2, r3
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80005ce:	4b45      	ldr	r3, [pc, #276]	; (80006e4 <RCC_GetClocksFreq+0x1e4>)
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	0c1b      	lsrs	r3, r3, #16
 80005d4:	f003 0303 	and.w	r3, r3, #3
 80005d8:	3301      	adds	r3, #1
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	61bb      	str	r3, [r7, #24]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80005de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005e0:	69bb      	ldr	r3, [r7, #24]
 80005e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	601a      	str	r2, [r3, #0]
    break;
 80005ea:	e039      	b.n	8000660 <RCC_GetClocksFreq+0x160>
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
  case 0x0C:  /* PLL R used as system clock  source */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80005ec:	4b3d      	ldr	r3, [pc, #244]	; (80006e4 <RCC_GetClocksFreq+0x1e4>)
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	0d9b      	lsrs	r3, r3, #22
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	617b      	str	r3, [r7, #20]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80005f8:	4b3a      	ldr	r3, [pc, #232]	; (80006e4 <RCC_GetClocksFreq+0x1e4>)
 80005fa:	685b      	ldr	r3, [r3, #4]
 80005fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000600:	613b      	str	r3, [r7, #16]
    
    if (pllsource != 0)
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d00c      	beq.n	8000622 <RCC_GetClocksFreq+0x122>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000608:	4a38      	ldr	r2, [pc, #224]	; (80006ec <RCC_GetClocksFreq+0x1ec>)
 800060a:	693b      	ldr	r3, [r7, #16]
 800060c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000610:	4a34      	ldr	r2, [pc, #208]	; (80006e4 <RCC_GetClocksFreq+0x1e4>)
 8000612:	6852      	ldr	r2, [r2, #4]
 8000614:	0992      	lsrs	r2, r2, #6
 8000616:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800061a:	fb02 f303 	mul.w	r3, r2, r3
 800061e:	627b      	str	r3, [r7, #36]	; 0x24
 8000620:	e00b      	b.n	800063a <RCC_GetClocksFreq+0x13a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000622:	4a31      	ldr	r2, [pc, #196]	; (80006e8 <RCC_GetClocksFreq+0x1e8>)
 8000624:	693b      	ldr	r3, [r7, #16]
 8000626:	fbb2 f3f3 	udiv	r3, r2, r3
 800062a:	4a2e      	ldr	r2, [pc, #184]	; (80006e4 <RCC_GetClocksFreq+0x1e4>)
 800062c:	6852      	ldr	r2, [r2, #4]
 800062e:	0992      	lsrs	r2, r2, #6
 8000630:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000634:	fb02 f303 	mul.w	r3, r2, r3
 8000638:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
 800063a:	4b2a      	ldr	r3, [pc, #168]	; (80006e4 <RCC_GetClocksFreq+0x1e4>)
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	0f1b      	lsrs	r3, r3, #28
 8000640:	f003 0307 	and.w	r3, r3, #7
 8000644:	3301      	adds	r3, #1
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	60fb      	str	r3, [r7, #12]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
 800064a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	601a      	str	r2, [r3, #0]
    break;
 8000656:	e003      	b.n	8000660 <RCC_GetClocksFreq+0x160>
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4a23      	ldr	r2, [pc, #140]	; (80006e8 <RCC_GetClocksFreq+0x1e8>)
 800065c:	601a      	str	r2, [r3, #0]
    break;
 800065e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000660:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <RCC_GetClocksFreq+0x1e4>)
 8000662:	689b      	ldr	r3, [r3, #8]
 8000664:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000668:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 800066a:	6a3b      	ldr	r3, [r7, #32]
 800066c:	091b      	lsrs	r3, r3, #4
 800066e:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000670:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <RCC_GetClocksFreq+0x1f0>)
 8000672:	6a3b      	ldr	r3, [r7, #32]
 8000674:	4413      	add	r3, r2
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	b2db      	uxtb	r3, r3
 800067a:	61fb      	str	r3, [r7, #28]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	69fb      	ldr	r3, [r7, #28]
 8000682:	40da      	lsrs	r2, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000688:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <RCC_GetClocksFreq+0x1e4>)
 800068a:	689b      	ldr	r3, [r3, #8]
 800068c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000690:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 10;
 8000692:	6a3b      	ldr	r3, [r7, #32]
 8000694:	0a9b      	lsrs	r3, r3, #10
 8000696:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000698:	4a15      	ldr	r2, [pc, #84]	; (80006f0 <RCC_GetClocksFreq+0x1f0>)
 800069a:	6a3b      	ldr	r3, [r7, #32]
 800069c:	4413      	add	r3, r2
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	61fb      	str	r3, [r7, #28]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	685a      	ldr	r2, [r3, #4]
 80006a8:	69fb      	ldr	r3, [r7, #28]
 80006aa:	40da      	lsrs	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <RCC_GetClocksFreq+0x1e4>)
 80006b2:	689b      	ldr	r3, [r3, #8]
 80006b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80006b8:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 13;
 80006ba:	6a3b      	ldr	r3, [r7, #32]
 80006bc:	0b5b      	lsrs	r3, r3, #13
 80006be:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80006c0:	4a0b      	ldr	r2, [pc, #44]	; (80006f0 <RCC_GetClocksFreq+0x1f0>)
 80006c2:	6a3b      	ldr	r3, [r7, #32]
 80006c4:	4413      	add	r3, r2
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	61fb      	str	r3, [r7, #28]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	685a      	ldr	r2, [r3, #4]
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	40da      	lsrs	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	60da      	str	r2, [r3, #12]
}
 80006d8:	bf00      	nop
 80006da:	372c      	adds	r7, #44	; 0x2c
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	40023800 	.word	0x40023800
 80006e8:	00f42400 	.word	0x00f42400
 80006ec:	007a1200 	.word	0x007a1200
 80006f0:	20000000 	.word	0x20000000

080006f4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	460b      	mov	r3, r1
 80006fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000700:	78fb      	ldrb	r3, [r7, #3]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d006      	beq.n	8000714 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000706:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000708:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800070a:	4909      	ldr	r1, [pc, #36]	; (8000730 <RCC_AHB1PeriphClockCmd+0x3c>)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4313      	orrs	r3, r2
 8000710:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000712:	e006      	b.n	8000722 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000716:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	43db      	mvns	r3, r3
 800071c:	4904      	ldr	r1, [pc, #16]	; (8000730 <RCC_AHB1PeriphClockCmd+0x3c>)
 800071e:	4013      	ands	r3, r2
 8000720:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800

08000734 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	460b      	mov	r3, r1
 800073e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000740:	78fb      	ldrb	r3, [r7, #3]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d006      	beq.n	8000754 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000746:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <RCC_APB1PeriphClockCmd+0x3c>)
 8000748:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800074a:	4909      	ldr	r1, [pc, #36]	; (8000770 <RCC_APB1PeriphClockCmd+0x3c>)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	4313      	orrs	r3, r2
 8000750:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000752:	e006      	b.n	8000762 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <RCC_APB1PeriphClockCmd+0x3c>)
 8000756:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	43db      	mvns	r3, r3
 800075c:	4904      	ldr	r1, [pc, #16]	; (8000770 <RCC_APB1PeriphClockCmd+0x3c>)
 800075e:	4013      	ands	r3, r2
 8000760:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800

08000774 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	460b      	mov	r3, r1
 800077e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000780:	78fb      	ldrb	r3, [r7, #3]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d006      	beq.n	8000794 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000786:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <RCC_APB2PeriphClockCmd+0x3c>)
 8000788:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800078a:	4909      	ldr	r1, [pc, #36]	; (80007b0 <RCC_APB2PeriphClockCmd+0x3c>)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4313      	orrs	r3, r2
 8000790:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000792:	e006      	b.n	80007a2 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <RCC_APB2PeriphClockCmd+0x3c>)
 8000796:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	43db      	mvns	r3, r3
 800079c:	4904      	ldr	r1, [pc, #16]	; (80007b0 <RCC_APB2PeriphClockCmd+0x3c>)
 800079e:	4013      	ands	r3, r2
 80007a0:	644b      	str	r3, [r1, #68]	; 0x44
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	40023800 	.word	0x40023800

080007b4 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	; 0x28
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80007be:	2300      	movs	r3, #0
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
 80007c2:	2300      	movs	r3, #0
 80007c4:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	8a1b      	ldrh	r3, [r3, #16]
 80007d2:	b29b      	uxth	r3, r3
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80007d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	88db      	ldrh	r3, [r3, #6]
 80007e2:	461a      	mov	r2, r3
 80007e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e6:	4313      	orrs	r3, r2
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80007ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ec:	b29a      	uxth	r2, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	899b      	ldrh	r3, [r3, #12]
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80007fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fc:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000800:	f023 030c 	bic.w	r3, r3, #12
 8000804:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	889a      	ldrh	r2, [r3, #4]
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	891b      	ldrh	r3, [r3, #8]
 800080e:	4313      	orrs	r3, r2
 8000810:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000816:	4313      	orrs	r3, r2
 8000818:	b29b      	uxth	r3, r3
 800081a:	461a      	mov	r2, r3
 800081c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081e:	4313      	orrs	r3, r2
 8000820:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000824:	b29a      	uxth	r2, r3
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	8a9b      	ldrh	r3, [r3, #20]
 800082e:	b29b      	uxth	r3, r3
 8000830:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000838:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	899b      	ldrh	r3, [r3, #12]
 800083e:	461a      	mov	r2, r3
 8000840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000842:	4313      	orrs	r3, r2
 8000844:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000848:	b29a      	uxth	r2, r3
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800084e:	f107 0308 	add.w	r3, r7, #8
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff fe54 	bl	8000500 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4a30      	ldr	r2, [pc, #192]	; (800091c <USART_Init+0x168>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d003      	beq.n	8000868 <USART_Init+0xb4>
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4a2f      	ldr	r2, [pc, #188]	; (8000920 <USART_Init+0x16c>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d102      	bne.n	800086e <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	623b      	str	r3, [r7, #32]
 800086c:	e001      	b.n	8000872 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	899b      	ldrh	r3, [r3, #12]
 8000876:	b29b      	uxth	r3, r3
 8000878:	b21b      	sxth	r3, r3
 800087a:	2b00      	cmp	r3, #0
 800087c:	da0c      	bge.n	8000898 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800087e:	6a3a      	ldr	r2, [r7, #32]
 8000880:	4613      	mov	r3, r2
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	4413      	add	r3, r2
 8000886:	009a      	lsls	r2, r3, #2
 8000888:	441a      	add	r2, r3
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	fbb2 f3f3 	udiv	r3, r2, r3
 8000894:	61fb      	str	r3, [r7, #28]
 8000896:	e00b      	b.n	80008b0 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000898:	6a3a      	ldr	r2, [r7, #32]
 800089a:	4613      	mov	r3, r2
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	4413      	add	r3, r2
 80008a0:	009a      	lsls	r2, r3, #2
 80008a2:	441a      	add	r2, r3
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ae:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	4a1c      	ldr	r2, [pc, #112]	; (8000924 <USART_Init+0x170>)
 80008b4:	fba2 2303 	umull	r2, r3, r2, r3
 80008b8:	095b      	lsrs	r3, r3, #5
 80008ba:	011b      	lsls	r3, r3, #4
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80008be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c0:	091b      	lsrs	r3, r3, #4
 80008c2:	2264      	movs	r2, #100	; 0x64
 80008c4:	fb02 f303 	mul.w	r3, r2, r3
 80008c8:	69fa      	ldr	r2, [r7, #28]
 80008ca:	1ad3      	subs	r3, r2, r3
 80008cc:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	899b      	ldrh	r3, [r3, #12]
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	b21b      	sxth	r3, r3
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	da0c      	bge.n	80008f4 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80008da:	69bb      	ldr	r3, [r7, #24]
 80008dc:	00db      	lsls	r3, r3, #3
 80008de:	3332      	adds	r3, #50	; 0x32
 80008e0:	4a10      	ldr	r2, [pc, #64]	; (8000924 <USART_Init+0x170>)
 80008e2:	fba2 2303 	umull	r2, r3, r2, r3
 80008e6:	095b      	lsrs	r3, r3, #5
 80008e8:	f003 0307 	and.w	r3, r3, #7
 80008ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008ee:	4313      	orrs	r3, r2
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
 80008f2:	e00b      	b.n	800090c <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80008f4:	69bb      	ldr	r3, [r7, #24]
 80008f6:	011b      	lsls	r3, r3, #4
 80008f8:	3332      	adds	r3, #50	; 0x32
 80008fa:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <USART_Init+0x170>)
 80008fc:	fba2 2303 	umull	r2, r3, r2, r3
 8000900:	095b      	lsrs	r3, r3, #5
 8000902:	f003 030f 	and.w	r3, r3, #15
 8000906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000908:	4313      	orrs	r3, r2
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 800090c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090e:	b29a      	uxth	r2, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	811a      	strh	r2, [r3, #8]
}
 8000914:	bf00      	nop
 8000916:	3728      	adds	r7, #40	; 0x28
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40011000 	.word	0x40011000
 8000920:	40011400 	.word	0x40011400
 8000924:	51eb851f 	.word	0x51eb851f

08000928 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	460b      	mov	r3, r1
 8000932:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000934:	78fb      	ldrb	r3, [r7, #3]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d008      	beq.n	800094c <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	899b      	ldrh	r3, [r3, #12]
 800093e:	b29b      	uxth	r3, r3
 8000940:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000944:	b29a      	uxth	r2, r3
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 800094a:	e007      	b.n	800095c <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	899b      	ldrh	r3, [r3, #12]
 8000950:	b29b      	uxth	r3, r3
 8000952:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000956:	b29a      	uxth	r2, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	819a      	strh	r2, [r3, #12]
}
 800095c:	bf00      	nop
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	460b      	mov	r3, r1
 8000972:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000974:	887b      	ldrh	r3, [r7, #2]
 8000976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800097a:	b29a      	uxth	r2, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	809a      	strh	r2, [r3, #4]
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	460b      	mov	r3, r1
 8000996:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000998:	2300      	movs	r3, #0
 800099a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	881b      	ldrh	r3, [r3, #0]
 80009a0:	b29a      	uxth	r2, r3
 80009a2:	887b      	ldrh	r3, [r7, #2]
 80009a4:	4013      	ands	r3, r2
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d002      	beq.n	80009b2 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80009ac:	2301      	movs	r3, #1
 80009ae:	73fb      	strb	r3, [r7, #15]
 80009b0:	e001      	b.n	80009b6 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80009b2:	2300      	movs	r3, #0
 80009b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3714      	adds	r7, #20
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	f103 0208 	add.w	r2, r3, #8
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	f103 0208 	add.w	r2, r3, #8
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f103 0208 	add.w	r2, r3, #8
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000a1e:	b480      	push	{r7}
 8000a20:	b085      	sub	sp, #20
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
 8000a26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	68fa      	ldr	r2, [r7, #12]
 8000a32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	689a      	ldr	r2, [r3, #8]
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	683a      	ldr	r2, [r7, #0]
 8000a42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	683a      	ldr	r2, [r7, #0]
 8000a48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	687a      	ldr	r2, [r7, #4]
 8000a4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	1c5a      	adds	r2, r3, #1
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	601a      	str	r2, [r3, #0]
}
 8000a5a:	bf00      	nop
 8000a5c:	3714      	adds	r7, #20
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000a66:	b480      	push	{r7}
 8000a68:	b085      	sub	sp, #20
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	691b      	ldr	r3, [r3, #16]
 8000a72:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	6892      	ldr	r2, [r2, #8]
 8000a7c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	689b      	ldr	r3, [r3, #8]
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	6852      	ldr	r2, [r2, #4]
 8000a86:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d103      	bne.n	8000a9a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	689a      	ldr	r2, [r3, #8]
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	1e5a      	subs	r2, r3, #1
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	681b      	ldr	r3, [r3, #0]
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3714      	adds	r7, #20
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b08c      	sub	sp, #48	; 0x30
 8000abe:	af04      	add	r7, sp, #16
 8000ac0:	60f8      	str	r0, [r7, #12]
 8000ac2:	60b9      	str	r1, [r7, #8]
 8000ac4:	603b      	str	r3, [r7, #0]
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000aca:	88fb      	ldrh	r3, [r7, #6]
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f000 fe8e 	bl	80017f0 <pvPortMalloc>
 8000ad4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d00e      	beq.n	8000afa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000adc:	2058      	movs	r0, #88	; 0x58
 8000ade:	f000 fe87 	bl	80017f0 <pvPortMalloc>
 8000ae2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d003      	beq.n	8000af2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	697a      	ldr	r2, [r7, #20]
 8000aee:	631a      	str	r2, [r3, #48]	; 0x30
 8000af0:	e005      	b.n	8000afe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8000af2:	6978      	ldr	r0, [r7, #20]
 8000af4:	f000 ff3e 	bl	8001974 <vPortFree>
 8000af8:	e001      	b.n	8000afe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d013      	beq.n	8000b2c <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000b04:	88fa      	ldrh	r2, [r7, #6]
 8000b06:	2300      	movs	r3, #0
 8000b08:	9303      	str	r3, [sp, #12]
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	9302      	str	r3, [sp, #8]
 8000b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b10:	9301      	str	r3, [sp, #4]
 8000b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b14:	9300      	str	r3, [sp, #0]
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	68b9      	ldr	r1, [r7, #8]
 8000b1a:	68f8      	ldr	r0, [r7, #12]
 8000b1c:	f000 f80e 	bl	8000b3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000b20:	69f8      	ldr	r0, [r7, #28]
 8000b22:	f000 f89f 	bl	8000c64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8000b26:	2301      	movs	r3, #1
 8000b28:	61bb      	str	r3, [r7, #24]
 8000b2a:	e002      	b.n	8000b32 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000b2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b30:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8000b32:	69bb      	ldr	r3, [r7, #24]
	}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3720      	adds	r7, #32
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b088      	sub	sp, #32
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
 8000b48:	603b      	str	r3, [r7, #0]
			xRunPrivileged = pdFALSE;
		}
		uxPriority &= ~portPRIVILEGE_BIT;
	#endif /* portUSING_MPU_WRAPPERS == 1 */

	configASSERT( pcName );
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d109      	bne.n	8000b64 <prvInitialiseNewTask+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b54:	f383 8811 	msr	BASEPRI, r3
 8000b58:	f3bf 8f6f 	isb	sy
 8000b5c:	f3bf 8f4f 	dsb	sy
 8000b60:	617b      	str	r3, [r7, #20]
 8000b62:	e7fe      	b.n	8000b62 <prvInitialiseNewTask+0x26>

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b66:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	21a5      	movs	r1, #165	; 0xa5
 8000b70:	f002 fedc 	bl	800392c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	4413      	add	r3, r2
 8000b84:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000b86:	69bb      	ldr	r3, [r7, #24]
 8000b88:	f023 0307 	bic.w	r3, r3, #7
 8000b8c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	f003 0307 	and.w	r3, r3, #7
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d009      	beq.n	8000bac <prvInitialiseNewTask+0x70>
 8000b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b9c:	f383 8811 	msr	BASEPRI, r3
 8000ba0:	f3bf 8f6f 	isb	sy
 8000ba4:	f3bf 8f4f 	dsb	sy
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	e7fe      	b.n	8000baa <prvInitialiseNewTask+0x6e>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000bac:	2300      	movs	r3, #0
 8000bae:	61fb      	str	r3, [r7, #28]
 8000bb0:	e012      	b.n	8000bd8 <prvInitialiseNewTask+0x9c>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	7819      	ldrb	r1, [r3, #0]
 8000bba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	3334      	adds	r3, #52	; 0x34
 8000bc2:	460a      	mov	r2, r1
 8000bc4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == ( char ) 0x00 )
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	4413      	add	r3, r2
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d006      	beq.n	8000be0 <prvInitialiseNewTask+0xa4>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	61fb      	str	r3, [r7, #28]
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	2b09      	cmp	r3, #9
 8000bdc:	d9e9      	bls.n	8000bb2 <prvInitialiseNewTask+0x76>
 8000bde:	e000      	b.n	8000be2 <prvInitialiseNewTask+0xa6>
		{
			break;
 8000be0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000be4:	2200      	movs	r2, #0
 8000be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bec:	2b04      	cmp	r3, #4
 8000bee:	d901      	bls.n	8000bf4 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bf8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8000bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bfe:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8000c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c02:	2200      	movs	r2, #0
 8000c04:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c08:	3304      	adds	r3, #4
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff fefa 	bl	8000a04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c12:	3318      	adds	r3, #24
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fef5 	bl	8000a04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c1e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c22:	f1c3 0205 	rsb	r2, r3, #5
 8000c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c28:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c2e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8000c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c32:	2200      	movs	r2, #0
 8000c34:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000c3e:	683a      	ldr	r2, [r7, #0]
 8000c40:	68f9      	ldr	r1, [r7, #12]
 8000c42:	69b8      	ldr	r0, [r7, #24]
 8000c44:	f000 fb88 	bl	8001358 <pxPortInitialiseStack>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c4c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8000c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d002      	beq.n	8000c5a <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000c5a:	bf00      	nop
 8000c5c:	3720      	adds	r7, #32
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8000c64:	b5b0      	push	{r4, r5, r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af02      	add	r7, sp, #8
 8000c6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8000c6c:	f000 fc9e 	bl	80015ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8000c70:	4b3b      	ldr	r3, [pc, #236]	; (8000d60 <prvAddNewTaskToReadyList+0xfc>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	3301      	adds	r3, #1
 8000c76:	4a3a      	ldr	r2, [pc, #232]	; (8000d60 <prvAddNewTaskToReadyList+0xfc>)
 8000c78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8000c7a:	4b3a      	ldr	r3, [pc, #232]	; (8000d64 <prvAddNewTaskToReadyList+0x100>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d109      	bne.n	8000c96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8000c82:	4a38      	ldr	r2, [pc, #224]	; (8000d64 <prvAddNewTaskToReadyList+0x100>)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000c88:	4b35      	ldr	r3, [pc, #212]	; (8000d60 <prvAddNewTaskToReadyList+0xfc>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d110      	bne.n	8000cb2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8000c90:	f000 fac6 	bl	8001220 <prvInitialiseTaskLists>
 8000c94:	e00d      	b.n	8000cb2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8000c96:	4b34      	ldr	r3, [pc, #208]	; (8000d68 <prvAddNewTaskToReadyList+0x104>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d109      	bne.n	8000cb2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000c9e:	4b31      	ldr	r3, [pc, #196]	; (8000d64 <prvAddNewTaskToReadyList+0x100>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d802      	bhi.n	8000cb2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8000cac:	4a2d      	ldr	r2, [pc, #180]	; (8000d64 <prvAddNewTaskToReadyList+0x100>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8000cb2:	4b2e      	ldr	r3, [pc, #184]	; (8000d6c <prvAddNewTaskToReadyList+0x108>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	4a2c      	ldr	r2, [pc, #176]	; (8000d6c <prvAddNewTaskToReadyList+0x108>)
 8000cba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000cbc:	4b2b      	ldr	r3, [pc, #172]	; (8000d6c <prvAddNewTaskToReadyList+0x108>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d016      	beq.n	8000cf8 <prvAddNewTaskToReadyList+0x94>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f002 f92b 	bl	8002f28 <SEGGER_SYSVIEW_OnTaskCreate>
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	461d      	mov	r5, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	461c      	mov	r4, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	1ae3      	subs	r3, r4, r3
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	462b      	mov	r3, r5
 8000cf4:	f000 fffa 	bl	8001cec <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f002 f99c 	bl	8003038 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d04:	2201      	movs	r2, #1
 8000d06:	409a      	lsls	r2, r3
 8000d08:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <prvAddNewTaskToReadyList+0x10c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	4a18      	ldr	r2, [pc, #96]	; (8000d70 <prvAddNewTaskToReadyList+0x10c>)
 8000d10:	6013      	str	r3, [r2, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d16:	4613      	mov	r3, r2
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	4413      	add	r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	4a15      	ldr	r2, [pc, #84]	; (8000d74 <prvAddNewTaskToReadyList+0x110>)
 8000d20:	441a      	add	r2, r3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	3304      	adds	r3, #4
 8000d26:	4619      	mov	r1, r3
 8000d28:	4610      	mov	r0, r2
 8000d2a:	f7ff fe78 	bl	8000a1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8000d2e:	f000 fc6b 	bl	8001608 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <prvAddNewTaskToReadyList+0x104>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d00e      	beq.n	8000d58 <prvAddNewTaskToReadyList+0xf4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <prvAddNewTaskToReadyList+0x100>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d207      	bcs.n	8000d58 <prvAddNewTaskToReadyList+0xf4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8000d48:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <prvAddNewTaskToReadyList+0x114>)
 8000d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	f3bf 8f4f 	dsb	sy
 8000d54:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000d58:	bf00      	nop
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bdb0      	pop	{r4, r5, r7, pc}
 8000d60:	2000011c 	.word	0x2000011c
 8000d64:	20000044 	.word	0x20000044
 8000d68:	20000128 	.word	0x20000128
 8000d6c:	20000138 	.word	0x20000138
 8000d70:	20000124 	.word	0x20000124
 8000d74:	20000048 	.word	0x20000048
 8000d78:	e000ed04 	.word	0xe000ed04

08000d7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8000d82:	4b22      	ldr	r3, [pc, #136]	; (8000e0c <vTaskStartScheduler+0x90>)
 8000d84:	9301      	str	r3, [sp, #4]
 8000d86:	2300      	movs	r3, #0
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	2282      	movs	r2, #130	; 0x82
 8000d8e:	4920      	ldr	r1, [pc, #128]	; (8000e10 <vTaskStartScheduler+0x94>)
 8000d90:	4820      	ldr	r0, [pc, #128]	; (8000e14 <vTaskStartScheduler+0x98>)
 8000d92:	f7ff fe92 	bl	8000aba <xTaskCreate>
 8000d96:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d123      	bne.n	8000de6 <vTaskStartScheduler+0x6a>
 8000d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000da2:	f383 8811 	msr	BASEPRI, r3
 8000da6:	f3bf 8f6f 	isb	sy
 8000daa:	f3bf 8f4f 	dsb	sy
 8000dae:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8000db0:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <vTaskStartScheduler+0x9c>)
 8000db2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000db6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8000db8:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <vTaskStartScheduler+0xa0>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000dbe:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <vTaskStartScheduler+0xa4>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8000dc4:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <vTaskStartScheduler+0xa8>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <vTaskStartScheduler+0x90>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d102      	bne.n	8000dd6 <vTaskStartScheduler+0x5a>
 8000dd0:	f002 f88e 	bl	8002ef0 <SEGGER_SYSVIEW_OnIdle>
 8000dd4:	e004      	b.n	8000de0 <vTaskStartScheduler+0x64>
 8000dd6:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <vTaskStartScheduler+0xa8>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f002 f8e8 	bl	8002fb0 <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8000de0:	f000 fb46 	bl	8001470 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8000de4:	e00d      	b.n	8000e02 <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dec:	d109      	bne.n	8000e02 <vTaskStartScheduler+0x86>
 8000dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000df2:	f383 8811 	msr	BASEPRI, r3
 8000df6:	f3bf 8f6f 	isb	sy
 8000dfa:	f3bf 8f4f 	dsb	sy
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	e7fe      	b.n	8000e00 <vTaskStartScheduler+0x84>
}
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000140 	.word	0x20000140
 8000e10:	08003954 	.word	0x08003954
 8000e14:	080011f1 	.word	0x080011f1
 8000e18:	2000013c 	.word	0x2000013c
 8000e1c:	20000128 	.word	0x20000128
 8000e20:	20000120 	.word	0x20000120
 8000e24:	20000044 	.word	0x20000044

08000e28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <vTaskSuspendAll+0x18>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	3301      	adds	r3, #1
 8000e32:	4a03      	ldr	r2, [pc, #12]	; (8000e40 <vTaskSuspendAll+0x18>)
 8000e34:	6013      	str	r3, [r2, #0]
}
 8000e36:	bf00      	nop
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	20000144 	.word	0x20000144

08000e44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8000e52:	4b43      	ldr	r3, [pc, #268]	; (8000f60 <xTaskResumeAll+0x11c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d109      	bne.n	8000e6e <xTaskResumeAll+0x2a>
 8000e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e5e:	f383 8811 	msr	BASEPRI, r3
 8000e62:	f3bf 8f6f 	isb	sy
 8000e66:	f3bf 8f4f 	dsb	sy
 8000e6a:	603b      	str	r3, [r7, #0]
 8000e6c:	e7fe      	b.n	8000e6c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8000e6e:	f000 fb9d 	bl	80015ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8000e72:	4b3b      	ldr	r3, [pc, #236]	; (8000f60 <xTaskResumeAll+0x11c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	4a39      	ldr	r2, [pc, #228]	; (8000f60 <xTaskResumeAll+0x11c>)
 8000e7a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000e7c:	4b38      	ldr	r3, [pc, #224]	; (8000f60 <xTaskResumeAll+0x11c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d165      	bne.n	8000f50 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000e84:	4b37      	ldr	r3, [pc, #220]	; (8000f64 <xTaskResumeAll+0x120>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d061      	beq.n	8000f50 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000e8c:	e032      	b.n	8000ef4 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000e8e:	4b36      	ldr	r3, [pc, #216]	; (8000f68 <xTaskResumeAll+0x124>)
 8000e90:	68db      	ldr	r3, [r3, #12]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	3318      	adds	r3, #24
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fde3 	bl	8000a66 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	3304      	adds	r3, #4
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fdde 	bl	8000a66 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f002 f8c3 	bl	8003038 <SEGGER_SYSVIEW_OnTaskStartReady>
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	409a      	lsls	r2, r3
 8000eba:	4b2c      	ldr	r3, [pc, #176]	; (8000f6c <xTaskResumeAll+0x128>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	4a2a      	ldr	r2, [pc, #168]	; (8000f6c <xTaskResumeAll+0x128>)
 8000ec2:	6013      	str	r3, [r2, #0]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ec8:	4613      	mov	r3, r2
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	4413      	add	r3, r2
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	4a27      	ldr	r2, [pc, #156]	; (8000f70 <xTaskResumeAll+0x12c>)
 8000ed2:	441a      	add	r2, r3
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	3304      	adds	r3, #4
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4610      	mov	r0, r2
 8000edc:	f7ff fd9f 	bl	8000a1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ee4:	4b23      	ldr	r3, [pc, #140]	; (8000f74 <xTaskResumeAll+0x130>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d302      	bcc.n	8000ef4 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8000eee:	4b22      	ldr	r3, [pc, #136]	; (8000f78 <xTaskResumeAll+0x134>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000ef4:	4b1c      	ldr	r3, [pc, #112]	; (8000f68 <xTaskResumeAll+0x124>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1c8      	bne.n	8000e8e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8000f02:	f000 fa09 	bl	8001318 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8000f06:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <xTaskResumeAll+0x138>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d010      	beq.n	8000f34 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8000f12:	f000 f849 	bl	8000fa8 <xTaskIncrementTick>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d002      	beq.n	8000f22 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8000f1c:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <xTaskResumeAll+0x134>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	3b01      	subs	r3, #1
 8000f26:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d1f1      	bne.n	8000f12 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8000f2e:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <xTaskResumeAll+0x138>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8000f34:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <xTaskResumeAll+0x134>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d009      	beq.n	8000f50 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8000f40:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <xTaskResumeAll+0x13c>)
 8000f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	f3bf 8f4f 	dsb	sy
 8000f4c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8000f50:	f000 fb5a 	bl	8001608 <vPortExitCritical>

	return xAlreadyYielded;
 8000f54:	68bb      	ldr	r3, [r7, #8]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000144 	.word	0x20000144
 8000f64:	2000011c 	.word	0x2000011c
 8000f68:	200000dc 	.word	0x200000dc
 8000f6c:	20000124 	.word	0x20000124
 8000f70:	20000048 	.word	0x20000048
 8000f74:	20000044 	.word	0x20000044
 8000f78:	20000130 	.word	0x20000130
 8000f7c:	2000012c 	.word	0x2000012c
 8000f80:	e000ed04 	.word	0xe000ed04

08000f84 <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000f8a:	f000 fbf3 	bl	8001774 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8000f92:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <xTaskGetTickCountFromISR+0x20>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000f98:	683b      	ldr	r3, [r7, #0]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000120 	.word	0x20000120

08000fa8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000fb2:	4b50      	ldr	r3, [pc, #320]	; (80010f4 <xTaskIncrementTick+0x14c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f040 808b 	bne.w	80010d2 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000fbc:	4b4e      	ldr	r3, [pc, #312]	; (80010f8 <xTaskIncrementTick+0x150>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8000fc4:	4a4c      	ldr	r2, [pc, #304]	; (80010f8 <xTaskIncrementTick+0x150>)
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d11f      	bne.n	8001010 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8000fd0:	4b4a      	ldr	r3, [pc, #296]	; (80010fc <xTaskIncrementTick+0x154>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d009      	beq.n	8000fee <xTaskIncrementTick+0x46>
 8000fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fde:	f383 8811 	msr	BASEPRI, r3
 8000fe2:	f3bf 8f6f 	isb	sy
 8000fe6:	f3bf 8f4f 	dsb	sy
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	e7fe      	b.n	8000fec <xTaskIncrementTick+0x44>
 8000fee:	4b43      	ldr	r3, [pc, #268]	; (80010fc <xTaskIncrementTick+0x154>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	4b42      	ldr	r3, [pc, #264]	; (8001100 <xTaskIncrementTick+0x158>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a40      	ldr	r2, [pc, #256]	; (80010fc <xTaskIncrementTick+0x154>)
 8000ffa:	6013      	str	r3, [r2, #0]
 8000ffc:	4a40      	ldr	r2, [pc, #256]	; (8001100 <xTaskIncrementTick+0x158>)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	4b40      	ldr	r3, [pc, #256]	; (8001104 <xTaskIncrementTick+0x15c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	3301      	adds	r3, #1
 8001008:	4a3e      	ldr	r2, [pc, #248]	; (8001104 <xTaskIncrementTick+0x15c>)
 800100a:	6013      	str	r3, [r2, #0]
 800100c:	f000 f984 	bl	8001318 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001010:	4b3d      	ldr	r3, [pc, #244]	; (8001108 <xTaskIncrementTick+0x160>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	429a      	cmp	r2, r3
 8001018:	d34c      	bcc.n	80010b4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800101a:	4b38      	ldr	r3, [pc, #224]	; (80010fc <xTaskIncrementTick+0x154>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d104      	bne.n	800102e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001024:	4b38      	ldr	r3, [pc, #224]	; (8001108 <xTaskIncrementTick+0x160>)
 8001026:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800102a:	601a      	str	r2, [r3, #0]
					break;
 800102c:	e042      	b.n	80010b4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800102e:	4b33      	ldr	r3, [pc, #204]	; (80010fc <xTaskIncrementTick+0x154>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	429a      	cmp	r2, r3
 8001044:	d203      	bcs.n	800104e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001046:	4a30      	ldr	r2, [pc, #192]	; (8001108 <xTaskIncrementTick+0x160>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800104c:	e032      	b.n	80010b4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	3304      	adds	r3, #4
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fd07 	bl	8000a66 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800105c:	2b00      	cmp	r3, #0
 800105e:	d004      	beq.n	800106a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	3318      	adds	r3, #24
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff fcfe 	bl	8000a66 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	4618      	mov	r0, r3
 800106e:	f001 ffe3 	bl	8003038 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001076:	2201      	movs	r2, #1
 8001078:	409a      	lsls	r2, r3
 800107a:	4b24      	ldr	r3, [pc, #144]	; (800110c <xTaskIncrementTick+0x164>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4313      	orrs	r3, r2
 8001080:	4a22      	ldr	r2, [pc, #136]	; (800110c <xTaskIncrementTick+0x164>)
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001088:	4613      	mov	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4a1f      	ldr	r2, [pc, #124]	; (8001110 <xTaskIncrementTick+0x168>)
 8001092:	441a      	add	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	3304      	adds	r3, #4
 8001098:	4619      	mov	r1, r3
 800109a:	4610      	mov	r0, r2
 800109c:	f7ff fcbf 	bl	8000a1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010a4:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <xTaskIncrementTick+0x16c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d3b5      	bcc.n	800101a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80010ae:	2301      	movs	r3, #1
 80010b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80010b2:	e7b2      	b.n	800101a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80010b4:	4b17      	ldr	r3, [pc, #92]	; (8001114 <xTaskIncrementTick+0x16c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010ba:	4915      	ldr	r1, [pc, #84]	; (8001110 <xTaskIncrementTick+0x168>)
 80010bc:	4613      	mov	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4413      	add	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	440b      	add	r3, r1
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d907      	bls.n	80010dc <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80010cc:	2301      	movs	r3, #1
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	e004      	b.n	80010dc <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80010d2:	4b11      	ldr	r3, [pc, #68]	; (8001118 <xTaskIncrementTick+0x170>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	3301      	adds	r3, #1
 80010d8:	4a0f      	ldr	r2, [pc, #60]	; (8001118 <xTaskIncrementTick+0x170>)
 80010da:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80010dc:	4b0f      	ldr	r3, [pc, #60]	; (800111c <xTaskIncrementTick+0x174>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80010e4:	2301      	movs	r3, #1
 80010e6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80010e8:	697b      	ldr	r3, [r7, #20]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000144 	.word	0x20000144
 80010f8:	20000120 	.word	0x20000120
 80010fc:	200000d4 	.word	0x200000d4
 8001100:	200000d8 	.word	0x200000d8
 8001104:	20000134 	.word	0x20000134
 8001108:	2000013c 	.word	0x2000013c
 800110c:	20000124 	.word	0x20000124
 8001110:	20000048 	.word	0x20000048
 8001114:	20000044 	.word	0x20000044
 8001118:	2000012c 	.word	0x2000012c
 800111c:	20000130 	.word	0x20000130

08001120 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001126:	4b2c      	ldr	r3, [pc, #176]	; (80011d8 <vTaskSwitchContext+0xb8>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800112e:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <vTaskSwitchContext+0xbc>)
 8001130:	2201      	movs	r2, #1
 8001132:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001134:	e04c      	b.n	80011d0 <vTaskSwitchContext+0xb0>
		xYieldPending = pdFALSE;
 8001136:	4b29      	ldr	r3, [pc, #164]	; (80011dc <vTaskSwitchContext+0xbc>)
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800113c:	4b28      	ldr	r3, [pc, #160]	; (80011e0 <vTaskSwitchContext+0xc0>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	fab3 f383 	clz	r3, r3
 8001148:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800114a:	7afb      	ldrb	r3, [r7, #11]
 800114c:	f1c3 031f 	rsb	r3, r3, #31
 8001150:	617b      	str	r3, [r7, #20]
 8001152:	4924      	ldr	r1, [pc, #144]	; (80011e4 <vTaskSwitchContext+0xc4>)
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	4613      	mov	r3, r2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4413      	add	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	440b      	add	r3, r1
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d109      	bne.n	800117a <vTaskSwitchContext+0x5a>
	__asm volatile
 8001166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800116a:	f383 8811 	msr	BASEPRI, r3
 800116e:	f3bf 8f6f 	isb	sy
 8001172:	f3bf 8f4f 	dsb	sy
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	e7fe      	b.n	8001178 <vTaskSwitchContext+0x58>
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	4613      	mov	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4a17      	ldr	r2, [pc, #92]	; (80011e4 <vTaskSwitchContext+0xc4>)
 8001186:	4413      	add	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	685a      	ldr	r2, [r3, #4]
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	3308      	adds	r3, #8
 800119c:	429a      	cmp	r2, r3
 800119e:	d104      	bne.n	80011aa <vTaskSwitchContext+0x8a>
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	4a0d      	ldr	r2, [pc, #52]	; (80011e8 <vTaskSwitchContext+0xc8>)
 80011b2:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <vTaskSwitchContext+0xc8>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <vTaskSwitchContext+0xcc>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d102      	bne.n	80011c6 <vTaskSwitchContext+0xa6>
 80011c0:	f001 fe96 	bl	8002ef0 <SEGGER_SYSVIEW_OnIdle>
}
 80011c4:	e004      	b.n	80011d0 <vTaskSwitchContext+0xb0>
		traceTASK_SWITCHED_IN();
 80011c6:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <vTaskSwitchContext+0xc8>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f001 fef0 	bl	8002fb0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80011d0:	bf00      	nop
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000144 	.word	0x20000144
 80011dc:	20000130 	.word	0x20000130
 80011e0:	20000124 	.word	0x20000124
 80011e4:	20000048 	.word	0x20000048
 80011e8:	20000044 	.word	0x20000044
 80011ec:	20000140 	.word	0x20000140

080011f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80011f8:	f000 f852 	bl	80012a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <prvIdleTask+0x28>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d9f9      	bls.n	80011f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <prvIdleTask+0x2c>)
 8001206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	f3bf 8f4f 	dsb	sy
 8001210:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001214:	e7f0      	b.n	80011f8 <prvIdleTask+0x8>
 8001216:	bf00      	nop
 8001218:	20000048 	.word	0x20000048
 800121c:	e000ed04 	.word	0xe000ed04

08001220 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001226:	2300      	movs	r3, #0
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	e00c      	b.n	8001246 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	4613      	mov	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4a12      	ldr	r2, [pc, #72]	; (8001280 <prvInitialiseTaskLists+0x60>)
 8001238:	4413      	add	r3, r2
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fbc2 	bl	80009c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3301      	adds	r3, #1
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2b04      	cmp	r3, #4
 800124a:	d9ef      	bls.n	800122c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800124c:	480d      	ldr	r0, [pc, #52]	; (8001284 <prvInitialiseTaskLists+0x64>)
 800124e:	f7ff fbb9 	bl	80009c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001252:	480d      	ldr	r0, [pc, #52]	; (8001288 <prvInitialiseTaskLists+0x68>)
 8001254:	f7ff fbb6 	bl	80009c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001258:	480c      	ldr	r0, [pc, #48]	; (800128c <prvInitialiseTaskLists+0x6c>)
 800125a:	f7ff fbb3 	bl	80009c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800125e:	480c      	ldr	r0, [pc, #48]	; (8001290 <prvInitialiseTaskLists+0x70>)
 8001260:	f7ff fbb0 	bl	80009c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001264:	480b      	ldr	r0, [pc, #44]	; (8001294 <prvInitialiseTaskLists+0x74>)
 8001266:	f7ff fbad 	bl	80009c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <prvInitialiseTaskLists+0x78>)
 800126c:	4a05      	ldr	r2, [pc, #20]	; (8001284 <prvInitialiseTaskLists+0x64>)
 800126e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001270:	4b0a      	ldr	r3, [pc, #40]	; (800129c <prvInitialiseTaskLists+0x7c>)
 8001272:	4a05      	ldr	r2, [pc, #20]	; (8001288 <prvInitialiseTaskLists+0x68>)
 8001274:	601a      	str	r2, [r3, #0]
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000048 	.word	0x20000048
 8001284:	200000ac 	.word	0x200000ac
 8001288:	200000c0 	.word	0x200000c0
 800128c:	200000dc 	.word	0x200000dc
 8001290:	200000f0 	.word	0x200000f0
 8001294:	20000108 	.word	0x20000108
 8001298:	200000d4 	.word	0x200000d4
 800129c:	200000d8 	.word	0x200000d8

080012a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80012a6:	e019      	b.n	80012dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80012a8:	f000 f980 	bl	80015ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80012ac:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <prvCheckTasksWaitingTermination+0x4c>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3304      	adds	r3, #4
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fbd4 	bl	8000a66 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <prvCheckTasksWaitingTermination+0x50>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	4a0a      	ldr	r2, [pc, #40]	; (80012f0 <prvCheckTasksWaitingTermination+0x50>)
 80012c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80012c8:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <prvCheckTasksWaitingTermination+0x54>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	3b01      	subs	r3, #1
 80012ce:	4a09      	ldr	r2, [pc, #36]	; (80012f4 <prvCheckTasksWaitingTermination+0x54>)
 80012d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80012d2:	f000 f999 	bl	8001608 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f000 f80e 	bl	80012f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80012dc:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <prvCheckTasksWaitingTermination+0x54>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1e1      	bne.n	80012a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	200000f0 	.word	0x200000f0
 80012f0:	2000011c 	.word	0x2000011c
 80012f4:	20000104 	.word	0x20000104

080012f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001304:	4618      	mov	r0, r3
 8001306:	f000 fb35 	bl	8001974 <vPortFree>
			vPortFree( pxTCB );
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f000 fb32 	bl	8001974 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800131e:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <prvResetNextTaskUnblockTime+0x38>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d104      	bne.n	8001332 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001328:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <prvResetNextTaskUnblockTime+0x3c>)
 800132a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800132e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001330:	e008      	b.n	8001344 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001332:	4b07      	ldr	r3, [pc, #28]	; (8001350 <prvResetNextTaskUnblockTime+0x38>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	4a04      	ldr	r2, [pc, #16]	; (8001354 <prvResetNextTaskUnblockTime+0x3c>)
 8001342:	6013      	str	r3, [r2, #0]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	200000d4 	.word	0x200000d4
 8001354:	2000013c 	.word	0x2000013c

08001358 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	3b04      	subs	r3, #4
 8001368:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001370:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	3b04      	subs	r3, #4
 8001376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	f023 0201 	bic.w	r2, r3, #1
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	3b04      	subs	r3, #4
 8001386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001388:	4a0c      	ldr	r2, [pc, #48]	; (80013bc <pxPortInitialiseStack+0x64>)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	3b14      	subs	r3, #20
 8001392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	3b04      	subs	r3, #4
 800139e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f06f 0202 	mvn.w	r2, #2
 80013a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	3b20      	subs	r3, #32
 80013ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80013ae:	68fb      	ldr	r3, [r7, #12]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	080013c1 	.word	0x080013c1

080013c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <prvTaskExitError+0x50>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013d2:	d009      	beq.n	80013e8 <prvTaskExitError+0x28>
 80013d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013d8:	f383 8811 	msr	BASEPRI, r3
 80013dc:	f3bf 8f6f 	isb	sy
 80013e0:	f3bf 8f4f 	dsb	sy
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	e7fe      	b.n	80013e6 <prvTaskExitError+0x26>
 80013e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013ec:	f383 8811 	msr	BASEPRI, r3
 80013f0:	f3bf 8f6f 	isb	sy
 80013f4:	f3bf 8f4f 	dsb	sy
 80013f8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80013fa:	bf00      	nop
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d0fc      	beq.n	80013fc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001402:	bf00      	nop
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000010 	.word	0x20000010
	...

08001420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001420:	4b07      	ldr	r3, [pc, #28]	; (8001440 <pxCurrentTCBConst2>)
 8001422:	6819      	ldr	r1, [r3, #0]
 8001424:	6808      	ldr	r0, [r1, #0]
 8001426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800142a:	f380 8809 	msr	PSP, r0
 800142e:	f3bf 8f6f 	isb	sy
 8001432:	f04f 0000 	mov.w	r0, #0
 8001436:	f380 8811 	msr	BASEPRI, r0
 800143a:	4770      	bx	lr
 800143c:	f3af 8000 	nop.w

08001440 <pxCurrentTCBConst2>:
 8001440:	20000044 	.word	0x20000044
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8001444:	bf00      	nop
 8001446:	bf00      	nop

08001448 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001448:	4808      	ldr	r0, [pc, #32]	; (800146c <prvPortStartFirstTask+0x24>)
 800144a:	6800      	ldr	r0, [r0, #0]
 800144c:	6800      	ldr	r0, [r0, #0]
 800144e:	f380 8808 	msr	MSP, r0
 8001452:	f04f 0000 	mov.w	r0, #0
 8001456:	f380 8814 	msr	CONTROL, r0
 800145a:	b662      	cpsie	i
 800145c:	b661      	cpsie	f
 800145e:	f3bf 8f4f 	dsb	sy
 8001462:	f3bf 8f6f 	isb	sy
 8001466:	df00      	svc	0
 8001468:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800146a:	bf00      	nop
 800146c:	e000ed08 	.word	0xe000ed08

08001470 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001476:	4b44      	ldr	r3, [pc, #272]	; (8001588 <xPortStartScheduler+0x118>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a44      	ldr	r2, [pc, #272]	; (800158c <xPortStartScheduler+0x11c>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d109      	bne.n	8001494 <xPortStartScheduler+0x24>
 8001480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001484:	f383 8811 	msr	BASEPRI, r3
 8001488:	f3bf 8f6f 	isb	sy
 800148c:	f3bf 8f4f 	dsb	sy
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	e7fe      	b.n	8001492 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001494:	4b3c      	ldr	r3, [pc, #240]	; (8001588 <xPortStartScheduler+0x118>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a3d      	ldr	r2, [pc, #244]	; (8001590 <xPortStartScheduler+0x120>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d109      	bne.n	80014b2 <xPortStartScheduler+0x42>
 800149e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014a2:	f383 8811 	msr	BASEPRI, r3
 80014a6:	f3bf 8f6f 	isb	sy
 80014aa:	f3bf 8f4f 	dsb	sy
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	e7fe      	b.n	80014b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80014b2:	4b38      	ldr	r3, [pc, #224]	; (8001594 <xPortStartScheduler+0x124>)
 80014b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	22ff      	movs	r2, #255	; 0xff
 80014c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80014cc:	78fb      	ldrb	r3, [r7, #3]
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4b30      	ldr	r3, [pc, #192]	; (8001598 <xPortStartScheduler+0x128>)
 80014d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80014da:	4b30      	ldr	r3, [pc, #192]	; (800159c <xPortStartScheduler+0x12c>)
 80014dc:	2207      	movs	r2, #7
 80014de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80014e0:	e009      	b.n	80014f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80014e2:	4b2e      	ldr	r3, [pc, #184]	; (800159c <xPortStartScheduler+0x12c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	4a2c      	ldr	r2, [pc, #176]	; (800159c <xPortStartScheduler+0x12c>)
 80014ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80014ec:	78fb      	ldrb	r3, [r7, #3]
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80014f6:	78fb      	ldrb	r3, [r7, #3]
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014fe:	2b80      	cmp	r3, #128	; 0x80
 8001500:	d0ef      	beq.n	80014e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001502:	4b26      	ldr	r3, [pc, #152]	; (800159c <xPortStartScheduler+0x12c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f1c3 0307 	rsb	r3, r3, #7
 800150a:	2b04      	cmp	r3, #4
 800150c:	d009      	beq.n	8001522 <xPortStartScheduler+0xb2>
 800150e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001512:	f383 8811 	msr	BASEPRI, r3
 8001516:	f3bf 8f6f 	isb	sy
 800151a:	f3bf 8f4f 	dsb	sy
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	e7fe      	b.n	8001520 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001522:	4b1e      	ldr	r3, [pc, #120]	; (800159c <xPortStartScheduler+0x12c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	4a1c      	ldr	r2, [pc, #112]	; (800159c <xPortStartScheduler+0x12c>)
 800152a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800152c:	4b1b      	ldr	r3, [pc, #108]	; (800159c <xPortStartScheduler+0x12c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001534:	4a19      	ldr	r2, [pc, #100]	; (800159c <xPortStartScheduler+0x12c>)
 8001536:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	b2da      	uxtb	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001540:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <xPortStartScheduler+0x130>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a16      	ldr	r2, [pc, #88]	; (80015a0 <xPortStartScheduler+0x130>)
 8001546:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800154a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800154c:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <xPortStartScheduler+0x130>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a13      	ldr	r2, [pc, #76]	; (80015a0 <xPortStartScheduler+0x130>)
 8001552:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001556:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001558:	f000 f8de 	bl	8001718 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <xPortStartScheduler+0x134>)
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8001562:	f000 f8fd 	bl	8001760 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001566:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <xPortStartScheduler+0x138>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a0f      	ldr	r2, [pc, #60]	; (80015a8 <xPortStartScheduler+0x138>)
 800156c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001570:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001572:	f7ff ff69 	bl	8001448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8001576:	f7ff fdd3 	bl	8001120 <vTaskSwitchContext>
	prvTaskExitError();
 800157a:	f7ff ff21 	bl	80013c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	3718      	adds	r7, #24
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	e000ed00 	.word	0xe000ed00
 800158c:	410fc271 	.word	0x410fc271
 8001590:	410fc270 	.word	0x410fc270
 8001594:	e000e400 	.word	0xe000e400
 8001598:	20000148 	.word	0x20000148
 800159c:	2000014c 	.word	0x2000014c
 80015a0:	e000ed20 	.word	0xe000ed20
 80015a4:	20000010 	.word	0x20000010
 80015a8:	e000ef34 	.word	0xe000ef34

080015ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015b6:	f383 8811 	msr	BASEPRI, r3
 80015ba:	f3bf 8f6f 	isb	sy
 80015be:	f3bf 8f4f 	dsb	sy
 80015c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80015c4:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <vPortEnterCritical+0x54>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	3301      	adds	r3, #1
 80015ca:	4a0d      	ldr	r2, [pc, #52]	; (8001600 <vPortEnterCritical+0x54>)
 80015cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80015ce:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <vPortEnterCritical+0x54>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d10e      	bne.n	80015f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <vPortEnterCritical+0x58>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d009      	beq.n	80015f4 <vPortEnterCritical+0x48>
 80015e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015e4:	f383 8811 	msr	BASEPRI, r3
 80015e8:	f3bf 8f6f 	isb	sy
 80015ec:	f3bf 8f4f 	dsb	sy
 80015f0:	603b      	str	r3, [r7, #0]
 80015f2:	e7fe      	b.n	80015f2 <vPortEnterCritical+0x46>
	}
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	20000010 	.word	0x20000010
 8001604:	e000ed04 	.word	0xe000ed04

08001608 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800160e:	4b11      	ldr	r3, [pc, #68]	; (8001654 <vPortExitCritical+0x4c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d109      	bne.n	800162a <vPortExitCritical+0x22>
 8001616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800161a:	f383 8811 	msr	BASEPRI, r3
 800161e:	f3bf 8f6f 	isb	sy
 8001622:	f3bf 8f4f 	dsb	sy
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	e7fe      	b.n	8001628 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800162a:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <vPortExitCritical+0x4c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	3b01      	subs	r3, #1
 8001630:	4a08      	ldr	r2, [pc, #32]	; (8001654 <vPortExitCritical+0x4c>)
 8001632:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001634:	4b07      	ldr	r3, [pc, #28]	; (8001654 <vPortExitCritical+0x4c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d104      	bne.n	8001646 <vPortExitCritical+0x3e>
 800163c:	2300      	movs	r3, #0
 800163e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	20000010 	.word	0x20000010
	...

08001660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001660:	f3ef 8009 	mrs	r0, PSP
 8001664:	f3bf 8f6f 	isb	sy
 8001668:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <pxCurrentTCBConst>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	f01e 0f10 	tst.w	lr, #16
 8001670:	bf08      	it	eq
 8001672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800167a:	6010      	str	r0, [r2, #0]
 800167c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001680:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001684:	f380 8811 	msr	BASEPRI, r0
 8001688:	f3bf 8f4f 	dsb	sy
 800168c:	f3bf 8f6f 	isb	sy
 8001690:	f7ff fd46 	bl	8001120 <vTaskSwitchContext>
 8001694:	f04f 0000 	mov.w	r0, #0
 8001698:	f380 8811 	msr	BASEPRI, r0
 800169c:	bc09      	pop	{r0, r3}
 800169e:	6819      	ldr	r1, [r3, #0]
 80016a0:	6808      	ldr	r0, [r1, #0]
 80016a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016a6:	f01e 0f10 	tst.w	lr, #16
 80016aa:	bf08      	it	eq
 80016ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80016b0:	f380 8809 	msr	PSP, r0
 80016b4:	f3bf 8f6f 	isb	sy
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	f3af 8000 	nop.w

080016c0 <pxCurrentTCBConst>:
 80016c0:	20000044 	.word	0x20000044
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80016c4:	bf00      	nop
 80016c6:	bf00      	nop

080016c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
	__asm volatile
 80016ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016d2:	f383 8811 	msr	BASEPRI, r3
 80016d6:	f3bf 8f6f 	isb	sy
 80016da:	f3bf 8f4f 	dsb	sy
 80016de:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 80016e0:	f001 fb8c 	bl	8002dfc <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80016e4:	f7ff fc60 	bl	8000fa8 <xTaskIncrementTick>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d006      	beq.n	80016fc <SysTick_Handler+0x34>
		{
			traceISR_EXIT_TO_SCHEDULER();
 80016ee:	f001 fbe3 	bl	8002eb8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80016f2:	4b08      	ldr	r3, [pc, #32]	; (8001714 <SysTick_Handler+0x4c>)
 80016f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	e001      	b.n	8001700 <SysTick_Handler+0x38>
		}
		else
		{
			traceISR_EXIT();
 80016fc:	f001 fbc0 	bl	8002e80 <SEGGER_SYSVIEW_RecordExitISR>
 8001700:	2300      	movs	r3, #0
 8001702:	603b      	str	r3, [r7, #0]
	__asm volatile
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	e000ed04 	.word	0xe000ed04

08001718 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800171c:	4b0b      	ldr	r3, [pc, #44]	; (800174c <vPortSetupTimerInterrupt+0x34>)
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001722:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <vPortSetupTimerInterrupt+0x38>)
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001728:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <vPortSetupTimerInterrupt+0x3c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <vPortSetupTimerInterrupt+0x40>)
 800172e:	fba2 2303 	umull	r2, r3, r2, r3
 8001732:	099b      	lsrs	r3, r3, #6
 8001734:	4a09      	ldr	r2, [pc, #36]	; (800175c <vPortSetupTimerInterrupt+0x44>)
 8001736:	3b01      	subs	r3, #1
 8001738:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800173a:	4b04      	ldr	r3, [pc, #16]	; (800174c <vPortSetupTimerInterrupt+0x34>)
 800173c:	2207      	movs	r2, #7
 800173e:	601a      	str	r2, [r3, #0]
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	e000e010 	.word	0xe000e010
 8001750:	e000e018 	.word	0xe000e018
 8001754:	20000014 	.word	0x20000014
 8001758:	10624dd3 	.word	0x10624dd3
 800175c:	e000e014 	.word	0xe000e014

08001760 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001760:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001770 <vPortEnableVFP+0x10>
 8001764:	6801      	ldr	r1, [r0, #0]
 8001766:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800176a:	6001      	str	r1, [r0, #0]
 800176c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800176e:	bf00      	nop
 8001770:	e000ed88 	.word	0xe000ed88

08001774 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800177a:	f3ef 8305 	mrs	r3, IPSR
 800177e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2b0f      	cmp	r3, #15
 8001784:	d913      	bls.n	80017ae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001786:	4a16      	ldr	r2, [pc, #88]	; (80017e0 <vPortValidateInterruptPriority+0x6c>)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4413      	add	r3, r2
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001790:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <vPortValidateInterruptPriority+0x70>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	7afa      	ldrb	r2, [r7, #11]
 8001796:	429a      	cmp	r2, r3
 8001798:	d209      	bcs.n	80017ae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800179a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800179e:	f383 8811 	msr	BASEPRI, r3
 80017a2:	f3bf 8f6f 	isb	sy
 80017a6:	f3bf 8f4f 	dsb	sy
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	e7fe      	b.n	80017ac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80017ae:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <vPortValidateInterruptPriority+0x74>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80017b6:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <vPortValidateInterruptPriority+0x78>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d909      	bls.n	80017d2 <vPortValidateInterruptPriority+0x5e>
 80017be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017c2:	f383 8811 	msr	BASEPRI, r3
 80017c6:	f3bf 8f6f 	isb	sy
 80017ca:	f3bf 8f4f 	dsb	sy
 80017ce:	603b      	str	r3, [r7, #0]
 80017d0:	e7fe      	b.n	80017d0 <vPortValidateInterruptPriority+0x5c>
	}
 80017d2:	bf00      	nop
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000e3f0 	.word	0xe000e3f0
 80017e4:	20000148 	.word	0x20000148
 80017e8:	e000ed0c 	.word	0xe000ed0c
 80017ec:	2000014c 	.word	0x2000014c

080017f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08a      	sub	sp, #40	; 0x28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80017fc:	f7ff fb14 	bl	8000e28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001800:	4b57      	ldr	r3, [pc, #348]	; (8001960 <pvPortMalloc+0x170>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8001808:	f000 f90c 	bl	8001a24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800180c:	4b55      	ldr	r3, [pc, #340]	; (8001964 <pvPortMalloc+0x174>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4013      	ands	r3, r2
 8001814:	2b00      	cmp	r3, #0
 8001816:	f040 808c 	bne.w	8001932 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d01c      	beq.n	800185a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8001820:	2208      	movs	r2, #8
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	2b00      	cmp	r3, #0
 8001830:	d013      	beq.n	800185a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f023 0307 	bic.w	r3, r3, #7
 8001838:	3308      	adds	r3, #8
 800183a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	2b00      	cmp	r3, #0
 8001844:	d009      	beq.n	800185a <pvPortMalloc+0x6a>
 8001846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800184a:	f383 8811 	msr	BASEPRI, r3
 800184e:	f3bf 8f6f 	isb	sy
 8001852:	f3bf 8f4f 	dsb	sy
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	e7fe      	b.n	8001858 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d068      	beq.n	8001932 <pvPortMalloc+0x142>
 8001860:	4b41      	ldr	r3, [pc, #260]	; (8001968 <pvPortMalloc+0x178>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	429a      	cmp	r2, r3
 8001868:	d863      	bhi.n	8001932 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800186a:	4b40      	ldr	r3, [pc, #256]	; (800196c <pvPortMalloc+0x17c>)
 800186c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800186e:	4b3f      	ldr	r3, [pc, #252]	; (800196c <pvPortMalloc+0x17c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001874:	e004      	b.n	8001880 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	429a      	cmp	r2, r3
 8001888:	d903      	bls.n	8001892 <pvPortMalloc+0xa2>
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f1      	bne.n	8001876 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001892:	4b33      	ldr	r3, [pc, #204]	; (8001960 <pvPortMalloc+0x170>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001898:	429a      	cmp	r2, r3
 800189a:	d04a      	beq.n	8001932 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800189c:	6a3b      	ldr	r3, [r7, #32]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2208      	movs	r2, #8
 80018a2:	4413      	add	r3, r2
 80018a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	6a3b      	ldr	r3, [r7, #32]
 80018ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	1ad2      	subs	r2, r2, r3
 80018b6:	2308      	movs	r3, #8
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d91e      	bls.n	80018fc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80018be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4413      	add	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d009      	beq.n	80018e4 <pvPortMalloc+0xf4>
 80018d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018d4:	f383 8811 	msr	BASEPRI, r3
 80018d8:	f3bf 8f6f 	isb	sy
 80018dc:	f3bf 8f4f 	dsb	sy
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	e7fe      	b.n	80018e2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	1ad2      	subs	r2, r2, r3
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80018f6:	69b8      	ldr	r0, [r7, #24]
 80018f8:	f000 f8f6 	bl	8001ae8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80018fc:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <pvPortMalloc+0x178>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	4a18      	ldr	r2, [pc, #96]	; (8001968 <pvPortMalloc+0x178>)
 8001908:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800190a:	4b17      	ldr	r3, [pc, #92]	; (8001968 <pvPortMalloc+0x178>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	4b18      	ldr	r3, [pc, #96]	; (8001970 <pvPortMalloc+0x180>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	d203      	bcs.n	800191e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001916:	4b14      	ldr	r3, [pc, #80]	; (8001968 <pvPortMalloc+0x178>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a15      	ldr	r2, [pc, #84]	; (8001970 <pvPortMalloc+0x180>)
 800191c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	4b10      	ldr	r3, [pc, #64]	; (8001964 <pvPortMalloc+0x174>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	431a      	orrs	r2, r3
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001932:	f7ff fa87 	bl	8000e44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	f003 0307 	and.w	r3, r3, #7
 800193c:	2b00      	cmp	r3, #0
 800193e:	d009      	beq.n	8001954 <pvPortMalloc+0x164>
 8001940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001944:	f383 8811 	msr	BASEPRI, r3
 8001948:	f3bf 8f6f 	isb	sy
 800194c:	f3bf 8f4f 	dsb	sy
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	e7fe      	b.n	8001952 <pvPortMalloc+0x162>
	return pvReturn;
 8001954:	69fb      	ldr	r3, [r7, #28]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3728      	adds	r7, #40	; 0x28
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20012d58 	.word	0x20012d58
 8001964:	20012d64 	.word	0x20012d64
 8001968:	20012d5c 	.word	0x20012d5c
 800196c:	20012d50 	.word	0x20012d50
 8001970:	20012d60 	.word	0x20012d60

08001974 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d046      	beq.n	8001a14 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001986:	2308      	movs	r3, #8
 8001988:	425b      	negs	r3, r3
 800198a:	697a      	ldr	r2, [r7, #20]
 800198c:	4413      	add	r3, r2
 800198e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	4b20      	ldr	r3, [pc, #128]	; (8001a1c <vPortFree+0xa8>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4013      	ands	r3, r2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d109      	bne.n	80019b6 <vPortFree+0x42>
 80019a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019a6:	f383 8811 	msr	BASEPRI, r3
 80019aa:	f3bf 8f6f 	isb	sy
 80019ae:	f3bf 8f4f 	dsb	sy
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	e7fe      	b.n	80019b4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d009      	beq.n	80019d2 <vPortFree+0x5e>
 80019be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019c2:	f383 8811 	msr	BASEPRI, r3
 80019c6:	f3bf 8f6f 	isb	sy
 80019ca:	f3bf 8f4f 	dsb	sy
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	e7fe      	b.n	80019d0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <vPortFree+0xa8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4013      	ands	r3, r2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d019      	beq.n	8001a14 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d115      	bne.n	8001a14 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <vPortFree+0xa8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	401a      	ands	r2, r3
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80019f8:	f7ff fa16 	bl	8000e28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <vPortFree+0xac>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4413      	add	r3, r2
 8001a06:	4a06      	ldr	r2, [pc, #24]	; (8001a20 <vPortFree+0xac>)
 8001a08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001a0a:	6938      	ldr	r0, [r7, #16]
 8001a0c:	f000 f86c 	bl	8001ae8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001a10:	f7ff fa18 	bl	8000e44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001a14:	bf00      	nop
 8001a16:	3718      	adds	r7, #24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20012d64 	.word	0x20012d64
 8001a20:	20012d5c 	.word	0x20012d5c

08001a24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001a2a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001a2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001a30:	4b27      	ldr	r3, [pc, #156]	; (8001ad0 <prvHeapInit+0xac>)
 8001a32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00c      	beq.n	8001a58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	3307      	adds	r3, #7
 8001a42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f023 0307 	bic.w	r3, r3, #7
 8001a4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001a4c:	68ba      	ldr	r2, [r7, #8]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	4a1f      	ldr	r2, [pc, #124]	; (8001ad0 <prvHeapInit+0xac>)
 8001a54:	4413      	add	r3, r2
 8001a56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001a5c:	4a1d      	ldr	r2, [pc, #116]	; (8001ad4 <prvHeapInit+0xb0>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001a62:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <prvHeapInit+0xb0>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001a70:	2208      	movs	r2, #8
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	1a9b      	subs	r3, r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f023 0307 	bic.w	r3, r3, #7
 8001a7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4a15      	ldr	r2, [pc, #84]	; (8001ad8 <prvHeapInit+0xb4>)
 8001a84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001a86:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <prvHeapInit+0xb4>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001a8e:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <prvHeapInit+0xb4>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	1ad2      	subs	r2, r2, r3
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <prvHeapInit+0xb4>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <prvHeapInit+0xb8>)
 8001ab2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	4a09      	ldr	r2, [pc, #36]	; (8001ae0 <prvHeapInit+0xbc>)
 8001aba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001abc:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <prvHeapInit+0xc0>)
 8001abe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001ac2:	601a      	str	r2, [r3, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	20000150 	.word	0x20000150
 8001ad4:	20012d50 	.word	0x20012d50
 8001ad8:	20012d58 	.word	0x20012d58
 8001adc:	20012d60 	.word	0x20012d60
 8001ae0:	20012d5c 	.word	0x20012d5c
 8001ae4:	20012d64 	.word	0x20012d64

08001ae8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001af0:	4b28      	ldr	r3, [pc, #160]	; (8001b94 <prvInsertBlockIntoFreeList+0xac>)
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	e002      	b.n	8001afc <prvInsertBlockIntoFreeList+0x14>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d8f7      	bhi.n	8001af6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	4413      	add	r3, r2
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d108      	bne.n	8001b2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	441a      	add	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	441a      	add	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d118      	bne.n	8001b70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <prvInsertBlockIntoFreeList+0xb0>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d00d      	beq.n	8001b66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	441a      	add	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	e008      	b.n	8001b78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001b66:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <prvInsertBlockIntoFreeList+0xb0>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	e003      	b.n	8001b78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d002      	beq.n	8001b86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001b86:	bf00      	nop
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	20012d50 	.word	0x20012d50
 8001b98:	20012d58 	.word	0x20012d58

08001b9c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001ba0:	4803      	ldr	r0, [pc, #12]	; (8001bb0 <_cbSendSystemDesc+0x14>)
 8001ba2:	f001 f8d7 	bl	8002d54 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001ba6:	4803      	ldr	r0, [pc, #12]	; (8001bb4 <_cbSendSystemDesc+0x18>)
 8001ba8:	f001 f8d4 	bl	8002d54 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	0800395c 	.word	0x0800395c
 8001bb4:	08003998 	.word	0x08003998

08001bb8 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <SEGGER_SYSVIEW_Conf+0x20>)
 8001bbe:	6818      	ldr	r0, [r3, #0]
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <SEGGER_SYSVIEW_Conf+0x20>)
 8001bc2:	6819      	ldr	r1, [r3, #0]
 8001bc4:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <SEGGER_SYSVIEW_Conf+0x24>)
 8001bc6:	4a06      	ldr	r2, [pc, #24]	; (8001be0 <SEGGER_SYSVIEW_Conf+0x28>)
 8001bc8:	f000 fd4c 	bl	8002664 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001bcc:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8001bd0:	f000 fd86 	bl	80026e0 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000014 	.word	0x20000014
 8001bdc:	08001b9d 	.word	0x08001b9d
 8001be0:	08003a70 	.word	0x08003a70

08001be4 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001bea:	2300      	movs	r3, #0
 8001bec:	607b      	str	r3, [r7, #4]
 8001bee:	e034      	b.n	8001c5a <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001bf0:	491e      	ldr	r1, [pc, #120]	; (8001c6c <_cbSendTaskList+0x88>)
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	6818      	ldr	r0, [r3, #0]
 8001c00:	491a      	ldr	r1, [pc, #104]	; (8001c6c <_cbSendTaskList+0x88>)
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	3304      	adds	r3, #4
 8001c10:	681c      	ldr	r4, [r3, #0]
 8001c12:	4916      	ldr	r1, [pc, #88]	; (8001c6c <_cbSendTaskList+0x88>)
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	4613      	mov	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	440b      	add	r3, r1
 8001c20:	3308      	adds	r3, #8
 8001c22:	681d      	ldr	r5, [r3, #0]
 8001c24:	4911      	ldr	r1, [pc, #68]	; (8001c6c <_cbSendTaskList+0x88>)
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	440b      	add	r3, r1
 8001c32:	330c      	adds	r3, #12
 8001c34:	681e      	ldr	r6, [r3, #0]
 8001c36:	490d      	ldr	r1, [pc, #52]	; (8001c6c <_cbSendTaskList+0x88>)
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	440b      	add	r3, r1
 8001c44:	3310      	adds	r3, #16
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	4633      	mov	r3, r6
 8001c4c:	462a      	mov	r2, r5
 8001c4e:	4621      	mov	r1, r4
 8001c50:	f000 f8b4 	bl	8001dbc <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3301      	adds	r3, #1
 8001c58:	607b      	str	r3, [r7, #4]
 8001c5a:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <_cbSendTaskList+0x8c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d3c5      	bcc.n	8001bf0 <_cbSendTaskList+0xc>
  }
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c6c:	20012d68 	.word	0x20012d68
 8001c70:	20012e08 	.word	0x20012e08

08001c74 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001c7a:	f7ff f983 	bl	8000f84 <xTaskGetTickCountFromISR>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	f04f 0400 	mov.w	r4, #0
 8001c84:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001c88:	e9d7 5600 	ldrd	r5, r6, [r7]
 8001c8c:	462b      	mov	r3, r5
 8001c8e:	4634      	mov	r4, r6
 8001c90:	f04f 0100 	mov.w	r1, #0
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	0162      	lsls	r2, r4, #5
 8001c9a:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8001c9e:	0159      	lsls	r1, r3, #5
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	4614      	mov	r4, r2
 8001ca4:	1b5b      	subs	r3, r3, r5
 8001ca6:	eb64 0406 	sbc.w	r4, r4, r6
 8001caa:	f04f 0100 	mov.w	r1, #0
 8001cae:	f04f 0200 	mov.w	r2, #0
 8001cb2:	00a2      	lsls	r2, r4, #2
 8001cb4:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001cb8:	0099      	lsls	r1, r3, #2
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4614      	mov	r4, r2
 8001cbe:	195b      	adds	r3, r3, r5
 8001cc0:	eb44 0406 	adc.w	r4, r4, r6
 8001cc4:	f04f 0100 	mov.w	r1, #0
 8001cc8:	f04f 0200 	mov.w	r2, #0
 8001ccc:	00e2      	lsls	r2, r4, #3
 8001cce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001cd2:	00d9      	lsls	r1, r3, #3
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4614      	mov	r4, r2
 8001cd8:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8001cdc:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	4621      	mov	r1, r4
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001cec <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af02      	add	r7, sp, #8
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
 8001cf8:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8001cfa:	2205      	movs	r2, #5
 8001cfc:	492b      	ldr	r1, [pc, #172]	; (8001dac <SYSVIEW_AddTask+0xc0>)
 8001cfe:	68b8      	ldr	r0, [r7, #8]
 8001d00:	f001 fdfa 	bl	80038f8 <memcmp>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d04b      	beq.n	8001da2 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8001d0a:	4b29      	ldr	r3, [pc, #164]	; (8001db0 <SYSVIEW_AddTask+0xc4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2b07      	cmp	r3, #7
 8001d10:	d903      	bls.n	8001d1a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8001d12:	4828      	ldr	r0, [pc, #160]	; (8001db4 <SYSVIEW_AddTask+0xc8>)
 8001d14:	f001 fab0 	bl	8003278 <SEGGER_SYSVIEW_Warn>
    return;
 8001d18:	e044      	b.n	8001da4 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8001d1a:	4b25      	ldr	r3, [pc, #148]	; (8001db0 <SYSVIEW_AddTask+0xc4>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	4926      	ldr	r1, [pc, #152]	; (8001db8 <SYSVIEW_AddTask+0xcc>)
 8001d20:	4613      	mov	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4413      	add	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	440b      	add	r3, r1
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8001d2e:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <SYSVIEW_AddTask+0xc4>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	4921      	ldr	r1, [pc, #132]	; (8001db8 <SYSVIEW_AddTask+0xcc>)
 8001d34:	4613      	mov	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	3304      	adds	r3, #4
 8001d40:	68ba      	ldr	r2, [r7, #8]
 8001d42:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8001d44:	4b1a      	ldr	r3, [pc, #104]	; (8001db0 <SYSVIEW_AddTask+0xc4>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	491b      	ldr	r1, [pc, #108]	; (8001db8 <SYSVIEW_AddTask+0xcc>)
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	440b      	add	r3, r1
 8001d54:	3308      	adds	r3, #8
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8001d5a:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <SYSVIEW_AddTask+0xc4>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	4916      	ldr	r1, [pc, #88]	; (8001db8 <SYSVIEW_AddTask+0xcc>)
 8001d60:	4613      	mov	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	440b      	add	r3, r1
 8001d6a:	330c      	adds	r3, #12
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8001d70:	4b0f      	ldr	r3, [pc, #60]	; (8001db0 <SYSVIEW_AddTask+0xc4>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	4910      	ldr	r1, [pc, #64]	; (8001db8 <SYSVIEW_AddTask+0xcc>)
 8001d76:	4613      	mov	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	440b      	add	r3, r1
 8001d80:	3310      	adds	r3, #16
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8001d86:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <SYSVIEW_AddTask+0xc4>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	4a08      	ldr	r2, [pc, #32]	; (8001db0 <SYSVIEW_AddTask+0xc4>)
 8001d8e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	68b9      	ldr	r1, [r7, #8]
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f000 f80e 	bl	8001dbc <SYSVIEW_SendTaskInfo>
 8001da0:	e000      	b.n	8001da4 <SYSVIEW_AddTask+0xb8>
    return;
 8001da2:	bf00      	nop

}
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	080039a8 	.word	0x080039a8
 8001db0:	20012e08 	.word	0x20012e08
 8001db4:	080039b0 	.word	0x080039b0
 8001db8:	20012d68 	.word	0x20012d68

08001dbc <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08a      	sub	sp, #40	; 0x28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
 8001dc8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001dca:	f107 0314 	add.w	r3, r7, #20
 8001dce:	2214      	movs	r2, #20
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f001 fdaa 	bl	800392c <memset>
  TaskInfo.TaskID     = TaskID;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	4618      	mov	r0, r3
 8001df2:	f000 feb5 	bl	8002b60 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001df6:	bf00      	nop
 8001df8:	3728      	adds	r7, #40	; 0x28
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
	...

08001e00 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8001e06:	4b21      	ldr	r3, [pc, #132]	; (8001e8c <_DoInit+0x8c>)
 8001e08:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2203      	movs	r2, #3
 8001e0e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2203      	movs	r2, #3
 8001e14:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a1d      	ldr	r2, [pc, #116]	; (8001e90 <_DoInit+0x90>)
 8001e1a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a1d      	ldr	r2, [pc, #116]	; (8001e94 <_DoInit+0x94>)
 8001e20:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e28:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a14      	ldr	r2, [pc, #80]	; (8001e90 <_DoInit+0x90>)
 8001e40:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a14      	ldr	r2, [pc, #80]	; (8001e98 <_DoInit+0x98>)
 8001e46:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2210      	movs	r2, #16
 8001e4c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3307      	adds	r3, #7
 8001e64:	4a0d      	ldr	r2, [pc, #52]	; (8001e9c <_DoInit+0x9c>)
 8001e66:	6810      	ldr	r0, [r2, #0]
 8001e68:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a0c      	ldr	r2, [pc, #48]	; (8001ea0 <_DoInit+0xa0>)
 8001e6e:	6810      	ldr	r0, [r2, #0]
 8001e70:	6018      	str	r0, [r3, #0]
 8001e72:	8891      	ldrh	r1, [r2, #4]
 8001e74:	7992      	ldrb	r2, [r2, #6]
 8001e76:	8099      	strh	r1, [r3, #4]
 8001e78:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2220      	movs	r2, #32
 8001e7e:	719a      	strb	r2, [r3, #6]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	20015338 	.word	0x20015338
 8001e90:	08003a00 	.word	0x08003a00
 8001e94:	20012e0c 	.word	0x20012e0c
 8001e98:	2001320c 	.word	0x2001320c
 8001e9c:	08003a0c 	.word	0x08003a0c
 8001ea0:	08003a10 	.word	0x08003a10

08001ea4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08a      	sub	sp, #40	; 0x28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 8001eb0:	4b3c      	ldr	r3, [pc, #240]	; (8001fa4 <SEGGER_RTT_ReadNoLock+0x100>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <SEGGER_RTT_ReadNoLock+0x18>
 8001eb8:	f7ff ffa2 	bl	8001e00 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	4413      	add	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	3360      	adds	r3, #96	; 0x60
 8001ec8:	4a36      	ldr	r2, [pc, #216]	; (8001fa4 <SEGGER_RTT_ReadNoLock+0x100>)
 8001eca:	4413      	add	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8001ee2:	6a3a      	ldr	r2, [r7, #32]
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d92a      	bls.n	8001f40 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	6a3b      	ldr	r3, [r7, #32]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	bf28      	it	cs
 8001efc:	4613      	movcs	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	6a3b      	ldr	r3, [r7, #32]
 8001f06:	4413      	add	r3, r2
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	69f8      	ldr	r0, [r7, #28]
 8001f0e:	f001 fd02 	bl	8003916 <memcpy>
    NumBytesRead += NumBytesRem;
 8001f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4413      	add	r3, r2
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8001f1a:	69fa      	ldr	r2, [r7, #28]
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	4413      	add	r3, r2
 8001f20:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8001f2a:	6a3a      	ldr	r2, [r7, #32]
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4413      	add	r3, r2
 8001f30:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	6a3a      	ldr	r2, [r7, #32]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d101      	bne.n	8001f40 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	6a3b      	ldr	r3, [r7, #32]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	bf28      	it	cs
 8001f50:	4613      	movcs	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d018      	beq.n	8001f8c <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	6a3b      	ldr	r3, [r7, #32]
 8001f60:	4413      	add	r3, r2
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	4619      	mov	r1, r3
 8001f66:	69f8      	ldr	r0, [r7, #28]
 8001f68:	f001 fcd5 	bl	8003916 <memcpy>
    NumBytesRead += NumBytesRem;
 8001f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4413      	add	r3, r2
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8001f74:	69fa      	ldr	r2, [r7, #28]
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4413      	add	r3, r2
 8001f7a:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8001f84:	6a3a      	ldr	r2, [r7, #32]
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4413      	add	r3, r2
 8001f8a:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d002      	beq.n	8001f98 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	6a3a      	ldr	r2, [r7, #32]
 8001f96:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3728      	adds	r7, #40	; 0x28
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20015338 	.word	0x20015338

08001fa8 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	; 0x28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4413      	add	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	4a3f      	ldr	r2, [pc, #252]	; (80020c4 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 8001fc6:	4413      	add	r3, r2
 8001fc8:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 8001fca:	6a3b      	ldr	r3, [r7, #32]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 8001fd0:	6a3b      	ldr	r3, [r7, #32]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 8001fd6:	69fa      	ldr	r2, [r7, #28]
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d854      	bhi.n	8002088 <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 8001fde:	6a3b      	ldr	r3, [r7, #32]
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d30f      	bcc.n	8002012 <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8001ff2:	6a3b      	ldr	r3, [r7, #32]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ffe:	4618      	mov	r0, r3
 8002000:	f001 fc89 	bl	8003916 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	441a      	add	r2, r3
 800200a:	6a3b      	ldr	r3, [r7, #32]
 800200c:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 800200e:	2301      	movs	r3, #1
 8002010:	e054      	b.n	80020bc <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	4413      	add	r3, r2
 8002018:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	429a      	cmp	r2, r3
 8002020:	d34b      	bcc.n	80020ba <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 8002022:	6a3b      	ldr	r3, [r7, #32]
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	429a      	cmp	r2, r3
 8002032:	d90e      	bls.n	8002052 <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002034:	6a3b      	ldr	r3, [r7, #32]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	4413      	add	r3, r2
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002040:	4618      	mov	r0, r3
 8002042:	f001 fc68 	bl	8003916 <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	441a      	add	r2, r3
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	60da      	str	r2, [r3, #12]
 8002050:	e018      	b.n	8002084 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	4413      	add	r3, r2
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800205e:	4618      	mov	r0, r3
 8002060:	f001 fc59 	bl	8003916 <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8002064:	6a3b      	ldr	r3, [r7, #32]
 8002066:	6858      	ldr	r0, [r3, #4]
 8002068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	18d1      	adds	r1, r2, r3
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	461a      	mov	r2, r3
 8002076:	f001 fc4e 	bl	8003916 <memcpy>
        pRing->WrOff = NumBytes - Rem;
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad2      	subs	r2, r2, r3
 8002080:	6a3b      	ldr	r3, [r7, #32]
 8002082:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 8002084:	2301      	movs	r3, #1
 8002086:	e019      	b.n	80020bc <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 8002088:	69fa      	ldr	r2, [r7, #28]
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	3b01      	subs	r3, #1
 8002090:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	429a      	cmp	r2, r3
 8002098:	d30f      	bcc.n	80020ba <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 800209a:	6a3b      	ldr	r3, [r7, #32]
 800209c:	685a      	ldr	r2, [r3, #4]
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	4413      	add	r3, r2
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020a6:	4618      	mov	r0, r3
 80020a8:	f001 fc35 	bl	8003916 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	441a      	add	r2, r3
 80020b2:	6a3b      	ldr	r3, [r7, #32]
 80020b4:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3728      	adds	r7, #40	; 0x28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20015338 	.word	0x20015338

080020c8 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
 80020d4:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 80020d6:	4b30      	ldr	r3, [pc, #192]	; (8002198 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 80020de:	f7ff fe8f 	bl	8001e00 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 80020e2:	4b2d      	ldr	r3, [pc, #180]	; (8002198 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	461a      	mov	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d24c      	bcs.n	8002188 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 80020ee:	f3ef 8311 	mrs	r3, BASEPRI
 80020f2:	f04f 0120 	mov.w	r1, #32
 80020f6:	f381 8811 	msr	BASEPRI, r1
 80020fa:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d032      	beq.n	8002168 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8002102:	4925      	ldr	r1, [pc, #148]	; (8002198 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	1c5a      	adds	r2, r3, #1
 8002108:	4613      	mov	r3, r2
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	4413      	add	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	440b      	add	r3, r1
 8002112:	68ba      	ldr	r2, [r7, #8]
 8002114:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8002116:	4920      	ldr	r1, [pc, #128]	; (8002198 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	1c5a      	adds	r2, r3, #1
 800211c:	4613      	mov	r3, r2
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	4413      	add	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	440b      	add	r3, r1
 8002126:	3304      	adds	r3, #4
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800212c:	491a      	ldr	r1, [pc, #104]	; (8002198 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	4613      	mov	r3, r2
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	4413      	add	r3, r2
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	440b      	add	r3, r1
 800213a:	3320      	adds	r3, #32
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8002140:	4915      	ldr	r1, [pc, #84]	; (8002198 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	4613      	mov	r3, r2
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	4413      	add	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	440b      	add	r3, r1
 800214e:	3328      	adds	r3, #40	; 0x28
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8002154:	4910      	ldr	r1, [pc, #64]	; (8002198 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	4613      	mov	r3, r2
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	4413      	add	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	440b      	add	r3, r1
 8002162:	3324      	adds	r3, #36	; 0x24
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8002168:	490b      	ldr	r1, [pc, #44]	; (8002198 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	4613      	mov	r3, r2
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	4413      	add	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	440b      	add	r3, r1
 8002176:	332c      	adds	r3, #44	; 0x2c
 8002178:	6a3a      	ldr	r2, [r7, #32]
 800217a:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	e002      	b.n	800218e <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 8002188:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800218c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800218e:	697b      	ldr	r3, [r7, #20]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20015338 	.word	0x20015338

0800219c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
 80021a8:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 80021aa:	4b30      	ldr	r3, [pc, #192]	; (800226c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <SEGGER_RTT_ConfigDownBuffer+0x1a>
 80021b2:	f7ff fe25 	bl	8001e00 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 80021b6:	4b2d      	ldr	r3, [pc, #180]	; (800226c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	461a      	mov	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4293      	cmp	r3, r2
 80021c0:	d24b      	bcs.n	800225a <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 80021c2:	f3ef 8311 	mrs	r3, BASEPRI
 80021c6:	f04f 0120 	mov.w	r1, #32
 80021ca:	f381 8811 	msr	BASEPRI, r1
 80021ce:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d031      	beq.n	800223a <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 80021d6:	4925      	ldr	r1, [pc, #148]	; (800226c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	4613      	mov	r3, r2
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	4413      	add	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	440b      	add	r3, r1
 80021e4:	3360      	adds	r3, #96	; 0x60
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80021ea:	4920      	ldr	r1, [pc, #128]	; (800226c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	4613      	mov	r3, r2
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	4413      	add	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	440b      	add	r3, r1
 80021f8:	3364      	adds	r3, #100	; 0x64
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80021fe:	491b      	ldr	r1, [pc, #108]	; (800226c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	4613      	mov	r3, r2
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	4413      	add	r3, r2
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	440b      	add	r3, r1
 800220c:	3368      	adds	r3, #104	; 0x68
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 8002212:	4916      	ldr	r1, [pc, #88]	; (800226c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	4613      	mov	r3, r2
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	4413      	add	r3, r2
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	440b      	add	r3, r1
 8002220:	3370      	adds	r3, #112	; 0x70
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 8002226:	4911      	ldr	r1, [pc, #68]	; (800226c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	4613      	mov	r3, r2
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	4413      	add	r3, r2
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	440b      	add	r3, r1
 8002234:	336c      	adds	r3, #108	; 0x6c
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 800223a:	490c      	ldr	r1, [pc, #48]	; (800226c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	4613      	mov	r3, r2
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	4413      	add	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	440b      	add	r3, r1
 8002248:	3374      	adds	r3, #116	; 0x74
 800224a:	6a3a      	ldr	r2, [r7, #32]
 800224c:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
 8002258:	e002      	b.n	8002260 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 800225a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800225e:	617b      	str	r3, [r7, #20]
  }
  return r;
 8002260:	697b      	ldr	r3, [r7, #20]
}
 8002262:	4618      	mov	r0, r3
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20015338 	.word	0x20015338

08002270 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8002270:	b480      	push	{r7}
 8002272:	b087      	sub	sp, #28
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800227c:	2300      	movs	r3, #0
 800227e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8002280:	e002      	b.n	8002288 <_EncodeStr+0x18>
    Len++;
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	3301      	adds	r3, #1
 8002286:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8002288:	68ba      	ldr	r2, [r7, #8]
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4413      	add	r3, r2
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1f6      	bne.n	8002282 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	429a      	cmp	r2, r3
 800229a:	d901      	bls.n	80022a0 <_EncodeStr+0x30>
    Len = Limit;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	2bfe      	cmp	r3, #254	; 0xfe
 80022a4:	d806      	bhi.n	80022b4 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	1c5a      	adds	r2, r3, #1
 80022aa:	60fa      	str	r2, [r7, #12]
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	701a      	strb	r2, [r3, #0]
 80022b2:	e011      	b.n	80022d8 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	60fa      	str	r2, [r7, #12]
 80022ba:	22ff      	movs	r2, #255	; 0xff
 80022bc:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	1c5a      	adds	r2, r3, #1
 80022c2:	60fa      	str	r2, [r7, #12]
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	0a19      	lsrs	r1, r3, #8
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	1c5a      	adds	r2, r3, #1
 80022d2:	60fa      	str	r2, [r7, #12]
 80022d4:	b2ca      	uxtb	r2, r1
 80022d6:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80022dc:	e00a      	b.n	80022f4 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	1c53      	adds	r3, r2, #1
 80022e2:	60bb      	str	r3, [r7, #8]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	1c59      	adds	r1, r3, #1
 80022e8:	60f9      	str	r1, [r7, #12]
 80022ea:	7812      	ldrb	r2, [r2, #0]
 80022ec:	701a      	strb	r2, [r3, #0]
    n++;
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	3301      	adds	r3, #1
 80022f2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d3f0      	bcc.n	80022de <_EncodeStr+0x6e>
  }
  return pPayload;
 80022fc:	68fb      	ldr	r3, [r7, #12]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	371c      	adds	r7, #28
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3304      	adds	r3, #4
}
 8002316:	4618      	mov	r0, r3
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002328:	1cfb      	adds	r3, r7, #3
 800232a:	2201      	movs	r2, #1
 800232c:	4619      	mov	r1, r3
 800232e:	2001      	movs	r0, #1
 8002330:	f7ff fdb8 	bl	8001ea4 <SEGGER_RTT_ReadNoLock>
 8002334:	4603      	mov	r3, r0
 8002336:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	dd44      	ble.n	80023c8 <_HandleIncomingPacket+0xa6>
    switch (Cmd) {
 800233e:	78fb      	ldrb	r3, [r7, #3]
 8002340:	2b04      	cmp	r3, #4
 8002342:	d01a      	beq.n	800237a <_HandleIncomingPacket+0x58>
 8002344:	2b04      	cmp	r3, #4
 8002346:	dc06      	bgt.n	8002356 <_HandleIncomingPacket+0x34>
 8002348:	2b02      	cmp	r3, #2
 800234a:	d010      	beq.n	800236e <_HandleIncomingPacket+0x4c>
 800234c:	2b02      	cmp	r3, #2
 800234e:	dc11      	bgt.n	8002374 <_HandleIncomingPacket+0x52>
 8002350:	2b01      	cmp	r3, #1
 8002352:	d009      	beq.n	8002368 <_HandleIncomingPacket+0x46>
 8002354:	e02d      	b.n	80023b2 <_HandleIncomingPacket+0x90>
 8002356:	2b06      	cmp	r3, #6
 8002358:	d015      	beq.n	8002386 <_HandleIncomingPacket+0x64>
 800235a:	2b06      	cmp	r3, #6
 800235c:	db10      	blt.n	8002380 <_HandleIncomingPacket+0x5e>
 800235e:	2b07      	cmp	r3, #7
 8002360:	d014      	beq.n	800238c <_HandleIncomingPacket+0x6a>
 8002362:	2b80      	cmp	r3, #128	; 0x80
 8002364:	d015      	beq.n	8002392 <_HandleIncomingPacket+0x70>
 8002366:	e024      	b.n	80023b2 <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8002368:	f000 fa7e 	bl	8002868 <SEGGER_SYSVIEW_Start>
      break;
 800236c:	e031      	b.n	80023d2 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800236e:	f000 fb37 	bl	80029e0 <SEGGER_SYSVIEW_Stop>
      break;
 8002372:	e02e      	b.n	80023d2 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8002374:	f000 fd12 	bl	8002d9c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8002378:	e02b      	b.n	80023d2 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800237a:	f000 fcd7 	bl	8002d2c <SEGGER_SYSVIEW_SendTaskList>
      break;
 800237e:	e028      	b.n	80023d2 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8002380:	f000 fb54 	bl	8002a2c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8002384:	e025      	b.n	80023d2 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8002386:	f000 ff39 	bl	80031fc <SEGGER_SYSVIEW_SendNumModules>
      break;
 800238a:	e022      	b.n	80023d2 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800238c:	f000 ff18 	bl	80031c0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8002390:	e01f      	b.n	80023d2 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002392:	1cfb      	adds	r3, r7, #3
 8002394:	2201      	movs	r2, #1
 8002396:	4619      	mov	r1, r3
 8002398:	2001      	movs	r0, #1
 800239a:	f7ff fd83 	bl	8001ea4 <SEGGER_RTT_ReadNoLock>
 800239e:	4603      	mov	r3, r0
 80023a0:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	dd11      	ble.n	80023cc <_HandleIncomingPacket+0xaa>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80023a8:	78fb      	ldrb	r3, [r7, #3]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 fe88 	bl	80030c0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80023b0:	e00c      	b.n	80023cc <_HandleIncomingPacket+0xaa>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80023b2:	78fb      	ldrb	r3, [r7, #3]
 80023b4:	b25b      	sxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	da0a      	bge.n	80023d0 <_HandleIncomingPacket+0xae>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80023ba:	1cfb      	adds	r3, r7, #3
 80023bc:	2201      	movs	r2, #1
 80023be:	4619      	mov	r1, r3
 80023c0:	2001      	movs	r0, #1
 80023c2:	f7ff fd6f 	bl	8001ea4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80023c6:	e003      	b.n	80023d0 <_HandleIncomingPacket+0xae>
    }
  }
 80023c8:	bf00      	nop
 80023ca:	e002      	b.n	80023d2 <_HandleIncomingPacket+0xb0>
      break;
 80023cc:	bf00      	nop
 80023ce:	e000      	b.n	80023d2 <_HandleIncomingPacket+0xb0>
      break;
 80023d0:	bf00      	nop
}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08c      	sub	sp, #48	; 0x30
 80023e0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80023e2:	2301      	movs	r3, #1
 80023e4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80023e6:	1d3b      	adds	r3, r7, #4
 80023e8:	3301      	adds	r3, #1
 80023ea:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023f0:	4b30      	ldr	r3, [pc, #192]	; (80024b4 <_TrySendOverflowPacket+0xd8>)
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80023f6:	e00b      	b.n	8002410 <_TrySendOverflowPacket+0x34>
 80023f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fe:	1c59      	adds	r1, r3, #1
 8002400:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002402:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	701a      	strb	r2, [r3, #0]
 800240a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240c:	09db      	lsrs	r3, r3, #7
 800240e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002412:	2b7f      	cmp	r3, #127	; 0x7f
 8002414:	d8f0      	bhi.n	80023f8 <_TrySendOverflowPacket+0x1c>
 8002416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002418:	1c5a      	adds	r2, r3, #1
 800241a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800241c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	701a      	strb	r2, [r3, #0]
 8002422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002424:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002426:	4b24      	ldr	r3, [pc, #144]	; (80024b8 <_TrySendOverflowPacket+0xdc>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800242c:	4b21      	ldr	r3, [pc, #132]	; (80024b4 <_TrySendOverflowPacket+0xd8>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	627b      	str	r3, [r7, #36]	; 0x24
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	623b      	str	r3, [r7, #32]
 800243e:	e00b      	b.n	8002458 <_TrySendOverflowPacket+0x7c>
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	b2da      	uxtb	r2, r3
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	1c59      	adds	r1, r3, #1
 8002448:	6279      	str	r1, [r7, #36]	; 0x24
 800244a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	701a      	strb	r2, [r3, #0]
 8002452:	6a3b      	ldr	r3, [r7, #32]
 8002454:	09db      	lsrs	r3, r3, #7
 8002456:	623b      	str	r3, [r7, #32]
 8002458:	6a3b      	ldr	r3, [r7, #32]
 800245a:	2b7f      	cmp	r3, #127	; 0x7f
 800245c:	d8f0      	bhi.n	8002440 <_TrySendOverflowPacket+0x64>
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	1c5a      	adds	r2, r3, #1
 8002462:	627a      	str	r2, [r7, #36]	; 0x24
 8002464:	6a3a      	ldr	r2, [r7, #32]
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	701a      	strb	r2, [r3, #0]
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800246e:	69fa      	ldr	r2, [r7, #28]
 8002470:	1d3b      	adds	r3, r7, #4
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	461a      	mov	r2, r3
 8002476:	1d3b      	adds	r3, r7, #4
 8002478:	4619      	mov	r1, r3
 800247a:	2001      	movs	r0, #1
 800247c:	f7ff fd94 	bl	8001fa8 <SEGGER_RTT_WriteSkipNoLock>
 8002480:	4603      	mov	r3, r0
 8002482:	613b      	str	r3, [r7, #16]
  if (Status) {
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d009      	beq.n	800249e <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800248a:	4a0a      	ldr	r2, [pc, #40]	; (80024b4 <_TrySendOverflowPacket+0xd8>)
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8002490:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <_TrySendOverflowPacket+0xd8>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	3b01      	subs	r3, #1
 8002496:	b2da      	uxtb	r2, r3
 8002498:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <_TrySendOverflowPacket+0xd8>)
 800249a:	701a      	strb	r2, [r3, #0]
 800249c:	e004      	b.n	80024a8 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800249e:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <_TrySendOverflowPacket+0xd8>)
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	3301      	adds	r3, #1
 80024a4:	4a03      	ldr	r2, [pc, #12]	; (80024b4 <_TrySendOverflowPacket+0xd8>)
 80024a6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80024a8:	693b      	ldr	r3, [r7, #16]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3730      	adds	r7, #48	; 0x30
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20015224 	.word	0x20015224
 80024b8:	e0001004 	.word	0xe0001004

080024bc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08a      	sub	sp, #40	; 0x28
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80024c8:	4b63      	ldr	r3, [pc, #396]	; (8002658 <_SendPacket+0x19c>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d010      	beq.n	80024f2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80024d0:	4b61      	ldr	r3, [pc, #388]	; (8002658 <_SendPacket+0x19c>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 80a1 	beq.w	800261c <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80024da:	4b5f      	ldr	r3, [pc, #380]	; (8002658 <_SendPacket+0x19c>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d109      	bne.n	80024f6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80024e2:	f7ff ff7b 	bl	80023dc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80024e6:	4b5c      	ldr	r3, [pc, #368]	; (8002658 <_SendPacket+0x19c>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	f040 8098 	bne.w	8002620 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 80024f0:	e001      	b.n	80024f6 <_SendPacket+0x3a>
    goto Send;
 80024f2:	bf00      	nop
 80024f4:	e000      	b.n	80024f8 <_SendPacket+0x3c>
Send:
 80024f6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b1f      	cmp	r3, #31
 80024fc:	d809      	bhi.n	8002512 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80024fe:	4b56      	ldr	r3, [pc, #344]	; (8002658 <_SendPacket+0x19c>)
 8002500:	69da      	ldr	r2, [r3, #28]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	fa22 f303 	lsr.w	r3, r2, r3
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b00      	cmp	r3, #0
 800250e:	f040 8089 	bne.w	8002624 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b17      	cmp	r3, #23
 8002516:	d807      	bhi.n	8002528 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	3b01      	subs	r3, #1
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	b2da      	uxtb	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	701a      	strb	r2, [r3, #0]
 8002526:	e03d      	b.n	80025a4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	2b7f      	cmp	r3, #127	; 0x7f
 8002534:	d912      	bls.n	800255c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	09da      	lsrs	r2, r3, #7
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	3b01      	subs	r3, #1
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	b2db      	uxtb	r3, r3
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	3a01      	subs	r2, #1
 800254e:	60fa      	str	r2, [r7, #12]
 8002550:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002554:	b2da      	uxtb	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	701a      	strb	r2, [r3, #0]
 800255a:	e006      	b.n	800256a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	3b01      	subs	r3, #1
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	b2da      	uxtb	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b7f      	cmp	r3, #127	; 0x7f
 800256e:	d912      	bls.n	8002596 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	09da      	lsrs	r2, r3, #7
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	3b01      	subs	r3, #1
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	b2db      	uxtb	r3, r3
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	3a01      	subs	r2, #1
 8002588:	60fa      	str	r2, [r7, #12]
 800258a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800258e:	b2da      	uxtb	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	701a      	strb	r2, [r3, #0]
 8002594:	e006      	b.n	80025a4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	3b01      	subs	r3, #1
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80025a4:	4b2d      	ldr	r3, [pc, #180]	; (800265c <_SendPacket+0x1a0>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80025aa:	4b2b      	ldr	r3, [pc, #172]	; (8002658 <_SendPacket+0x19c>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	627b      	str	r3, [r7, #36]	; 0x24
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	623b      	str	r3, [r7, #32]
 80025bc:	e00b      	b.n	80025d6 <_SendPacket+0x11a>
 80025be:	6a3b      	ldr	r3, [r7, #32]
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	1c59      	adds	r1, r3, #1
 80025c6:	6279      	str	r1, [r7, #36]	; 0x24
 80025c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	701a      	strb	r2, [r3, #0]
 80025d0:	6a3b      	ldr	r3, [r7, #32]
 80025d2:	09db      	lsrs	r3, r3, #7
 80025d4:	623b      	str	r3, [r7, #32]
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	2b7f      	cmp	r3, #127	; 0x7f
 80025da:	d8f0      	bhi.n	80025be <_SendPacket+0x102>
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	627a      	str	r2, [r7, #36]	; 0x24
 80025e2:	6a3a      	ldr	r2, [r7, #32]
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	701a      	strb	r2, [r3, #0]
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80025ec:	68ba      	ldr	r2, [r7, #8]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	461a      	mov	r2, r3
 80025f4:	68f9      	ldr	r1, [r7, #12]
 80025f6:	2001      	movs	r0, #1
 80025f8:	f7ff fcd6 	bl	8001fa8 <SEGGER_RTT_WriteSkipNoLock>
 80025fc:	4603      	mov	r3, r0
 80025fe:	613b      	str	r3, [r7, #16]
  if (Status) {
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002606:	4a14      	ldr	r2, [pc, #80]	; (8002658 <_SendPacket+0x19c>)
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	60d3      	str	r3, [r2, #12]
 800260c:	e00b      	b.n	8002626 <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800260e:	4b12      	ldr	r3, [pc, #72]	; (8002658 <_SendPacket+0x19c>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	3301      	adds	r3, #1
 8002614:	b2da      	uxtb	r2, r3
 8002616:	4b10      	ldr	r3, [pc, #64]	; (8002658 <_SendPacket+0x19c>)
 8002618:	701a      	strb	r2, [r3, #0]
 800261a:	e004      	b.n	8002626 <_SendPacket+0x16a>
    goto SendDone;
 800261c:	bf00      	nop
 800261e:	e002      	b.n	8002626 <_SendPacket+0x16a>
      goto SendDone;
 8002620:	bf00      	nop
 8002622:	e000      	b.n	8002626 <_SendPacket+0x16a>
      goto SendDone;
 8002624:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8002626:	4b0e      	ldr	r3, [pc, #56]	; (8002660 <_SendPacket+0x1a4>)
 8002628:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800262c:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <_SendPacket+0x1a4>)
 800262e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002632:	429a      	cmp	r2, r3
 8002634:	d00b      	beq.n	800264e <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8002636:	4b08      	ldr	r3, [pc, #32]	; (8002658 <_SendPacket+0x19c>)
 8002638:	789b      	ldrb	r3, [r3, #2]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d107      	bne.n	800264e <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800263e:	4b06      	ldr	r3, [pc, #24]	; (8002658 <_SendPacket+0x19c>)
 8002640:	2201      	movs	r2, #1
 8002642:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8002644:	f7ff fe6d 	bl	8002322 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8002648:	4b03      	ldr	r3, [pc, #12]	; (8002658 <_SendPacket+0x19c>)
 800264a:	2200      	movs	r2, #0
 800264c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800264e:	bf00      	nop
 8002650:	3728      	adds	r7, #40	; 0x28
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	20015224 	.word	0x20015224
 800265c:	e0001004 	.word	0xe0001004
 8002660:	20015338 	.word	0x20015338

08002664 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af02      	add	r7, sp, #8
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
 8002670:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8002672:	2300      	movs	r3, #0
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800267a:	4a14      	ldr	r2, [pc, #80]	; (80026cc <SEGGER_SYSVIEW_Init+0x68>)
 800267c:	4914      	ldr	r1, [pc, #80]	; (80026d0 <SEGGER_SYSVIEW_Init+0x6c>)
 800267e:	2001      	movs	r0, #1
 8002680:	f7ff fd22 	bl	80020c8 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8002684:	2300      	movs	r3, #0
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	2308      	movs	r3, #8
 800268a:	4a12      	ldr	r2, [pc, #72]	; (80026d4 <SEGGER_SYSVIEW_Init+0x70>)
 800268c:	4910      	ldr	r1, [pc, #64]	; (80026d0 <SEGGER_SYSVIEW_Init+0x6c>)
 800268e:	2001      	movs	r0, #1
 8002690:	f7ff fd84 	bl	800219c <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8002694:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <SEGGER_SYSVIEW_Init+0x74>)
 8002696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800269a:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800269c:	4b0f      	ldr	r3, [pc, #60]	; (80026dc <SEGGER_SYSVIEW_Init+0x78>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a0d      	ldr	r2, [pc, #52]	; (80026d8 <SEGGER_SYSVIEW_Init+0x74>)
 80026a2:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80026a4:	4a0c      	ldr	r2, [pc, #48]	; (80026d8 <SEGGER_SYSVIEW_Init+0x74>)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80026aa:	4a0b      	ldr	r2, [pc, #44]	; (80026d8 <SEGGER_SYSVIEW_Init+0x74>)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80026b0:	4a09      	ldr	r2, [pc, #36]	; (80026d8 <SEGGER_SYSVIEW_Init+0x74>)
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80026b6:	4a08      	ldr	r2, [pc, #32]	; (80026d8 <SEGGER_SYSVIEW_Init+0x74>)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80026bc:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <SEGGER_SYSVIEW_Init+0x74>)
 80026be:	2200      	movs	r2, #0
 80026c0:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80026c2:	bf00      	nop
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	2001321c 	.word	0x2001321c
 80026d0:	08003a18 	.word	0x08003a18
 80026d4:	2001521c 	.word	0x2001521c
 80026d8:	20015224 	.word	0x20015224
 80026dc:	e0001004 	.word	0xe0001004

080026e0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80026e8:	4a04      	ldr	r2, [pc, #16]	; (80026fc <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6113      	str	r3, [r2, #16]
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	20015224 	.word	0x20015224

08002700 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002708:	f3ef 8311 	mrs	r3, BASEPRI
 800270c:	f04f 0120 	mov.w	r1, #32
 8002710:	f381 8811 	msr	BASEPRI, r1
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	4808      	ldr	r0, [pc, #32]	; (8002738 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8002718:	f7ff fdf7 	bl	800230a <_PreparePacket>
 800271c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	68b8      	ldr	r0, [r7, #8]
 8002724:	f7ff feca 	bl	80024bc <_SendPacket>
  RECORD_END();
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f383 8811 	msr	BASEPRI, r3
}
 800272e:	bf00      	nop
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20015254 	.word	0x20015254

0800273c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800273c:	b580      	push	{r7, lr}
 800273e:	b088      	sub	sp, #32
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002746:	f3ef 8311 	mrs	r3, BASEPRI
 800274a:	f04f 0120 	mov.w	r1, #32
 800274e:	f381 8811 	msr	BASEPRI, r1
 8002752:	617b      	str	r3, [r7, #20]
 8002754:	4816      	ldr	r0, [pc, #88]	; (80027b0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8002756:	f7ff fdd8 	bl	800230a <_PreparePacket>
 800275a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	61fb      	str	r3, [r7, #28]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	61bb      	str	r3, [r7, #24]
 8002768:	e00b      	b.n	8002782 <SEGGER_SYSVIEW_RecordU32+0x46>
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	b2da      	uxtb	r2, r3
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	1c59      	adds	r1, r3, #1
 8002772:	61f9      	str	r1, [r7, #28]
 8002774:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	701a      	strb	r2, [r3, #0]
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	09db      	lsrs	r3, r3, #7
 8002780:	61bb      	str	r3, [r7, #24]
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	2b7f      	cmp	r3, #127	; 0x7f
 8002786:	d8f0      	bhi.n	800276a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	61fa      	str	r2, [r7, #28]
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	701a      	strb	r2, [r3, #0]
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	68f9      	ldr	r1, [r7, #12]
 800279c:	6938      	ldr	r0, [r7, #16]
 800279e:	f7ff fe8d 	bl	80024bc <_SendPacket>
  RECORD_END();
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f383 8811 	msr	BASEPRI, r3
}
 80027a8:	bf00      	nop
 80027aa:	3720      	adds	r7, #32
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	20015254 	.word	0x20015254

080027b4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08c      	sub	sp, #48	; 0x30
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80027c0:	f3ef 8311 	mrs	r3, BASEPRI
 80027c4:	f04f 0120 	mov.w	r1, #32
 80027c8:	f381 8811 	msr	BASEPRI, r1
 80027cc:	61fb      	str	r3, [r7, #28]
 80027ce:	4825      	ldr	r0, [pc, #148]	; (8002864 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80027d0:	f7ff fd9b 	bl	800230a <_PreparePacket>
 80027d4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80027e2:	e00b      	b.n	80027fc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80027e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ea:	1c59      	adds	r1, r3, #1
 80027ec:	62f9      	str	r1, [r7, #44]	; 0x2c
 80027ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	701a      	strb	r2, [r3, #0]
 80027f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f8:	09db      	lsrs	r3, r3, #7
 80027fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80027fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fe:	2b7f      	cmp	r3, #127	; 0x7f
 8002800:	d8f0      	bhi.n	80027e4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8002802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002808:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	701a      	strb	r2, [r3, #0]
 800280e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002810:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	627b      	str	r3, [r7, #36]	; 0x24
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	623b      	str	r3, [r7, #32]
 800281a:	e00b      	b.n	8002834 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800281c:	6a3b      	ldr	r3, [r7, #32]
 800281e:	b2da      	uxtb	r2, r3
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	1c59      	adds	r1, r3, #1
 8002824:	6279      	str	r1, [r7, #36]	; 0x24
 8002826:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	701a      	strb	r2, [r3, #0]
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	09db      	lsrs	r3, r3, #7
 8002832:	623b      	str	r3, [r7, #32]
 8002834:	6a3b      	ldr	r3, [r7, #32]
 8002836:	2b7f      	cmp	r3, #127	; 0x7f
 8002838:	d8f0      	bhi.n	800281c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	1c5a      	adds	r2, r3, #1
 800283e:	627a      	str	r2, [r7, #36]	; 0x24
 8002840:	6a3a      	ldr	r2, [r7, #32]
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	6979      	ldr	r1, [r7, #20]
 800284e:	69b8      	ldr	r0, [r7, #24]
 8002850:	f7ff fe34 	bl	80024bc <_SendPacket>
  RECORD_END();
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	f383 8811 	msr	BASEPRI, r3
}
 800285a:	bf00      	nop
 800285c:	3730      	adds	r7, #48	; 0x30
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	20015254 	.word	0x20015254

08002868 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 8002868:	b580      	push	{r7, lr}
 800286a:	b08c      	sub	sp, #48	; 0x30
 800286c:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 800286e:	4b59      	ldr	r3, [pc, #356]	; (80029d4 <SEGGER_SYSVIEW_Start+0x16c>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	f040 80aa 	bne.w	80029cc <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 8002878:	4b56      	ldr	r3, [pc, #344]	; (80029d4 <SEGGER_SYSVIEW_Start+0x16c>)
 800287a:	2201      	movs	r2, #1
 800287c:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800287e:	f3ef 8311 	mrs	r3, BASEPRI
 8002882:	f04f 0120 	mov.w	r1, #32
 8002886:	f381 8811 	msr	BASEPRI, r1
 800288a:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800288c:	220a      	movs	r2, #10
 800288e:	4952      	ldr	r1, [pc, #328]	; (80029d8 <SEGGER_SYSVIEW_Start+0x170>)
 8002890:	2001      	movs	r0, #1
 8002892:	f7ff fb89 	bl	8001fa8 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800289c:	200a      	movs	r0, #10
 800289e:	f7ff ff2f 	bl	8002700 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80028a2:	f3ef 8311 	mrs	r3, BASEPRI
 80028a6:	f04f 0120 	mov.w	r1, #32
 80028aa:	f381 8811 	msr	BASEPRI, r1
 80028ae:	60bb      	str	r3, [r7, #8]
 80028b0:	484a      	ldr	r0, [pc, #296]	; (80029dc <SEGGER_SYSVIEW_Start+0x174>)
 80028b2:	f7ff fd2a 	bl	800230a <_PreparePacket>
 80028b6:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028c0:	4b44      	ldr	r3, [pc, #272]	; (80029d4 <SEGGER_SYSVIEW_Start+0x16c>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80028c6:	e00b      	b.n	80028e0 <SEGGER_SYSVIEW_Start+0x78>
 80028c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ce:	1c59      	adds	r1, r3, #1
 80028d0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80028d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	701a      	strb	r2, [r3, #0]
 80028da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028dc:	09db      	lsrs	r3, r3, #7
 80028de:	62bb      	str	r3, [r7, #40]	; 0x28
 80028e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e2:	2b7f      	cmp	r3, #127	; 0x7f
 80028e4:	d8f0      	bhi.n	80028c8 <SEGGER_SYSVIEW_Start+0x60>
 80028e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e8:	1c5a      	adds	r2, r3, #1
 80028ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	701a      	strb	r2, [r3, #0]
 80028f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
 80028fa:	4b36      	ldr	r3, [pc, #216]	; (80029d4 <SEGGER_SYSVIEW_Start+0x16c>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	623b      	str	r3, [r7, #32]
 8002900:	e00b      	b.n	800291a <SEGGER_SYSVIEW_Start+0xb2>
 8002902:	6a3b      	ldr	r3, [r7, #32]
 8002904:	b2da      	uxtb	r2, r3
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	1c59      	adds	r1, r3, #1
 800290a:	6279      	str	r1, [r7, #36]	; 0x24
 800290c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	701a      	strb	r2, [r3, #0]
 8002914:	6a3b      	ldr	r3, [r7, #32]
 8002916:	09db      	lsrs	r3, r3, #7
 8002918:	623b      	str	r3, [r7, #32]
 800291a:	6a3b      	ldr	r3, [r7, #32]
 800291c:	2b7f      	cmp	r3, #127	; 0x7f
 800291e:	d8f0      	bhi.n	8002902 <SEGGER_SYSVIEW_Start+0x9a>
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	627a      	str	r2, [r7, #36]	; 0x24
 8002926:	6a3a      	ldr	r2, [r7, #32]
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	701a      	strb	r2, [r3, #0]
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	61fb      	str	r3, [r7, #28]
 8002934:	4b27      	ldr	r3, [pc, #156]	; (80029d4 <SEGGER_SYSVIEW_Start+0x16c>)
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	61bb      	str	r3, [r7, #24]
 800293a:	e00b      	b.n	8002954 <SEGGER_SYSVIEW_Start+0xec>
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	b2da      	uxtb	r2, r3
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	1c59      	adds	r1, r3, #1
 8002944:	61f9      	str	r1, [r7, #28]
 8002946:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	701a      	strb	r2, [r3, #0]
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	09db      	lsrs	r3, r3, #7
 8002952:	61bb      	str	r3, [r7, #24]
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	2b7f      	cmp	r3, #127	; 0x7f
 8002958:	d8f0      	bhi.n	800293c <SEGGER_SYSVIEW_Start+0xd4>
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	1c5a      	adds	r2, r3, #1
 800295e:	61fa      	str	r2, [r7, #28]
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	617b      	str	r3, [r7, #20]
 800296e:	2302      	movs	r3, #2
 8002970:	613b      	str	r3, [r7, #16]
 8002972:	e00b      	b.n	800298c <SEGGER_SYSVIEW_Start+0x124>
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	b2da      	uxtb	r2, r3
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	1c59      	adds	r1, r3, #1
 800297c:	6179      	str	r1, [r7, #20]
 800297e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	701a      	strb	r2, [r3, #0]
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	09db      	lsrs	r3, r3, #7
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	2b7f      	cmp	r3, #127	; 0x7f
 8002990:	d8f0      	bhi.n	8002974 <SEGGER_SYSVIEW_Start+0x10c>
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	617a      	str	r2, [r7, #20]
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	701a      	strb	r2, [r3, #0]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80029a2:	2218      	movs	r2, #24
 80029a4:	6839      	ldr	r1, [r7, #0]
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7ff fd88 	bl	80024bc <_SendPacket>
      RECORD_END();
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80029b2:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <SEGGER_SYSVIEW_Start+0x16c>)
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d002      	beq.n	80029c0 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 80029ba:	4b06      	ldr	r3, [pc, #24]	; (80029d4 <SEGGER_SYSVIEW_Start+0x16c>)
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80029c0:	f000 f9ec 	bl	8002d9c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80029c4:	f000 f9b2 	bl	8002d2c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80029c8:	f000 fc18 	bl	80031fc <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 80029cc:	bf00      	nop
 80029ce:	3730      	adds	r7, #48	; 0x30
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	20015224 	.word	0x20015224
 80029d8:	08003a78 	.word	0x08003a78
 80029dc:	20015254 	.word	0x20015254

080029e0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80029e6:	f3ef 8311 	mrs	r3, BASEPRI
 80029ea:	f04f 0120 	mov.w	r1, #32
 80029ee:	f381 8811 	msr	BASEPRI, r1
 80029f2:	607b      	str	r3, [r7, #4]
 80029f4:	480b      	ldr	r0, [pc, #44]	; (8002a24 <SEGGER_SYSVIEW_Stop+0x44>)
 80029f6:	f7ff fc88 	bl	800230a <_PreparePacket>
 80029fa:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80029fc:	4b0a      	ldr	r3, [pc, #40]	; (8002a28 <SEGGER_SYSVIEW_Stop+0x48>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d007      	beq.n	8002a14 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8002a04:	220b      	movs	r2, #11
 8002a06:	6839      	ldr	r1, [r7, #0]
 8002a08:	6838      	ldr	r0, [r7, #0]
 8002a0a:	f7ff fd57 	bl	80024bc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8002a0e:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <SEGGER_SYSVIEW_Stop+0x48>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f383 8811 	msr	BASEPRI, r3
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	20015254 	.word	0x20015254
 8002a28:	20015224 	.word	0x20015224

08002a2c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b08c      	sub	sp, #48	; 0x30
 8002a30:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8002a32:	f3ef 8311 	mrs	r3, BASEPRI
 8002a36:	f04f 0120 	mov.w	r1, #32
 8002a3a:	f381 8811 	msr	BASEPRI, r1
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	4845      	ldr	r0, [pc, #276]	; (8002b58 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8002a42:	f7ff fc62 	bl	800230a <_PreparePacket>
 8002a46:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a50:	4b42      	ldr	r3, [pc, #264]	; (8002b5c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a56:	e00b      	b.n	8002a70 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8002a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a5e:	1c59      	adds	r1, r3, #1
 8002a60:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002a62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	701a      	strb	r2, [r3, #0]
 8002a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6c:	09db      	lsrs	r3, r3, #7
 8002a6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a72:	2b7f      	cmp	r3, #127	; 0x7f
 8002a74:	d8f0      	bhi.n	8002a58 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8002a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a78:	1c5a      	adds	r2, r3, #1
 8002a7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	701a      	strb	r2, [r3, #0]
 8002a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a84:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
 8002a8a:	4b34      	ldr	r3, [pc, #208]	; (8002b5c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	623b      	str	r3, [r7, #32]
 8002a90:	e00b      	b.n	8002aaa <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8002a92:	6a3b      	ldr	r3, [r7, #32]
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a98:	1c59      	adds	r1, r3, #1
 8002a9a:	6279      	str	r1, [r7, #36]	; 0x24
 8002a9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	701a      	strb	r2, [r3, #0]
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	09db      	lsrs	r3, r3, #7
 8002aa8:	623b      	str	r3, [r7, #32]
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	2b7f      	cmp	r3, #127	; 0x7f
 8002aae:	d8f0      	bhi.n	8002a92 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab2:	1c5a      	adds	r2, r3, #1
 8002ab4:	627a      	str	r2, [r7, #36]	; 0x24
 8002ab6:	6a3a      	ldr	r2, [r7, #32]
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	701a      	strb	r2, [r3, #0]
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	61fb      	str	r3, [r7, #28]
 8002ac4:	4b25      	ldr	r3, [pc, #148]	; (8002b5c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	61bb      	str	r3, [r7, #24]
 8002aca:	e00b      	b.n	8002ae4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	1c59      	adds	r1, r3, #1
 8002ad4:	61f9      	str	r1, [r7, #28]
 8002ad6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	701a      	strb	r2, [r3, #0]
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	09db      	lsrs	r3, r3, #7
 8002ae2:	61bb      	str	r3, [r7, #24]
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	2b7f      	cmp	r3, #127	; 0x7f
 8002ae8:	d8f0      	bhi.n	8002acc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	1c5a      	adds	r2, r3, #1
 8002aee:	61fa      	str	r2, [r7, #28]
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	701a      	strb	r2, [r3, #0]
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	2302      	movs	r3, #2
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	e00b      	b.n	8002b1c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	1c59      	adds	r1, r3, #1
 8002b0c:	6179      	str	r1, [r7, #20]
 8002b0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	701a      	strb	r2, [r3, #0]
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	09db      	lsrs	r3, r3, #7
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	2b7f      	cmp	r3, #127	; 0x7f
 8002b20:	d8f0      	bhi.n	8002b04 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	1c5a      	adds	r2, r3, #1
 8002b26:	617a      	str	r2, [r7, #20]
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	701a      	strb	r2, [r3, #0]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8002b32:	2218      	movs	r2, #24
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	68b8      	ldr	r0, [r7, #8]
 8002b38:	f7ff fcc0 	bl	80024bc <_SendPacket>
  RECORD_END();
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8002b42:	4b06      	ldr	r3, [pc, #24]	; (8002b5c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8002b4a:	4b04      	ldr	r3, [pc, #16]	; (8002b5c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	4798      	blx	r3
  }
}
 8002b50:	bf00      	nop
 8002b52:	3730      	adds	r7, #48	; 0x30
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	20015254 	.word	0x20015254
 8002b5c:	20015224 	.word	0x20015224

08002b60 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b092      	sub	sp, #72	; 0x48
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8002b68:	f3ef 8311 	mrs	r3, BASEPRI
 8002b6c:	f04f 0120 	mov.w	r1, #32
 8002b70:	f381 8811 	msr	BASEPRI, r1
 8002b74:	617b      	str	r3, [r7, #20]
 8002b76:	486b      	ldr	r0, [pc, #428]	; (8002d24 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8002b78:	f7ff fbc7 	bl	800230a <_PreparePacket>
 8002b7c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	647b      	str	r3, [r7, #68]	; 0x44
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	4b67      	ldr	r3, [pc, #412]	; (8002d28 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	089b      	lsrs	r3, r3, #2
 8002b92:	643b      	str	r3, [r7, #64]	; 0x40
 8002b94:	e00b      	b.n	8002bae <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8002b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b9c:	1c59      	adds	r1, r3, #1
 8002b9e:	6479      	str	r1, [r7, #68]	; 0x44
 8002ba0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	701a      	strb	r2, [r3, #0]
 8002ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002baa:	09db      	lsrs	r3, r3, #7
 8002bac:	643b      	str	r3, [r7, #64]	; 0x40
 8002bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bb0:	2b7f      	cmp	r3, #127	; 0x7f
 8002bb2:	d8f0      	bhi.n	8002b96 <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8002bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	647a      	str	r2, [r7, #68]	; 0x44
 8002bba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	701a      	strb	r2, [r3, #0]
 8002bc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bc2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bce:	e00b      	b.n	8002be8 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8002bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bd6:	1c59      	adds	r1, r3, #1
 8002bd8:	63f9      	str	r1, [r7, #60]	; 0x3c
 8002bda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	701a      	strb	r2, [r3, #0]
 8002be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be4:	09db      	lsrs	r3, r3, #7
 8002be6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bea:	2b7f      	cmp	r3, #127	; 0x7f
 8002bec:	d8f0      	bhi.n	8002bd0 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 8002bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bf0:	1c5a      	adds	r2, r3, #1
 8002bf2:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002bf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	701a      	strb	r2, [r3, #0]
 8002bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bfc:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2220      	movs	r2, #32
 8002c04:	4619      	mov	r1, r3
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f7ff fb32 	bl	8002270 <_EncodeStr>
 8002c0c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8002c0e:	2209      	movs	r2, #9
 8002c10:	68f9      	ldr	r1, [r7, #12]
 8002c12:	6938      	ldr	r0, [r7, #16]
 8002c14:	f7ff fc52 	bl	80024bc <_SendPacket>
  //
  pPayload = pPayloadStart;
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	637b      	str	r3, [r7, #52]	; 0x34
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	4b40      	ldr	r3, [pc, #256]	; (8002d28 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	089b      	lsrs	r3, r3, #2
 8002c2c:	633b      	str	r3, [r7, #48]	; 0x30
 8002c2e:	e00b      	b.n	8002c48 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8002c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c36:	1c59      	adds	r1, r3, #1
 8002c38:	6379      	str	r1, [r7, #52]	; 0x34
 8002c3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	701a      	strb	r2, [r3, #0]
 8002c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c44:	09db      	lsrs	r3, r3, #7
 8002c46:	633b      	str	r3, [r7, #48]	; 0x30
 8002c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4a:	2b7f      	cmp	r3, #127	; 0x7f
 8002c4c:	d8f0      	bhi.n	8002c30 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 8002c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c50:	1c5a      	adds	r2, r3, #1
 8002c52:	637a      	str	r2, [r7, #52]	; 0x34
 8002c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	701a      	strb	r2, [r3, #0]
 8002c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c5c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c68:	e00b      	b.n	8002c82 <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 8002c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c70:	1c59      	adds	r1, r3, #1
 8002c72:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002c74:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	701a      	strb	r2, [r3, #0]
 8002c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7e:	09db      	lsrs	r3, r3, #7
 8002c80:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c84:	2b7f      	cmp	r3, #127	; 0x7f
 8002c86:	d8f0      	bhi.n	8002c6a <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8002c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c90:	b2d2      	uxtb	r2, r2
 8002c92:	701a      	strb	r2, [r3, #0]
 8002c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c96:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	623b      	str	r3, [r7, #32]
 8002ca2:	e00b      	b.n	8002cbc <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	1c59      	adds	r1, r3, #1
 8002cac:	6279      	str	r1, [r7, #36]	; 0x24
 8002cae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	701a      	strb	r2, [r3, #0]
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	09db      	lsrs	r3, r3, #7
 8002cba:	623b      	str	r3, [r7, #32]
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	2b7f      	cmp	r3, #127	; 0x7f
 8002cc0:	d8f0      	bhi.n	8002ca4 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	1c5a      	adds	r2, r3, #1
 8002cc6:	627a      	str	r2, [r7, #36]	; 0x24
 8002cc8:	6a3a      	ldr	r2, [r7, #32]
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	701a      	strb	r2, [r3, #0]
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	61fb      	str	r3, [r7, #28]
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61bb      	str	r3, [r7, #24]
 8002cda:	e00b      	b.n	8002cf4 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	1c59      	adds	r1, r3, #1
 8002ce4:	61f9      	str	r1, [r7, #28]
 8002ce6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	701a      	strb	r2, [r3, #0]
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	09db      	lsrs	r3, r3, #7
 8002cf2:	61bb      	str	r3, [r7, #24]
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	2b7f      	cmp	r3, #127	; 0x7f
 8002cf8:	d8f0      	bhi.n	8002cdc <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	1c5a      	adds	r2, r3, #1
 8002cfe:	61fa      	str	r2, [r7, #28]
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	701a      	strb	r2, [r3, #0]
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8002d0a:	2215      	movs	r2, #21
 8002d0c:	68f9      	ldr	r1, [r7, #12]
 8002d0e:	6938      	ldr	r0, [r7, #16]
 8002d10:	f7ff fbd4 	bl	80024bc <_SendPacket>
  RECORD_END();
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	f383 8811 	msr	BASEPRI, r3
}
 8002d1a:	bf00      	nop
 8002d1c:	3748      	adds	r7, #72	; 0x48
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	20015254 	.word	0x20015254
 8002d28:	20015224 	.word	0x20015224

08002d2c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8002d30:	4b07      	ldr	r3, [pc, #28]	; (8002d50 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d008      	beq.n	8002d4a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8002d38:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8002d42:	4b03      	ldr	r3, [pc, #12]	; (8002d50 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	4798      	blx	r3
  }
}
 8002d4a:	bf00      	nop
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	20015224 	.word	0x20015224

08002d54 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002d5c:	f3ef 8311 	mrs	r3, BASEPRI
 8002d60:	f04f 0120 	mov.w	r1, #32
 8002d64:	f381 8811 	msr	BASEPRI, r1
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	480b      	ldr	r0, [pc, #44]	; (8002d98 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8002d6c:	f7ff facd 	bl	800230a <_PreparePacket>
 8002d70:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002d72:	2280      	movs	r2, #128	; 0x80
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	6938      	ldr	r0, [r7, #16]
 8002d78:	f7ff fa7a 	bl	8002270 <_EncodeStr>
 8002d7c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8002d7e:	220e      	movs	r2, #14
 8002d80:	68f9      	ldr	r1, [r7, #12]
 8002d82:	6938      	ldr	r0, [r7, #16]
 8002d84:	f7ff fb9a 	bl	80024bc <_SendPacket>
  RECORD_END();
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	f383 8811 	msr	BASEPRI, r3
}
 8002d8e:	bf00      	nop
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	20015254 	.word	0x20015254

08002d9c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8002d9c:	b590      	push	{r4, r7, lr}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8002da2:	4b14      	ldr	r3, [pc, #80]	; (8002df4 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d019      	beq.n	8002dde <SEGGER_SYSVIEW_RecordSystime+0x42>
 8002daa:	4b12      	ldr	r3, [pc, #72]	; (8002df4 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d014      	beq.n	8002dde <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8002db4:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4798      	blx	r3
 8002dbc:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8002dc0:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8002dc2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002dc6:	f04f 0300 	mov.w	r3, #0
 8002dca:	f04f 0400 	mov.w	r4, #0
 8002dce:	0013      	movs	r3, r2
 8002dd0:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	4601      	mov	r1, r0
 8002dd6:	200d      	movs	r0, #13
 8002dd8:	f7ff fcec 	bl	80027b4 <SEGGER_SYSVIEW_RecordU32x2>
 8002ddc:	e005      	b.n	8002dea <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8002dde:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4619      	mov	r1, r3
 8002de4:	200c      	movs	r0, #12
 8002de6:	f7ff fca9 	bl	800273c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd90      	pop	{r4, r7, pc}
 8002df2:	bf00      	nop
 8002df4:	20015224 	.word	0x20015224
 8002df8:	e0001004 	.word	0xe0001004

08002dfc <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002e02:	f3ef 8311 	mrs	r3, BASEPRI
 8002e06:	f04f 0120 	mov.w	r1, #32
 8002e0a:	f381 8811 	msr	BASEPRI, r1
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	4819      	ldr	r0, [pc, #100]	; (8002e78 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8002e12:	f7ff fa7a 	bl	800230a <_PreparePacket>
 8002e16:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8002e1c:	4b17      	ldr	r3, [pc, #92]	; (8002e7c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e24:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	617b      	str	r3, [r7, #20]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	613b      	str	r3, [r7, #16]
 8002e2e:	e00b      	b.n	8002e48 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	1c59      	adds	r1, r3, #1
 8002e38:	6179      	str	r1, [r7, #20]
 8002e3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002e3e:	b2d2      	uxtb	r2, r2
 8002e40:	701a      	strb	r2, [r3, #0]
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	09db      	lsrs	r3, r3, #7
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	2b7f      	cmp	r3, #127	; 0x7f
 8002e4c:	d8f0      	bhi.n	8002e30 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	1c5a      	adds	r2, r3, #1
 8002e52:	617a      	str	r2, [r7, #20]
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	b2d2      	uxtb	r2, r2
 8002e58:	701a      	strb	r2, [r3, #0]
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8002e5e:	2202      	movs	r2, #2
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	68b8      	ldr	r0, [r7, #8]
 8002e64:	f7ff fb2a 	bl	80024bc <_SendPacket>
  RECORD_END();
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f383 8811 	msr	BASEPRI, r3
}
 8002e6e:	bf00      	nop
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20015254 	.word	0x20015254
 8002e7c:	e000ed04 	.word	0xe000ed04

08002e80 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002e86:	f3ef 8311 	mrs	r3, BASEPRI
 8002e8a:	f04f 0120 	mov.w	r1, #32
 8002e8e:	f381 8811 	msr	BASEPRI, r1
 8002e92:	607b      	str	r3, [r7, #4]
 8002e94:	4807      	ldr	r0, [pc, #28]	; (8002eb4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8002e96:	f7ff fa38 	bl	800230a <_PreparePacket>
 8002e9a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8002e9c:	2203      	movs	r2, #3
 8002e9e:	6839      	ldr	r1, [r7, #0]
 8002ea0:	6838      	ldr	r0, [r7, #0]
 8002ea2:	f7ff fb0b 	bl	80024bc <_SendPacket>
  RECORD_END();
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f383 8811 	msr	BASEPRI, r3
}
 8002eac:	bf00      	nop
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	20015254 	.word	0x20015254

08002eb8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002ebe:	f3ef 8311 	mrs	r3, BASEPRI
 8002ec2:	f04f 0120 	mov.w	r1, #32
 8002ec6:	f381 8811 	msr	BASEPRI, r1
 8002eca:	607b      	str	r3, [r7, #4]
 8002ecc:	4807      	ldr	r0, [pc, #28]	; (8002eec <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8002ece:	f7ff fa1c 	bl	800230a <_PreparePacket>
 8002ed2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8002ed4:	2212      	movs	r2, #18
 8002ed6:	6839      	ldr	r1, [r7, #0]
 8002ed8:	6838      	ldr	r0, [r7, #0]
 8002eda:	f7ff faef 	bl	80024bc <_SendPacket>
  RECORD_END();
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f383 8811 	msr	BASEPRI, r3
}
 8002ee4:	bf00      	nop
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	20015254 	.word	0x20015254

08002ef0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002ef6:	f3ef 8311 	mrs	r3, BASEPRI
 8002efa:	f04f 0120 	mov.w	r1, #32
 8002efe:	f381 8811 	msr	BASEPRI, r1
 8002f02:	607b      	str	r3, [r7, #4]
 8002f04:	4807      	ldr	r0, [pc, #28]	; (8002f24 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8002f06:	f7ff fa00 	bl	800230a <_PreparePacket>
 8002f0a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8002f0c:	2211      	movs	r2, #17
 8002f0e:	6839      	ldr	r1, [r7, #0]
 8002f10:	6838      	ldr	r0, [r7, #0]
 8002f12:	f7ff fad3 	bl	80024bc <_SendPacket>
  RECORD_END();
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f383 8811 	msr	BASEPRI, r3
}
 8002f1c:	bf00      	nop
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	20015254 	.word	0x20015254

08002f28 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002f30:	f3ef 8311 	mrs	r3, BASEPRI
 8002f34:	f04f 0120 	mov.w	r1, #32
 8002f38:	f381 8811 	msr	BASEPRI, r1
 8002f3c:	617b      	str	r3, [r7, #20]
 8002f3e:	481a      	ldr	r0, [pc, #104]	; (8002fa8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8002f40:	f7ff f9e3 	bl	800230a <_PreparePacket>
 8002f44:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8002f4a:	4b18      	ldr	r3, [pc, #96]	; (8002fac <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	089b      	lsrs	r3, r3, #2
 8002f54:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	61fb      	str	r3, [r7, #28]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	61bb      	str	r3, [r7, #24]
 8002f5e:	e00b      	b.n	8002f78 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	1c59      	adds	r1, r3, #1
 8002f68:	61f9      	str	r1, [r7, #28]
 8002f6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	701a      	strb	r2, [r3, #0]
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	09db      	lsrs	r3, r3, #7
 8002f76:	61bb      	str	r3, [r7, #24]
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	2b7f      	cmp	r3, #127	; 0x7f
 8002f7c:	d8f0      	bhi.n	8002f60 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	1c5a      	adds	r2, r3, #1
 8002f82:	61fa      	str	r2, [r7, #28]
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	701a      	strb	r2, [r3, #0]
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8002f8e:	2208      	movs	r2, #8
 8002f90:	68f9      	ldr	r1, [r7, #12]
 8002f92:	6938      	ldr	r0, [r7, #16]
 8002f94:	f7ff fa92 	bl	80024bc <_SendPacket>
  RECORD_END();
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	f383 8811 	msr	BASEPRI, r3
}
 8002f9e:	bf00      	nop
 8002fa0:	3720      	adds	r7, #32
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	20015254 	.word	0x20015254
 8002fac:	20015224 	.word	0x20015224

08002fb0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b088      	sub	sp, #32
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002fb8:	f3ef 8311 	mrs	r3, BASEPRI
 8002fbc:	f04f 0120 	mov.w	r1, #32
 8002fc0:	f381 8811 	msr	BASEPRI, r1
 8002fc4:	617b      	str	r3, [r7, #20]
 8002fc6:	481a      	ldr	r0, [pc, #104]	; (8003030 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8002fc8:	f7ff f99f 	bl	800230a <_PreparePacket>
 8002fcc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8002fd2:	4b18      	ldr	r3, [pc, #96]	; (8003034 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	089b      	lsrs	r3, r3, #2
 8002fdc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	61fb      	str	r3, [r7, #28]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	61bb      	str	r3, [r7, #24]
 8002fe6:	e00b      	b.n	8003000 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	1c59      	adds	r1, r3, #1
 8002ff0:	61f9      	str	r1, [r7, #28]
 8002ff2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ff6:	b2d2      	uxtb	r2, r2
 8002ff8:	701a      	strb	r2, [r3, #0]
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	09db      	lsrs	r3, r3, #7
 8002ffe:	61bb      	str	r3, [r7, #24]
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	2b7f      	cmp	r3, #127	; 0x7f
 8003004:	d8f0      	bhi.n	8002fe8 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	1c5a      	adds	r2, r3, #1
 800300a:	61fa      	str	r2, [r7, #28]
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	701a      	strb	r2, [r3, #0]
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8003016:	2204      	movs	r2, #4
 8003018:	68f9      	ldr	r1, [r7, #12]
 800301a:	6938      	ldr	r0, [r7, #16]
 800301c:	f7ff fa4e 	bl	80024bc <_SendPacket>
  RECORD_END();
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f383 8811 	msr	BASEPRI, r3
}
 8003026:	bf00      	nop
 8003028:	3720      	adds	r7, #32
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	20015254 	.word	0x20015254
 8003034:	20015224 	.word	0x20015224

08003038 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8003038:	b580      	push	{r7, lr}
 800303a:	b088      	sub	sp, #32
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003040:	f3ef 8311 	mrs	r3, BASEPRI
 8003044:	f04f 0120 	mov.w	r1, #32
 8003048:	f381 8811 	msr	BASEPRI, r1
 800304c:	617b      	str	r3, [r7, #20]
 800304e:	481a      	ldr	r0, [pc, #104]	; (80030b8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8003050:	f7ff f95b 	bl	800230a <_PreparePacket>
 8003054:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800305a:	4b18      	ldr	r3, [pc, #96]	; (80030bc <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	089b      	lsrs	r3, r3, #2
 8003064:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	61fb      	str	r3, [r7, #28]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	61bb      	str	r3, [r7, #24]
 800306e:	e00b      	b.n	8003088 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	b2da      	uxtb	r2, r3
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	1c59      	adds	r1, r3, #1
 8003078:	61f9      	str	r1, [r7, #28]
 800307a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	701a      	strb	r2, [r3, #0]
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	09db      	lsrs	r3, r3, #7
 8003086:	61bb      	str	r3, [r7, #24]
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	2b7f      	cmp	r3, #127	; 0x7f
 800308c:	d8f0      	bhi.n	8003070 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	61fa      	str	r2, [r7, #28]
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	701a      	strb	r2, [r3, #0]
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800309e:	2206      	movs	r2, #6
 80030a0:	68f9      	ldr	r1, [r7, #12]
 80030a2:	6938      	ldr	r0, [r7, #16]
 80030a4:	f7ff fa0a 	bl	80024bc <_SendPacket>
  RECORD_END();
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	f383 8811 	msr	BASEPRI, r3
}
 80030ae:	bf00      	nop
 80030b0:	3720      	adds	r7, #32
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20015254 	.word	0x20015254
 80030bc:	20015224 	.word	0x20015224

080030c0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b08c      	sub	sp, #48	; 0x30
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80030ca:	4b3b      	ldr	r3, [pc, #236]	; (80031b8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d06d      	beq.n	80031ae <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80030d2:	4b39      	ldr	r3, [pc, #228]	; (80031b8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80030d8:	2300      	movs	r3, #0
 80030da:	62bb      	str	r3, [r7, #40]	; 0x28
 80030dc:	e008      	b.n	80030f0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80030de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80030e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d007      	beq.n	80030fa <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80030ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ec:	3301      	adds	r3, #1
 80030ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80030f0:	79fb      	ldrb	r3, [r7, #7]
 80030f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d3f2      	bcc.n	80030de <SEGGER_SYSVIEW_SendModule+0x1e>
 80030f8:	e000      	b.n	80030fc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80030fa:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80030fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d055      	beq.n	80031ae <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003102:	f3ef 8311 	mrs	r3, BASEPRI
 8003106:	f04f 0120 	mov.w	r1, #32
 800310a:	f381 8811 	msr	BASEPRI, r1
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	482a      	ldr	r0, [pc, #168]	; (80031bc <SEGGER_SYSVIEW_SendModule+0xfc>)
 8003112:	f7ff f8fa 	bl	800230a <_PreparePacket>
 8003116:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	627b      	str	r3, [r7, #36]	; 0x24
 8003120:	79fb      	ldrb	r3, [r7, #7]
 8003122:	623b      	str	r3, [r7, #32]
 8003124:	e00b      	b.n	800313e <SEGGER_SYSVIEW_SendModule+0x7e>
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	b2da      	uxtb	r2, r3
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	1c59      	adds	r1, r3, #1
 800312e:	6279      	str	r1, [r7, #36]	; 0x24
 8003130:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	701a      	strb	r2, [r3, #0]
 8003138:	6a3b      	ldr	r3, [r7, #32]
 800313a:	09db      	lsrs	r3, r3, #7
 800313c:	623b      	str	r3, [r7, #32]
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	2b7f      	cmp	r3, #127	; 0x7f
 8003142:	d8f0      	bhi.n	8003126 <SEGGER_SYSVIEW_SendModule+0x66>
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	1c5a      	adds	r2, r3, #1
 8003148:	627a      	str	r2, [r7, #36]	; 0x24
 800314a:	6a3a      	ldr	r2, [r7, #32]
 800314c:	b2d2      	uxtb	r2, r2
 800314e:	701a      	strb	r2, [r3, #0]
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	61fb      	str	r3, [r7, #28]
 8003158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	61bb      	str	r3, [r7, #24]
 800315e:	e00b      	b.n	8003178 <SEGGER_SYSVIEW_SendModule+0xb8>
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	b2da      	uxtb	r2, r3
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	1c59      	adds	r1, r3, #1
 8003168:	61f9      	str	r1, [r7, #28]
 800316a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	701a      	strb	r2, [r3, #0]
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	09db      	lsrs	r3, r3, #7
 8003176:	61bb      	str	r3, [r7, #24]
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	2b7f      	cmp	r3, #127	; 0x7f
 800317c:	d8f0      	bhi.n	8003160 <SEGGER_SYSVIEW_SendModule+0xa0>
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	1c5a      	adds	r2, r3, #1
 8003182:	61fa      	str	r2, [r7, #28]
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	701a      	strb	r2, [r3, #0]
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800318e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2280      	movs	r2, #128	; 0x80
 8003194:	4619      	mov	r1, r3
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f7ff f86a 	bl	8002270 <_EncodeStr>
 800319c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800319e:	2216      	movs	r2, #22
 80031a0:	68f9      	ldr	r1, [r7, #12]
 80031a2:	6938      	ldr	r0, [r7, #16]
 80031a4:	f7ff f98a 	bl	80024bc <_SendPacket>
      RECORD_END();
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80031ae:	bf00      	nop
 80031b0:	3730      	adds	r7, #48	; 0x30
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	2001524c 	.word	0x2001524c
 80031bc:	20015254 	.word	0x20015254

080031c0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80031c6:	4b0c      	ldr	r3, [pc, #48]	; (80031f8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00f      	beq.n	80031ee <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80031ce:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d002      	beq.n	80031e2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1f2      	bne.n	80031d4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80031ee:	bf00      	nop
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	2001524c 	.word	0x2001524c

080031fc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8003202:	f3ef 8311 	mrs	r3, BASEPRI
 8003206:	f04f 0120 	mov.w	r1, #32
 800320a:	f381 8811 	msr	BASEPRI, r1
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	4817      	ldr	r0, [pc, #92]	; (8003270 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8003212:	f7ff f87a 	bl	800230a <_PreparePacket>
 8003216:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	617b      	str	r3, [r7, #20]
 8003220:	4b14      	ldr	r3, [pc, #80]	; (8003274 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	613b      	str	r3, [r7, #16]
 8003226:	e00b      	b.n	8003240 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	b2da      	uxtb	r2, r3
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	1c59      	adds	r1, r3, #1
 8003230:	6179      	str	r1, [r7, #20]
 8003232:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	701a      	strb	r2, [r3, #0]
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	09db      	lsrs	r3, r3, #7
 800323e:	613b      	str	r3, [r7, #16]
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	2b7f      	cmp	r3, #127	; 0x7f
 8003244:	d8f0      	bhi.n	8003228 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	1c5a      	adds	r2, r3, #1
 800324a:	617a      	str	r2, [r7, #20]
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	b2d2      	uxtb	r2, r2
 8003250:	701a      	strb	r2, [r3, #0]
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8003256:	221b      	movs	r2, #27
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	68b8      	ldr	r0, [r7, #8]
 800325c:	f7ff f92e 	bl	80024bc <_SendPacket>
  RECORD_END();
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f383 8811 	msr	BASEPRI, r3
}
 8003266:	bf00      	nop
 8003268:	3718      	adds	r7, #24
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	20015254 	.word	0x20015254
 8003274:	20015250 	.word	0x20015250

08003278 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8003278:	b580      	push	{r7, lr}
 800327a:	b08a      	sub	sp, #40	; 0x28
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003280:	f3ef 8311 	mrs	r3, BASEPRI
 8003284:	f04f 0120 	mov.w	r1, #32
 8003288:	f381 8811 	msr	BASEPRI, r1
 800328c:	617b      	str	r3, [r7, #20]
 800328e:	4827      	ldr	r0, [pc, #156]	; (800332c <SEGGER_SYSVIEW_Warn+0xb4>)
 8003290:	f7ff f83b 	bl	800230a <_PreparePacket>
 8003294:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003296:	2280      	movs	r2, #128	; 0x80
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	6938      	ldr	r0, [r7, #16]
 800329c:	f7fe ffe8 	bl	8002270 <_EncodeStr>
 80032a0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	627b      	str	r3, [r7, #36]	; 0x24
 80032a6:	2301      	movs	r3, #1
 80032a8:	623b      	str	r3, [r7, #32]
 80032aa:	e00b      	b.n	80032c4 <SEGGER_SYSVIEW_Warn+0x4c>
 80032ac:	6a3b      	ldr	r3, [r7, #32]
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	1c59      	adds	r1, r3, #1
 80032b4:	6279      	str	r1, [r7, #36]	; 0x24
 80032b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	701a      	strb	r2, [r3, #0]
 80032be:	6a3b      	ldr	r3, [r7, #32]
 80032c0:	09db      	lsrs	r3, r3, #7
 80032c2:	623b      	str	r3, [r7, #32]
 80032c4:	6a3b      	ldr	r3, [r7, #32]
 80032c6:	2b7f      	cmp	r3, #127	; 0x7f
 80032c8:	d8f0      	bhi.n	80032ac <SEGGER_SYSVIEW_Warn+0x34>
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	627a      	str	r2, [r7, #36]	; 0x24
 80032d0:	6a3a      	ldr	r2, [r7, #32]
 80032d2:	b2d2      	uxtb	r2, r2
 80032d4:	701a      	strb	r2, [r3, #0]
 80032d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	61fb      	str	r3, [r7, #28]
 80032de:	2300      	movs	r3, #0
 80032e0:	61bb      	str	r3, [r7, #24]
 80032e2:	e00b      	b.n	80032fc <SEGGER_SYSVIEW_Warn+0x84>
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	1c59      	adds	r1, r3, #1
 80032ec:	61f9      	str	r1, [r7, #28]
 80032ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	701a      	strb	r2, [r3, #0]
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	09db      	lsrs	r3, r3, #7
 80032fa:	61bb      	str	r3, [r7, #24]
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	2b7f      	cmp	r3, #127	; 0x7f
 8003300:	d8f0      	bhi.n	80032e4 <SEGGER_SYSVIEW_Warn+0x6c>
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	1c5a      	adds	r2, r3, #1
 8003306:	61fa      	str	r2, [r7, #28]
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	701a      	strb	r2, [r3, #0]
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003312:	221a      	movs	r2, #26
 8003314:	68f9      	ldr	r1, [r7, #12]
 8003316:	6938      	ldr	r0, [r7, #16]
 8003318:	f7ff f8d0 	bl	80024bc <_SendPacket>
  RECORD_END();
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f383 8811 	msr	BASEPRI, r3
}
 8003322:	bf00      	nop
 8003324:	3728      	adds	r7, #40	; 0x28
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	20015254 	.word	0x20015254

08003330 <main>:
char usr_msg[250];

volatile uint8_t button_status = NOT_PRESSED;

int main(void)
{
 8003330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003332:	b083      	sub	sp, #12
 8003334:	af02      	add	r7, sp, #8
  DWT->CTRL |= (1 << 0);// Enable CYCCNT in DWT_CTRL for SEGGER
 8003336:	4b22      	ldr	r3, [pc, #136]	; (80033c0 <main+0x90>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a21      	ldr	r2, [pc, #132]	; (80033c0 <main+0x90>)
 800333c:	f043 0301 	orr.w	r3, r3, #1
 8003340:	6013      	str	r3, [r2, #0]
  //printf("\r\nThis is hello world \n\r");
  // To use the bare HSI clock, for this exercise, the PLL will be turned off
  RCC_DeInit();
 8003342:	f7fd f8a7 	bl	8000494 <RCC_DeInit>
  // Then update the SystemCoreClock variable
  SystemCoreClockUpdate();
 8003346:	f000 f96b 	bl	8003620 <SystemCoreClockUpdate>
  //Set the hardware peripherals
  prvSetupHardware();
 800334a:	f000 f8fb 	bl	8003544 <prvSetupHardware>

  sprintf(usr_msg,"\r\nThis is a test for the board button and leds \r\n");
 800334e:	4b1d      	ldr	r3, [pc, #116]	; (80033c4 <main+0x94>)
 8003350:	4a1d      	ldr	r2, [pc, #116]	; (80033c8 <main+0x98>)
 8003352:	4614      	mov	r4, r2
 8003354:	469c      	mov	ip, r3
 8003356:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800335a:	4665      	mov	r5, ip
 800335c:	4626      	mov	r6, r4
 800335e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003360:	6028      	str	r0, [r5, #0]
 8003362:	6069      	str	r1, [r5, #4]
 8003364:	60aa      	str	r2, [r5, #8]
 8003366:	60eb      	str	r3, [r5, #12]
 8003368:	3410      	adds	r4, #16
 800336a:	f10c 0c10 	add.w	ip, ip, #16
 800336e:	4574      	cmp	r4, lr
 8003370:	d1f3      	bne.n	800335a <main+0x2a>
 8003372:	4662      	mov	r2, ip
 8003374:	4623      	mov	r3, r4
 8003376:	881b      	ldrh	r3, [r3, #0]
 8003378:	8013      	strh	r3, [r2, #0]
  printmsg(usr_msg);;
 800337a:	4812      	ldr	r0, [pc, #72]	; (80033c4 <main+0x94>)
 800337c:	f000 f8f2 	bl	8003564 <printmsg>

  // Start Recording
  SEGGER_SYSVIEW_Conf();
 8003380:	f7fe fc1a 	bl	8001bb8 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8003384:	f7ff fa70 	bl	8002868 <SEGGER_SYSVIEW_Start>

  // Create the tasks
  xTaskCreate(LED_task_handler,
 8003388:	2300      	movs	r3, #0
 800338a:	9301      	str	r3, [sp, #4]
 800338c:	2301      	movs	r3, #1
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	2300      	movs	r3, #0
 8003392:	2282      	movs	r2, #130	; 0x82
 8003394:	490d      	ldr	r1, [pc, #52]	; (80033cc <main+0x9c>)
 8003396:	480e      	ldr	r0, [pc, #56]	; (80033d0 <main+0xa0>)
 8003398:	f7fd fb8f 	bl	8000aba <xTaskCreate>
							NULL,
							1,
							NULL);
  // Create the tasks

  xTaskCreate(button_task_handler,
 800339c:	2300      	movs	r3, #0
 800339e:	9301      	str	r3, [sp, #4]
 80033a0:	2301      	movs	r3, #1
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	2300      	movs	r3, #0
 80033a6:	2282      	movs	r2, #130	; 0x82
 80033a8:	490a      	ldr	r1, [pc, #40]	; (80033d4 <main+0xa4>)
 80033aa:	480b      	ldr	r0, [pc, #44]	; (80033d8 <main+0xa8>)
 80033ac:	f7fd fb85 	bl	8000aba <xTaskCreate>
							( void * ) NULL,
							1,
							NULL);

  //Start the sheduler
  vTaskStartScheduler();
 80033b0:	f7fd fce4 	bl	8000d7c <vTaskStartScheduler>
 80033b4:	2300      	movs	r3, #0
	//for(;;);
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3704      	adds	r7, #4
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033be:	bf00      	nop
 80033c0:	e0001000 	.word	0xe0001000
 80033c4:	200153e0 	.word	0x200153e0
 80033c8:	08003a20 	.word	0x08003a20
 80033cc:	08003a54 	.word	0x08003a54
 80033d0:	080033dd 	.word	0x080033dd
 80033d4:	08003a60 	.word	0x08003a60
 80033d8:	08003435 	.word	0x08003435

080033dc <LED_task_handler>:

void LED_task_handler(void *params)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  while(1){
	  GPIO_WriteBit(GPIOB, GPIO_Pin_7, button_status);
 80033e4:	4b11      	ldr	r3, [pc, #68]	; (800342c <LED_task_handler+0x50>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	461a      	mov	r2, r3
 80033ec:	2180      	movs	r1, #128	; 0x80
 80033ee:	4810      	ldr	r0, [pc, #64]	; (8003430 <LED_task_handler+0x54>)
 80033f0:	f7fc ffef 	bl	80003d2 <GPIO_WriteBit>
	  GPIO_WriteBit(GPIOB, GPIO_Pin_0, !button_status);
 80033f4:	4b0d      	ldr	r3, [pc, #52]	; (800342c <LED_task_handler+0x50>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	bf0c      	ite	eq
 80033fe:	2301      	moveq	r3, #1
 8003400:	2300      	movne	r3, #0
 8003402:	b2db      	uxtb	r3, r3
 8003404:	461a      	mov	r2, r3
 8003406:	2101      	movs	r1, #1
 8003408:	4809      	ldr	r0, [pc, #36]	; (8003430 <LED_task_handler+0x54>)
 800340a:	f7fc ffe2 	bl	80003d2 <GPIO_WriteBit>
	  GPIO_WriteBit(GPIOB, GPIO_Pin_14, !button_status);
 800340e:	4b07      	ldr	r3, [pc, #28]	; (800342c <LED_task_handler+0x50>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	bf0c      	ite	eq
 8003418:	2301      	moveq	r3, #1
 800341a:	2300      	movne	r3, #0
 800341c:	b2db      	uxtb	r3, r3
 800341e:	461a      	mov	r2, r3
 8003420:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003424:	4802      	ldr	r0, [pc, #8]	; (8003430 <LED_task_handler+0x54>)
 8003426:	f7fc ffd4 	bl	80003d2 <GPIO_WriteBit>
	  GPIO_WriteBit(GPIOB, GPIO_Pin_7, button_status);
 800342a:	e7db      	b.n	80033e4 <LED_task_handler+0x8>
 800342c:	20015337 	.word	0x20015337
 8003430:	40020400 	.word	0x40020400

08003434 <button_task_handler>:
  }

}

void button_task_handler(void *params)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  while(1){
	  button_status = GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13);
 800343c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003440:	4803      	ldr	r0, [pc, #12]	; (8003450 <button_task_handler+0x1c>)
 8003442:	f7fc ffac 	bl	800039e <GPIO_ReadInputDataBit>
 8003446:	4603      	mov	r3, r0
 8003448:	461a      	mov	r2, r3
 800344a:	4b02      	ldr	r3, [pc, #8]	; (8003454 <button_task_handler+0x20>)
 800344c:	701a      	strb	r2, [r3, #0]
 800344e:	e7f5      	b.n	800343c <button_task_handler+0x8>
 8003450:	40020800 	.word	0x40020800
 8003454:	20015337 	.word	0x20015337

08003458 <prvSetupUART>:
  }

}

static void prvSetupUART(void){
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef gpio_uart_pins;

	// Enable the clock for the USART3 and the GPIOD
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 800345e:	2101      	movs	r1, #1
 8003460:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003464:	f7fd f966 	bl	8000734 <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8003468:	2101      	movs	r1, #1
 800346a:	2008      	movs	r0, #8
 800346c:	f7fd f942 	bl	80006f4 <RCC_AHB1PeriphClockCmd>
	//PD8 is TX, PD9 is RX
	gpio_uart_pins.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
 8003470:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003474:	613b      	str	r3, [r7, #16]
	gpio_uart_pins.GPIO_Mode = GPIO_Mode_AF;
 8003476:	2302      	movs	r3, #2
 8003478:	753b      	strb	r3, [r7, #20]
	gpio_uart_pins.GPIO_PuPd = GPIO_PuPd_UP;
 800347a:	2301      	movs	r3, #1
 800347c:	75fb      	strb	r3, [r7, #23]
	GPIO_Init(GPIOD, &gpio_uart_pins);
 800347e:	f107 0310 	add.w	r3, r7, #16
 8003482:	4619      	mov	r1, r3
 8003484:	4813      	ldr	r0, [pc, #76]	; (80034d4 <prvSetupUART+0x7c>)
 8003486:	f7fc fefc 	bl	8000282 <GPIO_Init>

	// AF Mode settings
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_USART3);// PD8
 800348a:	2207      	movs	r2, #7
 800348c:	2108      	movs	r1, #8
 800348e:	4811      	ldr	r0, [pc, #68]	; (80034d4 <prvSetupUART+0x7c>)
 8003490:	f7fc ffb7 	bl	8000402 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_USART3);// PD9
 8003494:	2207      	movs	r2, #7
 8003496:	2109      	movs	r1, #9
 8003498:	480e      	ldr	r0, [pc, #56]	; (80034d4 <prvSetupUART+0x7c>)
 800349a:	f7fc ffb2 	bl	8000402 <GPIO_PinAFConfig>

	// Initialize the USART3
	USART_InitTypeDef uart3_init;
	uart3_init.USART_BaudRate = 115200;
 800349e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80034a2:	603b      	str	r3, [r7, #0]
	uart3_init.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80034a4:	2300      	movs	r3, #0
 80034a6:	81bb      	strh	r3, [r7, #12]
	uart3_init.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80034a8:	230c      	movs	r3, #12
 80034aa:	817b      	strh	r3, [r7, #10]
	uart3_init.USART_Parity = USART_Parity_No;
 80034ac:	2300      	movs	r3, #0
 80034ae:	813b      	strh	r3, [r7, #8]
	uart3_init.USART_StopBits = USART_StopBits_1;
 80034b0:	2300      	movs	r3, #0
 80034b2:	80fb      	strh	r3, [r7, #6]
	uart3_init.USART_WordLength = USART_WordLength_8b;
 80034b4:	2300      	movs	r3, #0
 80034b6:	80bb      	strh	r3, [r7, #4]

	USART_Init(USART3, &uart3_init);
 80034b8:	463b      	mov	r3, r7
 80034ba:	4619      	mov	r1, r3
 80034bc:	4806      	ldr	r0, [pc, #24]	; (80034d8 <prvSetupUART+0x80>)
 80034be:	f7fd f979 	bl	80007b4 <USART_Init>

	USART_Cmd(USART3, ENABLE);
 80034c2:	2101      	movs	r1, #1
 80034c4:	4804      	ldr	r0, [pc, #16]	; (80034d8 <prvSetupUART+0x80>)
 80034c6:	f7fd fa2f 	bl	8000928 <USART_Cmd>
}
 80034ca:	bf00      	nop
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40020c00 	.word	0x40020c00
 80034d8:	40004800 	.word	0x40004800

080034dc <prvSetupButton>:

static void prvSetupButton(void){
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef gpio_button_pins;
	// button pin is PC13
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80034e2:	2101      	movs	r1, #1
 80034e4:	2004      	movs	r0, #4
 80034e6:	f7fd f905 	bl	80006f4 <RCC_AHB1PeriphClockCmd>
	gpio_button_pins.GPIO_Pin = GPIO_Pin_13;
 80034ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034ee:	603b      	str	r3, [r7, #0]
	gpio_button_pins.GPIO_Mode = GPIO_Mode_IN;
 80034f0:	2300      	movs	r3, #0
 80034f2:	713b      	strb	r3, [r7, #4]
	gpio_button_pins.GPIO_PuPd = GPIO_PuPd_DOWN;
 80034f4:	2302      	movs	r3, #2
 80034f6:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOC, &gpio_button_pins);
 80034f8:	463b      	mov	r3, r7
 80034fa:	4619      	mov	r1, r3
 80034fc:	4803      	ldr	r0, [pc, #12]	; (800350c <prvSetupButton+0x30>)
 80034fe:	f7fc fec0 	bl	8000282 <GPIO_Init>
}
 8003502:	bf00      	nop
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40020800 	.word	0x40020800

08003510 <prvSetupBoardLED>:

static void prvSetupBoardLED(void){
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef gpio_LED_pins;
	// leds pins are PB00, PB07 & PB14
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8003516:	2101      	movs	r1, #1
 8003518:	2002      	movs	r0, #2
 800351a:	f7fd f8eb 	bl	80006f4 <RCC_AHB1PeriphClockCmd>
	gpio_LED_pins.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_7 | GPIO_Pin_14;
 800351e:	f244 0381 	movw	r3, #16513	; 0x4081
 8003522:	603b      	str	r3, [r7, #0]
	gpio_LED_pins.GPIO_Mode = GPIO_Mode_OUT;
 8003524:	2301      	movs	r3, #1
 8003526:	713b      	strb	r3, [r7, #4]
	gpio_LED_pins.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8003528:	2300      	movs	r3, #0
 800352a:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOB, &gpio_LED_pins);
 800352c:	463b      	mov	r3, r7
 800352e:	4619      	mov	r1, r3
 8003530:	4803      	ldr	r0, [pc, #12]	; (8003540 <prvSetupBoardLED+0x30>)
 8003532:	f7fc fea6 	bl	8000282 <GPIO_Init>
}
 8003536:	bf00      	nop
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40020400 	.word	0x40020400

08003544 <prvSetupHardware>:

static void prvSetupHardware(void){
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8003548:	2101      	movs	r1, #1
 800354a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800354e:	f7fd f911 	bl	8000774 <RCC_APB2PeriphClockCmd>
	prvSetupUART();
 8003552:	f7ff ff81 	bl	8003458 <prvSetupUART>
	prvSetupButton();
 8003556:	f7ff ffc1 	bl	80034dc <prvSetupButton>
	prvSetupBoardLED();
 800355a:	f7ff ffd9 	bl	8003510 <prvSetupBoardLED>
}
 800355e:	bf00      	nop
 8003560:	bd80      	pop	{r7, pc}
	...

08003564 <printmsg>:


void printmsg(char *msg){
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < strlen(msg); ++i) {
 800356c:	2300      	movs	r3, #0
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	e013      	b.n	800359a <printmsg+0x36>
		while( USART_GetFlagStatus( USART3, USART_FLAG_TXE ) != SET);
 8003572:	bf00      	nop
 8003574:	2180      	movs	r1, #128	; 0x80
 8003576:	480e      	ldr	r0, [pc, #56]	; (80035b0 <printmsg+0x4c>)
 8003578:	f7fd fa08 	bl	800098c <USART_GetFlagStatus>
 800357c:	4603      	mov	r3, r0
 800357e:	2b01      	cmp	r3, #1
 8003580:	d1f8      	bne.n	8003574 <printmsg+0x10>
		USART_SendData(USART3, msg[i]);
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4413      	add	r3, r2
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	b29b      	uxth	r3, r3
 800358c:	4619      	mov	r1, r3
 800358e:	4808      	ldr	r0, [pc, #32]	; (80035b0 <printmsg+0x4c>)
 8003590:	f7fd f9ea 	bl	8000968 <USART_SendData>
	for (uint32_t i = 0; i < strlen(msg); ++i) {
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	3301      	adds	r3, #1
 8003598:	60fb      	str	r3, [r7, #12]
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7fc fe40 	bl	8000220 <strlen>
 80035a0:	4602      	mov	r2, r0
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d3e4      	bcc.n	8003572 <printmsg+0xe>
	}
}
 80035a8:	bf00      	nop
 80035aa:	3710      	adds	r7, #16
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	40004800 	.word	0x40004800

080035b4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035b8:	4b16      	ldr	r3, [pc, #88]	; (8003614 <SystemInit+0x60>)
 80035ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035be:	4a15      	ldr	r2, [pc, #84]	; (8003614 <SystemInit+0x60>)
 80035c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80035c8:	4b13      	ldr	r3, [pc, #76]	; (8003618 <SystemInit+0x64>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a12      	ldr	r2, [pc, #72]	; (8003618 <SystemInit+0x64>)
 80035ce:	f043 0301 	orr.w	r3, r3, #1
 80035d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80035d4:	4b10      	ldr	r3, [pc, #64]	; (8003618 <SystemInit+0x64>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80035da:	4b0f      	ldr	r3, [pc, #60]	; (8003618 <SystemInit+0x64>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a0e      	ldr	r2, [pc, #56]	; (8003618 <SystemInit+0x64>)
 80035e0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80035e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035e8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80035ea:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <SystemInit+0x64>)
 80035ec:	4a0b      	ldr	r2, [pc, #44]	; (800361c <SystemInit+0x68>)
 80035ee:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80035f0:	4b09      	ldr	r3, [pc, #36]	; (8003618 <SystemInit+0x64>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a08      	ldr	r2, [pc, #32]	; (8003618 <SystemInit+0x64>)
 80035f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80035fc:	4b06      	ldr	r3, [pc, #24]	; (8003618 <SystemInit+0x64>)
 80035fe:	2200      	movs	r2, #0
 8003600:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8003602:	f000 f8db 	bl	80037bc <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003606:	4b03      	ldr	r3, [pc, #12]	; (8003614 <SystemInit+0x60>)
 8003608:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800360c:	609a      	str	r2, [r3, #8]
#endif
}
 800360e:	bf00      	nop
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	e000ed00 	.word	0xe000ed00
 8003618:	40023800 	.word	0x40023800
 800361c:	24003010 	.word	0x24003010

08003620 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8003620:	b480      	push	{r7}
 8003622:	b087      	sub	sp, #28
 8003624:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8003626:	2300      	movs	r3, #0
 8003628:	613b      	str	r3, [r7, #16]
 800362a:	2300      	movs	r3, #0
 800362c:	617b      	str	r3, [r7, #20]
 800362e:	2302      	movs	r3, #2
 8003630:	60fb      	str	r3, [r7, #12]
 8003632:	2300      	movs	r3, #0
 8003634:	60bb      	str	r3, [r7, #8]
 8003636:	2302      	movs	r3, #2
 8003638:	607b      	str	r3, [r7, #4]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
 800363a:	2302      	movs	r3, #2
 800363c:	603b      	str	r3, [r7, #0]
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800363e:	4b5a      	ldr	r3, [pc, #360]	; (80037a8 <SystemCoreClockUpdate+0x188>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 030c 	and.w	r3, r3, #12
 8003646:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	2b0c      	cmp	r3, #12
 800364c:	f200 8092 	bhi.w	8003774 <SystemCoreClockUpdate+0x154>
 8003650:	a201      	add	r2, pc, #4	; (adr r2, 8003658 <SystemCoreClockUpdate+0x38>)
 8003652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003656:	bf00      	nop
 8003658:	0800368d 	.word	0x0800368d
 800365c:	08003775 	.word	0x08003775
 8003660:	08003775 	.word	0x08003775
 8003664:	08003775 	.word	0x08003775
 8003668:	08003695 	.word	0x08003695
 800366c:	08003775 	.word	0x08003775
 8003670:	08003775 	.word	0x08003775
 8003674:	08003775 	.word	0x08003775
 8003678:	0800369d 	.word	0x0800369d
 800367c:	08003775 	.word	0x08003775
 8003680:	08003775 	.word	0x08003775
 8003684:	08003775 	.word	0x08003775
 8003688:	08003709 	.word	0x08003709
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800368c:	4b47      	ldr	r3, [pc, #284]	; (80037ac <SystemCoreClockUpdate+0x18c>)
 800368e:	4a48      	ldr	r2, [pc, #288]	; (80037b0 <SystemCoreClockUpdate+0x190>)
 8003690:	601a      	str	r2, [r3, #0]
      break;
 8003692:	e073      	b.n	800377c <SystemCoreClockUpdate+0x15c>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8003694:	4b45      	ldr	r3, [pc, #276]	; (80037ac <SystemCoreClockUpdate+0x18c>)
 8003696:	4a47      	ldr	r2, [pc, #284]	; (80037b4 <SystemCoreClockUpdate+0x194>)
 8003698:	601a      	str	r2, [r3, #0]
      break;
 800369a:	e06f      	b.n	800377c <SystemCoreClockUpdate+0x15c>
    case 0x08:  /* PLL P used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800369c:	4b42      	ldr	r3, [pc, #264]	; (80037a8 <SystemCoreClockUpdate+0x188>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	0d9b      	lsrs	r3, r3, #22
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036a8:	4b3f      	ldr	r3, [pc, #252]	; (80037a8 <SystemCoreClockUpdate+0x188>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036b0:	607b      	str	r3, [r7, #4]
      
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
      if (pllsource != 0)
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00c      	beq.n	80036d2 <SystemCoreClockUpdate+0xb2>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80036b8:	4a3e      	ldr	r2, [pc, #248]	; (80037b4 <SystemCoreClockUpdate+0x194>)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c0:	4a39      	ldr	r2, [pc, #228]	; (80037a8 <SystemCoreClockUpdate+0x188>)
 80036c2:	6852      	ldr	r2, [r2, #4]
 80036c4:	0992      	lsrs	r2, r2, #6
 80036c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036ca:	fb02 f303 	mul.w	r3, r2, r3
 80036ce:	617b      	str	r3, [r7, #20]
 80036d0:	e00b      	b.n	80036ea <SystemCoreClockUpdate+0xca>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80036d2:	4a37      	ldr	r2, [pc, #220]	; (80037b0 <SystemCoreClockUpdate+0x190>)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036da:	4a33      	ldr	r2, [pc, #204]	; (80037a8 <SystemCoreClockUpdate+0x188>)
 80036dc:	6852      	ldr	r2, [r2, #4]
 80036de:	0992      	lsrs	r2, r2, #6
 80036e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036e4:	fb02 f303 	mul.w	r3, r2, r3
 80036e8:	617b      	str	r3, [r7, #20]
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }  
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F412xG || STM32F413_423xx ||  STM32F446xx || STM32F469_479xx */  
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80036ea:	4b2f      	ldr	r3, [pc, #188]	; (80037a8 <SystemCoreClockUpdate+0x188>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	0c1b      	lsrs	r3, r3, #16
 80036f0:	f003 0303 	and.w	r3, r3, #3
 80036f4:	3301      	adds	r3, #1
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;      
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003702:	4a2a      	ldr	r2, [pc, #168]	; (80037ac <SystemCoreClockUpdate+0x18c>)
 8003704:	6013      	str	r3, [r2, #0]
      break;
 8003706:	e039      	b.n	800377c <SystemCoreClockUpdate+0x15c>
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)      
      case 0x0C:  /* PLL R used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_R
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8003708:	4b27      	ldr	r3, [pc, #156]	; (80037a8 <SystemCoreClockUpdate+0x188>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	0d9b      	lsrs	r3, r3, #22
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003714:	4b24      	ldr	r3, [pc, #144]	; (80037a8 <SystemCoreClockUpdate+0x188>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800371c:	607b      	str	r3, [r7, #4]
      if (pllsource != 0)
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00c      	beq.n	800373e <SystemCoreClockUpdate+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003724:	4a23      	ldr	r2, [pc, #140]	; (80037b4 <SystemCoreClockUpdate+0x194>)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	fbb2 f3f3 	udiv	r3, r2, r3
 800372c:	4a1e      	ldr	r2, [pc, #120]	; (80037a8 <SystemCoreClockUpdate+0x188>)
 800372e:	6852      	ldr	r2, [r2, #4]
 8003730:	0992      	lsrs	r2, r2, #6
 8003732:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003736:	fb02 f303 	mul.w	r3, r2, r3
 800373a:	617b      	str	r3, [r7, #20]
 800373c:	e00b      	b.n	8003756 <SystemCoreClockUpdate+0x136>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800373e:	4a1c      	ldr	r2, [pc, #112]	; (80037b0 <SystemCoreClockUpdate+0x190>)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	fbb2 f3f3 	udiv	r3, r2, r3
 8003746:	4a18      	ldr	r2, [pc, #96]	; (80037a8 <SystemCoreClockUpdate+0x188>)
 8003748:	6852      	ldr	r2, [r2, #4]
 800374a:	0992      	lsrs	r2, r2, #6
 800374c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003750:	fb02 f303 	mul.w	r3, r2, r3
 8003754:	617b      	str	r3, [r7, #20]
      }
 
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
 8003756:	4b14      	ldr	r3, [pc, #80]	; (80037a8 <SystemCoreClockUpdate+0x188>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	0f1b      	lsrs	r3, r3, #28
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	3301      	adds	r3, #1
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	603b      	str	r3, [r7, #0]
      SystemCoreClock = pllvco/pllr;      
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	fbb2 f3f3 	udiv	r3, r2, r3
 800376e:	4a0f      	ldr	r2, [pc, #60]	; (80037ac <SystemCoreClockUpdate+0x18c>)
 8003770:	6013      	str	r3, [r2, #0]
      break;
 8003772:	e003      	b.n	800377c <SystemCoreClockUpdate+0x15c>
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    default:
      SystemCoreClock = HSI_VALUE;
 8003774:	4b0d      	ldr	r3, [pc, #52]	; (80037ac <SystemCoreClockUpdate+0x18c>)
 8003776:	4a0e      	ldr	r2, [pc, #56]	; (80037b0 <SystemCoreClockUpdate+0x190>)
 8003778:	601a      	str	r2, [r3, #0]
      break;
 800377a:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800377c:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <SystemCoreClockUpdate+0x188>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	091b      	lsrs	r3, r3, #4
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	4a0c      	ldr	r2, [pc, #48]	; (80037b8 <SystemCoreClockUpdate+0x198>)
 8003788:	5cd3      	ldrb	r3, [r2, r3]
 800378a:	b2db      	uxtb	r3, r3
 800378c:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800378e:	4b07      	ldr	r3, [pc, #28]	; (80037ac <SystemCoreClockUpdate+0x18c>)
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	fa22 f303 	lsr.w	r3, r2, r3
 8003798:	4a04      	ldr	r2, [pc, #16]	; (80037ac <SystemCoreClockUpdate+0x18c>)
 800379a:	6013      	str	r3, [r2, #0]
}
 800379c:	bf00      	nop
 800379e:	371c      	adds	r7, #28
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	40023800 	.word	0x40023800
 80037ac:	20000014 	.word	0x20000014
 80037b0:	00f42400 	.word	0x00f42400
 80037b4:	007a1200 	.word	0x007a1200
 80037b8:	20000018 	.word	0x20000018

080037bc <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80037c2:	2300      	movs	r3, #0
 80037c4:	607b      	str	r3, [r7, #4]
 80037c6:	2300      	movs	r3, #0
 80037c8:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80037ca:	4b35      	ldr	r3, [pc, #212]	; (80038a0 <SetSysClock+0xe4>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a34      	ldr	r2, [pc, #208]	; (80038a0 <SetSysClock+0xe4>)
 80037d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80037d6:	4b32      	ldr	r3, [pc, #200]	; (80038a0 <SetSysClock+0xe4>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037de:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3301      	adds	r3, #1
 80037e4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d103      	bne.n	80037f4 <SetSysClock+0x38>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80037f2:	d1f0      	bne.n	80037d6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80037f4:	4b2a      	ldr	r3, [pc, #168]	; (80038a0 <SetSysClock+0xe4>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003800:	2301      	movs	r3, #1
 8003802:	603b      	str	r3, [r7, #0]
 8003804:	e001      	b.n	800380a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003806:	2300      	movs	r3, #0
 8003808:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d140      	bne.n	8003892 <SetSysClock+0xd6>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003810:	4b23      	ldr	r3, [pc, #140]	; (80038a0 <SetSysClock+0xe4>)
 8003812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003814:	4a22      	ldr	r2, [pc, #136]	; (80038a0 <SetSysClock+0xe4>)
 8003816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800381a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800381c:	4b21      	ldr	r3, [pc, #132]	; (80038a4 <SetSysClock+0xe8>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a20      	ldr	r2, [pc, #128]	; (80038a4 <SetSysClock+0xe8>)
 8003822:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003826:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003828:	4b1d      	ldr	r3, [pc, #116]	; (80038a0 <SetSysClock+0xe4>)
 800382a:	4a1d      	ldr	r2, [pc, #116]	; (80038a0 <SetSysClock+0xe4>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
#endif /* STM32F40_41xxx || STM32F427_437x || STM32F429_439xx  || STM32F412xG || STM32F446xx || STM32F469_479xx */

#if defined(STM32F401xx) || defined(STM32F413_423xx)
    /* PCLK2 = HCLK / 1*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8003830:	4b1b      	ldr	r3, [pc, #108]	; (80038a0 <SetSysClock+0xe4>)
 8003832:	4a1b      	ldr	r2, [pc, #108]	; (80038a0 <SetSysClock+0xe4>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8003838:	4b19      	ldr	r3, [pc, #100]	; (80038a0 <SetSysClock+0xe4>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	4a18      	ldr	r2, [pc, #96]	; (80038a0 <SetSysClock+0xe4>)
 800383e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003842:	6093      	str	r3, [r2, #8]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
#endif /* STM32F40_41xxx || STM32F401xx || STM32F427_437x || STM32F429_439xx || STM32F469_479xx */

#if  defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003844:	4b16      	ldr	r3, [pc, #88]	; (80038a0 <SetSysClock+0xe4>)
 8003846:	4a18      	ldr	r2, [pc, #96]	; (80038a8 <SetSysClock+0xec>)
 8003848:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800384a:	4b15      	ldr	r3, [pc, #84]	; (80038a0 <SetSysClock+0xe4>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a14      	ldr	r2, [pc, #80]	; (80038a0 <SetSysClock+0xe4>)
 8003850:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003854:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003856:	bf00      	nop
 8003858:	4b11      	ldr	r3, [pc, #68]	; (80038a0 <SetSysClock+0xe4>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0f9      	beq.n	8003858 <SetSysClock+0x9c>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
#endif /* STM32F40_41xxx  || STM32F412xG */

#if defined(STM32F413_423xx)  
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_3WS;
 8003864:	4b11      	ldr	r3, [pc, #68]	; (80038ac <SetSysClock+0xf0>)
 8003866:	f240 7203 	movw	r2, #1795	; 0x703
 800386a:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800386c:	4b0c      	ldr	r3, [pc, #48]	; (80038a0 <SetSysClock+0xe4>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	4a0b      	ldr	r2, [pc, #44]	; (80038a0 <SetSysClock+0xe4>)
 8003872:	f023 0303 	bic.w	r3, r3, #3
 8003876:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003878:	4b09      	ldr	r3, [pc, #36]	; (80038a0 <SetSysClock+0xe4>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	4a08      	ldr	r2, [pc, #32]	; (80038a0 <SetSysClock+0xe4>)
 800387e:	f043 0302 	orr.w	r3, r3, #2
 8003882:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 8003884:	bf00      	nop
 8003886:	4b06      	ldr	r3, [pc, #24]	; (80038a0 <SetSysClock+0xe4>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 030c 	and.w	r3, r3, #12
 800388e:	2b08      	cmp	r3, #8
 8003890:	d1f9      	bne.n	8003886 <SetSysClock+0xca>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 8003892:	bf00      	nop
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	40023800 	.word	0x40023800
 80038a4:	40007000 	.word	0x40007000
 80038a8:	27416408 	.word	0x27416408
 80038ac:	40023c00 	.word	0x40023c00

080038b0 <__libc_init_array>:
 80038b0:	b570      	push	{r4, r5, r6, lr}
 80038b2:	4e0d      	ldr	r6, [pc, #52]	; (80038e8 <__libc_init_array+0x38>)
 80038b4:	4c0d      	ldr	r4, [pc, #52]	; (80038ec <__libc_init_array+0x3c>)
 80038b6:	1ba4      	subs	r4, r4, r6
 80038b8:	10a4      	asrs	r4, r4, #2
 80038ba:	2500      	movs	r5, #0
 80038bc:	42a5      	cmp	r5, r4
 80038be:	d109      	bne.n	80038d4 <__libc_init_array+0x24>
 80038c0:	4e0b      	ldr	r6, [pc, #44]	; (80038f0 <__libc_init_array+0x40>)
 80038c2:	4c0c      	ldr	r4, [pc, #48]	; (80038f4 <__libc_init_array+0x44>)
 80038c4:	f000 f83a 	bl	800393c <_init>
 80038c8:	1ba4      	subs	r4, r4, r6
 80038ca:	10a4      	asrs	r4, r4, #2
 80038cc:	2500      	movs	r5, #0
 80038ce:	42a5      	cmp	r5, r4
 80038d0:	d105      	bne.n	80038de <__libc_init_array+0x2e>
 80038d2:	bd70      	pop	{r4, r5, r6, pc}
 80038d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038d8:	4798      	blx	r3
 80038da:	3501      	adds	r5, #1
 80038dc:	e7ee      	b.n	80038bc <__libc_init_array+0xc>
 80038de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038e2:	4798      	blx	r3
 80038e4:	3501      	adds	r5, #1
 80038e6:	e7f2      	b.n	80038ce <__libc_init_array+0x1e>
 80038e8:	08003a84 	.word	0x08003a84
 80038ec:	08003a84 	.word	0x08003a84
 80038f0:	08003a84 	.word	0x08003a84
 80038f4:	08003a88 	.word	0x08003a88

080038f8 <memcmp>:
 80038f8:	b530      	push	{r4, r5, lr}
 80038fa:	2400      	movs	r4, #0
 80038fc:	42a2      	cmp	r2, r4
 80038fe:	d101      	bne.n	8003904 <memcmp+0xc>
 8003900:	2000      	movs	r0, #0
 8003902:	e007      	b.n	8003914 <memcmp+0x1c>
 8003904:	5d03      	ldrb	r3, [r0, r4]
 8003906:	3401      	adds	r4, #1
 8003908:	190d      	adds	r5, r1, r4
 800390a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800390e:	42ab      	cmp	r3, r5
 8003910:	d0f4      	beq.n	80038fc <memcmp+0x4>
 8003912:	1b58      	subs	r0, r3, r5
 8003914:	bd30      	pop	{r4, r5, pc}

08003916 <memcpy>:
 8003916:	b510      	push	{r4, lr}
 8003918:	1e43      	subs	r3, r0, #1
 800391a:	440a      	add	r2, r1
 800391c:	4291      	cmp	r1, r2
 800391e:	d100      	bne.n	8003922 <memcpy+0xc>
 8003920:	bd10      	pop	{r4, pc}
 8003922:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003926:	f803 4f01 	strb.w	r4, [r3, #1]!
 800392a:	e7f7      	b.n	800391c <memcpy+0x6>

0800392c <memset>:
 800392c:	4402      	add	r2, r0
 800392e:	4603      	mov	r3, r0
 8003930:	4293      	cmp	r3, r2
 8003932:	d100      	bne.n	8003936 <memset+0xa>
 8003934:	4770      	bx	lr
 8003936:	f803 1b01 	strb.w	r1, [r3], #1
 800393a:	e7f9      	b.n	8003930 <memset+0x4>

0800393c <_init>:
 800393c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800393e:	bf00      	nop
 8003940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003942:	bc08      	pop	{r3}
 8003944:	469e      	mov	lr, r3
 8003946:	4770      	bx	lr

08003948 <_fini>:
 8003948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800394a:	bf00      	nop
 800394c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800394e:	bc08      	pop	{r3}
 8003950:	469e      	mov	lr, r3
 8003952:	4770      	bx	lr
